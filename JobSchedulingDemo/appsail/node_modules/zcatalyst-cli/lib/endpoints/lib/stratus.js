'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const logger_1 = require("../../util_modules/logger");
const mime_types_1 = __importDefault(require("mime-types"));
const constants_1 = require("../../util_modules/constants");
class Stratus {
    constructor(projectId, opts) {
        this.opts = opts;
        this.projectId = projectId;
    }
    getAllBuckets() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/bucket`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('get all buckets response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    uploadObject(bucketName, objectName, fileStream) {
        return __awaiter(this, void 0, void 0, function* () {
            const extension = objectName.substring(objectName.lastIndexOf('.') + 1).toLowerCase();
            const contentType = mime_types_1.default.lookup(extension + '');
            const res = yield new api_1.default(Object.assign({ origin: `https://${bucketName}` +
                    (this.opts.env === 'Development'
                        ? '-' + this.opts.env.toLowerCase()
                        : '') +
                    constants_1.ORIGIN.stratusSuffix, isExternal: true }, this.opts)).put(`/${objectName}`, {
                body: fileStream,
                headers: {
                    compress: 'false',
                    'Content-Type': contentType || 'application/octet-stream'
                },
                json: false
            });
            if (res.status === 200) {
                return res.status;
            }
            (0, logger_1.debug)('upload object response from server : ' + res);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
}
exports.default = Stratus;
