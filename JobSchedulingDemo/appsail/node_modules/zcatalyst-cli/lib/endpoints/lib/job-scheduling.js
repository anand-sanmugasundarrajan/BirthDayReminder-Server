"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const logger_1 = require("../../util_modules/logger");
class JobScheduling {
    constructor(projectId, opts) {
        this.opts = opts;
        this.projectId = projectId;
    }
    getJobpoolDetails(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get(`/baas/v1/project/${this.projectId}/job_scheduling/jobpool${id ? '/' + id : ''}`, {
                resolveOnError: true
            });
            if (res.status === 200) {
                if (res.body && res.body.data) {
                    return res.body.data;
                }
                (0, logger_1.debug)(`get jobpool details response from server for (${id}): ${res.body}`);
                throw new error_1.default('Server Error: Unexpected Response from server.', {
                    exit: 2
                });
            }
            if (res.status === 404 && id) {
                const allJobpools = yield this.getJobpoolDetails();
                throw new error_1.default(`The provided jobpool identifier (${id}) is invalid`, {
                    exit: 1,
                    context: res.body,
                    status: res.status,
                    errorId: 'JOB-SCHEDULING-1',
                    arg: [
                        (0, ansi_colors_1.bold)(id),
                        (0, ansi_colors_1.bold)(allJobpools
                            .map((pool) => `${(0, ansi_colors_1.green)('*')} ${pool.name} [${pool.id}]`)
                            .join('\n'))
                    ]
                });
            }
            throw new error_1.default('Error when feting details of the jobpool: ' + id, {
                exit: 2,
                context: res.body,
                status: res.status
            });
        });
    }
}
exports.default = JobScheduling;
