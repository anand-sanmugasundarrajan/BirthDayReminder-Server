"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllTargetDetails = exports.getTargetDetails = exports.raw = void 0;
const path_1 = require("path");
const error_1 = __importDefault(require("../../../error"));
const runtime_store_1 = __importDefault(require("../../../runtime-store"));
const constants_1 = require("../../constants");
const fs_1 = require("../../fs");
const project_1 = require("../../project");
function validateConfig(source, configJson) {
    if (!configJson) {
        return {
            valid: false,
            reason: 'Config file is empty'
        };
    }
    const sourcePath = (0, path_1.join)((0, project_1.getProjectRoot)(), source);
    configJson.raw.source_path = sourcePath;
    if (configJson.buildPath || configJson.build_path) {
        const buildPath = configJson.build_path || configJson.buildPath;
        if (!buildPath) {
            return {
                valid: false,
                reason: 'Build Path not present'
            };
        }
        const absolutePath = (0, path_1.isAbsolute)(buildPath) ? buildPath : (0, path_1.resolve)(sourcePath, buildPath);
        configJson.build_path = absolutePath;
        configJson.raw.build_path = buildPath;
    }
    if (configJson.catalyst_auth === true) {
        if (configJson.login_redirect === undefined) {
            return {
                valid: false,
                reason: 'Login Redirect value incorrect! Please check the entered value.'
            };
        }
        else if (configJson.login_redirect.length === 0) {
            return {
                valid: false,
                reason: 'Login Redirect value empty! Please provide a login redirect URL.'
            };
        }
        else if (configJson.login_redirect.toLowerCase().startsWith('http') ||
            configJson.login_redirect.includes('://') ||
            !configJson.login_redirect.startsWith('/') ||
            configJson.login_redirect.includes('//')) {
            return {
                valid: false,
                reason: 'Login Redirect value not a relative URL! Please provide a relative URL.'
            };
        }
    }
    return {
        valid: true
    };
}
function raw(throwError = false) {
    const config = runtime_store_1.default.get('config', null);
    if (config === null) {
        if (throwError) {
            throw new error_1.default(constants_1.FILENAME.config + ' file is required', { exit: 2 });
        }
        return;
    }
    const appsailConfig = config.get('appsail');
    return appsailConfig === null || appsailConfig === void 0 ? void 0 : appsailConfig.map((_conf) => {
        _conf.source = (0, path_1.isAbsolute)(_conf.source) ? _conf.source : (0, path_1.normalize)(_conf.source);
        return _conf;
    });
}
exports.raw = raw;
function getTargetDetails(name) {
    return __awaiter(this, void 0, void 0, function* () {
        const rawTargets = raw();
        const target = rawTargets === null || rawTargets === void 0 ? void 0 : rawTargets.find((tar) => tar.name === name);
        if (!target) {
            return;
        }
        const appConfigPth = (0, project_1.resolveProjectPath)(target.source, constants_1.FILENAME.app_config);
        const isPath = yield fs_1.ASYNC.fileExists(appConfigPth);
        if (!isPath) {
            return Object.assign({ validity: { valid: false, reason: 'Config file not present' } }, target);
        }
        const appConfigJson = yield fs_1.ASYNC.readJSONFile(appConfigPth);
        if (!appConfigJson) {
            return Object.assign({ validity: { valid: false, reason: 'Config file is empty' } }, target);
        }
        return Object.assign(Object.assign(Object.assign({}, target), appConfigJson), { validity: { valid: true } });
    });
}
exports.getTargetDetails = getTargetDetails;
function getAllTargetDetails(throwErr = true) {
    return __awaiter(this, void 0, void 0, function* () {
        const rawTargets = raw();
        if (!rawTargets) {
            if (throwErr) {
                throw new error_1.default('No AppSail targets found');
            }
            return;
        }
        return Promise.all(rawTargets.reduce((resArr, target) => {
            const catalystConfigPth = (0, project_1.resolveProjectPath)(target.source, constants_1.FILENAME.app_config);
            const isPath = fs_1.SYNC.fileExists(catalystConfigPth);
            if (!isPath) {
                resArr.push(Promise.resolve(Object.assign({ validity: {
                        valid: false,
                        reason: 'Config file not present'
                    } }, target)));
                return resArr;
            }
            resArr.push(new Promise((res) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const configJson = yield fs_1.ASYNC.readJSONFile(catalystConfigPth);
                    configJson && (configJson.raw = {});
                    const validity = validateConfig(target.source, configJson);
                    return res(Object.assign({ config: configJson, validity }, target));
                }
                catch (er) {
                    const configErr = error_1.default.getErrorInstance(er, { skipHelp: true });
                    res(Object.assign({ validity: {
                            valid: false,
                            reason: configErr.message
                        } }, target));
                }
            })));
            return resArr;
        }, []));
    });
}
exports.getAllTargetDetails = getAllTargetDetails;
