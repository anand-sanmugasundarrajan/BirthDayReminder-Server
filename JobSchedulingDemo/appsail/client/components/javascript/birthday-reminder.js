(self["webpackChunkbirthday_reminder"] = self["webpackChunkbirthday_reminder"] || []).push([["components/javascript/birthday-reminder"],{

/***/ 52948231:
/*!****************************************************!*\
  !*** ./components/javascript/birthday-reminder.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BirthdayReminder": () => (/* binding */ BirthdayReminder)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @slyte/core/src/lyte-utils */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_carousel_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-carousel.js */ 5322863);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_checkbox_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-checkbox.js */ 13465052);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_table_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-table.js */ 26922513);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_input_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-input.js */ 34960392);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_button_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-button.js */ 60336744);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_modal_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-modal.js */ 51145038);
/* harmony import */ var _component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../component.js */ 18578959);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "Component": function() {
        return _component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    }
});









function prop(type, options) {
    return {
        type: type,
        default: options.default
    };
}

class BirthdayReminder extends _component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    data(arg1) {
        return Object.assign(super.data({
            headerJSON: prop('array', {
                default: [
                    { name: 'Name', body: 'name' },
                    { name: 'Message', body: 'message' },
                    { name: 'Birthday', body: 'birthday' },
                    { name: 'Email', body: 'email' }
                ]
            }),
            reminders: prop('array', { default: [] }),
            name: prop('string', { default: '' }),
            message: prop('string', { default: '' }),
            email: prop('string', { default: '' }),
            birthday: prop('string', { default: '' }),
            template: prop('string', { default: '' }),
            editReminder: prop('object', { default: {} }),
            deleteRemind: prop('object', { default: {} }),
            isEditModalVisible: prop('boolean', { default: false }),
            isDeleteModalVisible: prop('boolean', { default: false }),
            isSignOutModalVisible: prop('boolean', { default: false }),
            maxDate: prop('string', { default: this.getCurrentDate() }),
            selectedButton: prop('string', { default: null }),
            selectTemplate: prop('string', { default: '1636000000007022' }),
            userName: prop('string', { default: '' }),
            userId: prop('string', { default: null }),
            userType: prop('string',{ default: null})
        }), arg1);
    }

    getCurrentDate() {
        const today = new Date();
        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, '0');
        const dd = String(today.getDate()).padStart(2, '0');
        return `${yyyy}-${mm}-${dd}`;
    }

    didConnect() {
        this.loadReminders();
    }
    async loadReminders() {
        try {
            // @ts-ignore
            const userManagement = catalyst.auth;
            
            const response = await userManagement.isUserAuthenticated();
            this.setData('userId', response.content.user_id);
            this.setData('userType', response.content.role_details.role_name);
            const formData = {
                userId: this.getData('userId'),
                userType: this.getData('userType')
             };
                const reminderResponse = await fetch('https://appsail-10091141877.development.catalystappsail.com/execute/getReminder', {
                method: 'POST',  
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });
    
            if (!reminderResponse.ok) {
                throw new Error(`HTTP error! Status: ${reminderResponse.status}`);
            }
            const data = await reminderResponse.json();
            this.setData('reminders', data);
    
        } catch (error) {
            console.error('Error loading reminders:', error);
        }
    }



    static methods(arg1) {
        return Object.assign(super.methods({}), arg1);
    }

    static actions(arg1) {
        return Object.assign(super.actions({

            updateReminder() {
                const updatedData = {
                    id: this.getData('editReminder').id,
                    name: this.getData('editReminder').name,
                    birthday: this.getData('editReminder').birthday,
                    message: this.getData('editReminder').message,
                    email: this.getData('editReminder').email,
                    template: this.getData('selectTemplate')
                };

                fetch('https://appsail-10091141877.development.catalystappsail.com/execute/updateReminder', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ method: 'updateReminder', ...updatedData })
                }).then(response => response.json())
                    .then(data => {
                        // @ts-ignore
                        document.getElementById("editReminderModal").ltProp('show', false);
                        alert('Reminder updated successfully!');
                        this.loadReminders();
                        this.setData('isEditModalVisible', false);
                    }).catch(error => {
                        console.error('Error updating reminder:', error);
                        alert('Failed to update reminder.');
                    });

            },

            deleteReminder() {
                const data = {
                    id: this.getData('deleteRemind').id
                };

                fetch('https://appsail-10091141877.development.catalystappsail.com/execute/deleteReminder', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ...data })
                }).then(response => response.json())
                    .then(data => {
                        alert('Reminder deleted successfully!');
                        // @ts-ignore
                        document.getElementById("deleteReminderModal").ltProp('show', false);
                        this.setData('isDeleteModalVisible', false);
                        this.loadReminders();
                    }).catch(error => {
                        console.error('Error deleting reminder:', error);
                        alert('Failed to delete reminder.');
                    });
            },
            signOut(){
                const directURL = 'https://appsail-10091141877.development.catalystappsail.com/__catalyst/auth/signup'
                // @ts-ignore
                catalyst.auth.signOut(directURL);
            },
            signIntoZoho(){
                const directURL = 'https://appsail-10091141877.development.catalystappsail.com/__catalyst/auth/login'
                // @ts-ignore
                catalyst.auth.signOut(directURL);
            },



            toggleAutoSend(id, checked) {
                fetch('https://appsail-10091141877.development.catalystappsail.com/execute/toggleAutoSend', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id: id, status: checked ? 'enable' : 'disable' })
                }).then(response => response.json())
                    .then(data => {
                        console.log('Auto-send toggled successfully!');
                        this.loadReminders();
                    }).catch(error => {
                        console.error('Error toggling auto-send:', error);
                        alert('Failed to toggle auto-send.');
                    });
            },

            openEditModal(id, name, birthday, message, email) {
                this.setData('editReminder', { id, name, birthday, message, email });
                // @ts-ignore
                document.getElementById("editReminderModal").ltProp('show', true);
                // this.$L("#editReminderModal")[0].ltProp('show', true)
            },
            openSignOutModal() {
                // @ts-ignore
                document.getElementById("signOut-modal").ltProp('show', true);
            },

            closeEditModal() {
                this.setData('isEditModalVisible', false);
                // @ts-ignore
                document.getElementById("editReminderModal").ltProp('show', false);
                // this.$L("#editReminderModal")[0].ltProp('show', false)

            },
            openDeleteModal(id) {
                this.setData('deleteRemind', { id });
                // @ts-ignore
                document.getElementById("deleteReminderModal").ltProp('show', true);


            },
            closeDeleteModal() {
                this.setData('deleteReminderModal', false);
                // @ts-ignore
                document.getElementById("deleteReminderModal").ltProp('show', false);
            },
            async submitForm(event) {
                if (event) event.preventDefault();
            
                try {
                    const name = this.getData('name');
                    const birthday = this.getData('birthday');
                    const message = this.getData('message');
                    const email = this.getData('email');
                    const userId = this.getData('userId');
                    const userType = this.getData('userType');
            
                    const carouselElement = document.querySelector('.carousel-item.lyteActive');
                    if (!carouselElement) {
                        alert('Carousel element not found.');
                        return;
                    }
            
                    const template = carouselElement.getAttribute('data-template-id');
                    if (!template) {
                        alert('No template ID found for the active carousel item.');
                        return;
                    }
            
                    const today = new Date();
                    const yyyy = today.getFullYear();
                    const mm = String(today.getMonth() + 1).padStart(2, '0');
                    const dd = String(today.getDate()).padStart(2, '0');
                    const now = `${yyyy}-${mm}-${dd}`;
            
                    if (now < birthday) {
                        alert('Enter a valid past date');
                        return;
                    }
            
                    // Email validation logic
                    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    const isValidEmail = re.test(String(email).toLowerCase());
            
                    if (!isValidEmail) {
                        alert('Invalid email format');
                        return;
                    }
            
                    if (!name || !message || !email || !birthday || !template) {
                        alert('All fields are required');
                        return;
                    }
            
                    const formData = {
                        name,
                        birthday,
                        message,
                        email,
                        template, 
                        userId,
                        userType
                    };
            
                    const response = await fetch('https://appsail-10091141877.development.catalystappsail.com/execute/insertReminder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(formData)
                    });
            
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
            
                    alert('Reminder added successfully!');
                    this.loadReminders();
                } catch (error) {
                    console.error('Error adding reminder:', error);
                    alert('Failed to add reminder.');
                }
            }
        }), arg1);
    }



    static observers(arg1) {
        return Object.assign(super.observers({}), arg1);
    }

    _() {
        _;
    }
}

BirthdayReminder._template = "<template tag-name=\"birthday-reminder\"> <script src=\"/birthday-reminder/components/javascript/birthday-reminder.js\"></script> <div class=\"container mt-5 mb-5\"> <h4 id=\"username\"> </h4> <button id=\"signout-button\" class=\"btn btn-danger\" onclick=\"{{action('openSignOutModal')}}\">Sign Out</button> <h2>Birthday Reminder</h2> <div class=\"row\"> <div class=\"form-group col-md-6\"> <lyte-input lt-prop-label=\"Name:\" lt-prop-appearance=\"box\" lt-prop-direction=\"horizontal\" lt-prop-placeholder=\"Enter your name\" lt-prop-required=\"true\" lt-prop-name=\"name\" lt-prop-id=\"name\" lt-prop-value=\"{{lbind(name)}}\"></lyte-input> </div> <div class=\"form-group col-md-6\"> <lyte-input lt-prop-label=\"Birthday:\" lt-prop-appearance=\"box\" lt-prop-direction=\"horizontal\" lt-prop-type=\"date\" lt-prop-placeholder=\"Enter your Birthday\" lt-prop-required=\"true\" lt-prop-name=\"birthday\" lt-prop-id=\"birthday\" lt-prop-value=\"{{lbind(birthday)}}\" lt-prop-format=\"YYYY-MM-DD\" max=\"{{maxDate}}\"></lyte-input> </div> </div> <div class=\"row\"> <div class=\"form-group col-md-6\"> <lyte-input lt-prop-label=\"Message:\" lt-prop-appearance=\"box\" lt-prop-direction=\"horizontal\" lt-prop-required=\"true\" lt-prop-placeholder=\"Please enter any message\" lt-prop-name=\"message\" lt-prop-id=\"message\" lt-prop-value=\"{{lbind(message)}}\"></lyte-input> </div> <div class=\"form-group col-md-6\"> <lyte-input lt-prop-label=\"Email:\" lt-prop-appearance=\"box\" lt-prop-direction=\"horizontal\" lt-prop-type=\"email\" lt-prop-placeholder=\"Enter your Email\" lt-prop-required=\"true\" lt-prop-name=\"email\" lt-prop-id=\"email\" lt-prop-value=\"{{lbind(email)}}\"></lyte-input> </div> </div> <br> <h2>Choose a template</h2> <lyte-carousel lt-prop-active-index=\"0\" lt-prop-orientation=\"horizontal\" lt-prop-effect=\"fade\" lt-prop-records=\"4\" lt-prop-data=\"{{yourData}}\" lt-prop-auto-play=\"false\"> <template is=\"registerYield\" yield-name=\"carouselBoxYield\"> <lyte-carousel-prev> </lyte-carousel-prev> <lyte-carousel-content> <lyte-carousel-item class=\"carousel-item\" data-template-id=\"1636000000011009\"> <div class=\"template-1-card\"> <div class=\"template-1-card-header\">Happy birthday {{name}}</div> <div class=\"template-1-card-body\"> <br> <b>{{message}}</b><br><br> I pray that God blesses you with all the good things in life―health, <br> wealth, happiness, and success.<br> May your dreams come true and may you achieve all that you set out to do.<br> <br><br><br> </div> </div> </lyte-carousel-item> <lyte-carousel-item class=\"carousel-item\" data-template-id=\"1636000000011005\"> <div class=\"template-2-container-card\"> <div class=\"template-2-left-container-card\"> <img src=\"https://funtikka.com/wp-content/uploads/2024/02/happy-birthday-quotes1.jpg\" alt=\"Birthday Image\" class=\"birthday\"> </div> <div class=\"template-2-right-container-card\"> <div class=\"template-2-text\"> <br> \"Wishing you a day that's as special as you,<br> Filled with laughter, joy, and memories too.\"<br> {{message}}<br> Happy birthday {{name}} may it be sublime,<br> A truly wonderful and memorable time.\"<br><br> </div> </div> </div> </lyte-carousel-item> <lyte-carousel-item class=\"carousel-item lyteActive\" data-template-id=\"1636000000011001\"> <div class=\"template-3-card\"> <img src=\"https://cdn.pixabay.com/photo/2020/10/06/21/54/cake-5633461__480.png\" class=\"birthday\" alt=\"Birthday Image\"> <div class=\"template-3-text\"> <h1>Happy Birthday {{name}}!</h1> <p>{{message}}</p> </div> </div> </lyte-carousel-item> <lyte-carousel-item class=\"carousel-item\" data-template-id=\"1636000000011013\"> <div class=\"template-4-card\"> <div class=\"template-4-card-content\"> <div class=\"template-4-card-header\"> <h1>Celebrate with Us!</h1> </div> <div class=\"template-4-card-body\"> <p>Happy Birthday {{name}}</p> <p>{{message}}</p> </div> <div class=\"template-4-card-footer\"> <p></p> </div> </div> </div> </lyte-carousel-item> <lyte-carousel-indicator> <lyte-carousel-indicator-item data-value=\"0\"> </lyte-carousel-indicator-item> <lyte-carousel-indicator-item data-value=\"1\"> </lyte-carousel-indicator-item> <lyte-carousel-indicator-item data-value=\"2\"> </lyte-carousel-indicator-item> <lyte-carousel-indicator-item data-value=\"3\"> </lyte-carousel-indicator-item> </lyte-carousel-indicator> </lyte-carousel-content> <p class=\"note\"><b>Note:The template currently visible on the screen at the time of form submission is considered the selected template.</b></p> <lyte-carousel-next> </lyte-carousel-next> </template> </lyte-carousel> <div class=\"row\"> <div class=\"form-group col-md-12\"> <lyte-button onclick=\"{{action('submitForm',event)}}\" lt-prop-appearance=\"success\" lt-prop-type=\"submit\" lt-prop-size=\"large\" lt-prop-auto-focus=\"true\"> <template is=\"registerYield\" yield-name=\"text\"> Submit </template> </lyte-button> </div> </div> <lyte-table lt-prop-yield=\"true\"> <template is=\"registerYield\" yield-name=\"yield\"> <lyte-table-structure> <lyte-thead> <lyte-tr> <template is=\"for\" _jsp=\"true\" items=\"{{headerJSON}}\" item=\"list\" index=\"index\"> </template> </lyte-tr> </lyte-thead> <lyte-tbody> <template is=\"for\" _jsp=\"true\" items=\"{{reminders}}\" item=\"list\" index=\"index\"> <lyte-tr> <template is=\"for\" _jsp=\"true\" items=\"{{headerJSON}}\" item=\"header\" index=\"index\"> </template> <lyte-td> <div class=\"d-flex w-100 justify-content-between align-items-center\"> <div> <h5 class=\"mb-1\">{{list.Name}}</h5> <small>{{list.BirthDay}}</small> <p class=\"mb-1\">{{list.Message}}</p> <small>{{list.Email}}</small> </div> <div class=\"d-flex align-items-center\"> <lyte-checkbox lt-prop-value=\"1\" lt-prop-tabindex=\"0\" lt-prop-type=\"switch\" lt-prop-id=\"autoSend_{{list.ID}}\" lt-prop-checked=\"{{lbind(list.AutoSend)}}\" lt-prop-label=\"\" lt-prop-name=\"checkbox\" onchange=\"{{action('toggleAutoSend',list.ID,list.AutoSend)}}\"> </lyte-checkbox> <div class=\"d-flex align-items-center ms-2\"> <button class=\"btn btn-secondary btn-sm me-2\" onclick=\"{{action('openEditModal',list.ID,list.Name,list.BirthDay,list.Message,list.Email)}}\">Edit</button> <button class=\"btn btn-danger btn-sm\" onclick=\"{{action('openDeleteModal',list.ID)}}\">Delete</button> </div> </div> </div> </lyte-td> </lyte-tr> </template> </lyte-tbody> </lyte-table-structure> </template> </lyte-table> </div> <lyte-modal id=\"editReminderModal\"> <template is=\"registerYield\" yield-name=\"modal\"> <lyte-modal-header> Edit Reminder </lyte-modal-header> <lyte-modal-content> <form id=\"editReminderForm\" onsubmit=\"{{action('updateReminder',event)}}\"> <input type=\"hidden\" lt-prop-id=\"edit-id\" lt-prop-value=\"{{lbind(editReminder.id)}}\"> <table cellpadding=\"0\" cellspacing=\"0\" class=\"w100per modalTable\"> <tbody> <tr> <td class=\"pB10 pR30 alignRight\">Name</td> <td class=\"pB10 mymodalinput\"> <lyte-input lt-prop-type=\"text\" lt-prop-appearance=\"box\" lt-prop-id=\"edit-name\" lt-prop-placeholder=\"\" lt-prop-value=\"{{lbind(editReminder.name)}}\" lt-prop-required=\"true\"> </lyte-input> </td> </tr> <tr> <td class=\"pB10 pR30 alignRight\">Birthday</td> <td class=\"pB10 mymodalinput\"> <lyte-input lt-prop-type=\"date\" lt-prop-appearance=\"box\" lt-prop-id=\"edit-birthday\" lt-prop-placeholder=\"\" lt-prop-value=\"{{lbind(editReminder.birthday)}}\" lt-prop-format=\"YYYY-MM-DD\" lt-prop-required=\"true\"> </lyte-input> </td> </tr> <tr> <td class=\"pB10 pR30 alignRight\">Message</td> <td class=\"pB10 mymodalinput\"> <lyte-input lt-prop-type=\"text\" lt-prop-appearance=\"box\" lt-prop-id=\"edit-message\" lt-prop-placeholder=\"\" lt-prop-value=\"{{lbind(editReminder.message)}}\" lt-prop-required=\"true\"> </lyte-input> </td> </tr> <tr> <td class=\"pB10 pR30 alignRight\">Email</td> <td class=\"pB10 mymodalinput\"> <lyte-input lt-prop-type=\"email\" lt-prop-appearance=\"box\" lt-prop-id=\"edit-email\" lt-prop-placeholder=\"\" lt-prop-value=\"{{lbind(editReminder.email)}}\" lt-prop-required=\"true\"> </lyte-input> </td> </tr> </tbody> </table> <div class=\"text-center\"> <lyte-button onclick=\"{{action('updateReminder')}}\" lt-prop-appearance=\"primary\" type=\"submit\"> <template is=\"registerYield\" yield-name=\"text\">Save changes</template> </lyte-button> <lyte-button onclick=\"{{action('closeEditModal')}}\"> <template is=\"registerYield\" yield-name=\"text\">Cancel</template> </lyte-button> </div> </form> </lyte-modal-content> </template> </lyte-modal> <lyte-modal id=\"deleteReminderModal\"> <template is=\"registerYield\" yield-name=\"modal\"> <lyte-modal-header> DELETE REMINDER </lyte-modal-header> <p>Are you sure to delete reminder?</p> <lyte-modal-footer class=\"right\"> <lyte-button lt-prop-appearance=\"primary\" onclick=\"{{action('deleteReminder')}}\"> <template is=\"registerYield\" yield-name=\"text\"> DELETE </template> </lyte-button> <lyte-button onclick=\"{{action('closeDeleteModal')}}\"> <template is=\"registerYield\" yield-name=\"text\"> Cancel </template> </lyte-button> </lyte-modal-footer> </template> </lyte-modal> <lyte-modal id=\"signOut-modal\"> <template is=\"registerYield\" yield-name=\"modal\"> <lyte-modal-header> </lyte-modal-header> <p>Thanks for using our application!</p> <a class=\"signUp\" onclick=\"{{action('signOut')}}\">SignUp</a> <a class=\"exit\" onclick=\"{{action('signIntoZoho')}}\">Login</a><br> <lyte-modal-footer class=\"right\"><br><br> <center> Zoho Catalyst</center> </lyte-modal-footer> </template> </lyte-modal> </template><style>/* General container styles */\n.container, .signin-container, .account-container {\n  padding: 40px;\n  margin-top: 50px;\n  margin-bottom: 50px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n}\nlyte-button{\n  margin-left :550px;\n}\n\n/* Specific container styles */\n.container {\n  background-image: linear-gradient(to bottom, #ffffff, #f2f2f2);\n}\n\n.signin-container {\n  background-image: linear-gradient(to bottom, #f2f2f2, #ffffff);\n  height: 600px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.account-container {\n  background-image: linear-gradient(to bottom, #ffffff, #f2f2f2);\n  height: 100px;\n  text-align: center;\n}\n\n.account-container p {\n  font-size: 16px;\n  color: #333;\n}\n\n.account-container button {\n  background-color: #11a1a1;\n  border: none;\n  color: white;\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.account-container button:hover {\n  background-color: #0e7d7d;\n}\n\n.account-container a {\n  color: white;\n  text-decoration: none;\n}\n\niframe {\n  background-image: linear-gradient(to bottom, #f2f2f2, #ffffff);\n  height: 600px;\n  width: 600px;\n  border-radius: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Sign-in container styles */\n.signin-container h2 {\n  font-size: 24px;\n  color: #11a1a1;\n  margin-bottom: 20px;\n}\n.right{\n  text-align: center;\n}\n/* Headings */\nh2, h3 {\n  background: linear-gradient(to right, rgb(11, 121, 121), rgb(11, 121, 121));\n  background-clip: text;\n  -webkit-text-fill-color: transparent;\n  text-align: center;\n}\n\nh3 {\n  font-size: 1.5rem;\n  margin-bottom: 10px;\n}\n\n/* Form labels and inputs */\nlabel {\n  transition: color 0.3s ease;\n}\n\nlabel:hover {\n  color: grey;\n}\n\n/* input[type=\"text\"], input[type=\"date\"], select {\n  height: 40px; \n  width: 400px;\n} */\nlyte-input{\n  height: 40px; \n  width: 400px;\n}\n\n.form-group {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.form-group label {\n  flex: 0 0 200px;\n  margin-right: 10px;\n}\n\n.form-group input, .form-group select {\n  flex: 1;\n}\n\ninput[type=\"submit\"] {\n  background-image: linear-gradient(to right, rgb(11, 121, 121), rgb(11, 121, 121));\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);\n  margin-top: 15px;\n  width: 150px;\n  margin-left :550px;\n}\n\ninput[type=\"submit\"]:hover {\n  background-image: linear-gradient(to right, rgb(11, 121, 121), rgb(11, 121, 121));\n}\n\ninput[type=\"checkbox\"] {\n  margin: 20px;\n}\n\n/* Toggle switch */\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 40px;\n  height: 20px;\n}\n\n.switch input {\n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  transition: .4s;\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 16px;\n  width: 16px;\n  left: 2px;\n  bottom: 2px;\n  background-color: white;\n  transition: .4s;\n}\n\ninput:checked + .slider {\n  background-color: #2196F3;\n}\n\ninput:focus + .slider {\n  box-shadow: 0 0 1px #2196F3;\n}\n\ninput:checked + .slider:before {\n  transform: translateX(18px);\n}\n\n.slider.round {\n  border-radius: 20px;\n}\n\n.slider.round:before {\n  border-radius: 50%;\n}\n\n/* Carousel styles */\n.carousel-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 20px;\n  position: relative;\n}\n\n.carousel {\n  overflow: hidden;\n  width: 100%;\n  border: 2px solid black;\n  position: relative;\n}\n\n.carousel-track {\n  display: flex;\n  transition: transform 0.3s ease;\n}\n\n.carousel img {\n  max-width: 100%;\n  display: block;\n  margin: 0 10px;\n}\n\n.carousel-button {\n  background-color: #008cba;\n  border: none;\n  color: white;\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.carousel-button.prev {\n  left: 10px;\n}\n\n.carousel-button.next {\n  right: 10px;\n}\n\n.carousel-button:hover {\n  background-color: #005f5f;\n}\n\n/* Form container styles */\n.form-container {\n  margin-bottom: 20px;\n}\n\n.carousel-item .text {\n  padding: 20px;\n  background: rgba(255, 255, 255, 0.7);\n  border-radius: 5px;\n  text-align: center;\n}\n\n.carousel-item img.birthday {\n  width: 100%;\n  max-width: 300px;\n  border-radius: 5px;\n}\n\n.carousel-item h1 {\n  color: #333;\n  font-size: 1.5rem;\n  margin-bottom: 10px;\n}\n\n.carousel-item p {\n  color: #666;\n  font-size: 1rem;\n}\n\n.credit {\n  margin-top: 10px;\n  font-size: 0.875rem;\n  color: #999;\n}\n\n.carousel-item .card {\n  border: none;\n}\n\n#signout-button {\n  position: absolute;\n  top: 60px;\n  right: 115px;\n  z-index: 1000;\n}\n\n.carousel-control-prev, .carousel-control-next {\n  filter: invert(100%);\n}\n.carousel-control-prev,\n.carousel-control-next {\n    filter: invert(100%);\n}\n\n.form-container {\n    margin-bottom: 20px;\n}\n\n/* General Styles for Carousel Items */\n.carousel-item {\n    height: 400px;\n    /* Fixed height for all carousel items */\n    transition: transform 0.5s ease;\n    /* Smooth transition for carousel items */\n}\n\n.carousel-item img.birthday {\n    width: auto;\n    max-height: 300px;\n    object-fit: contain;\n    margin: auto;\n}\n\n/* New Styles for the Container Div */\n.carousel-container {\n    padding: 20px;\n    background-color: #f8f9fa;\n    /* Light background for contrast */\n    border-radius: 10px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Form Validation Styles */\n.is-invalid {\n    border-color: #dc3545;\n    /* Bootstrap danger color */\n}\n\n.invalid-feedback {\n    display: none;\n    /* Hide feedback by default */\n}\n\n.is-invalid~.invalid-feedback {\n    display: block;\n    /* Show feedback when input is invalid */\n}\n\n.switch {\n    position: relative;\n    display: inline-block;\n    width: 40px;\n    height: 20px;\n}\n\n.switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n.slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    transition: .4s;\n}\n\n.slider:before {\n    position: absolute;\n    content: \"\";\n    height: 16px;\n    width: 16px;\n    left: 2px;\n    bottom: 2px;\n    background-color: white;\n    transition: .4s;\n}\n\ninput:checked+.slider {\n    background-color: #2196F3;\n}\n\ninput:focus+.slider {\n    box-shadow: 0 0 1px #2196F3;\n}\n\ninput:checked+.slider:before {\n    transform: translateX(18px);\n}\n\n/* Rounded sliders */\n.slider.round {\n    border-radius: 20px;\n}\n\n.slider.round:before {\n    border-radius: 50%;\n}\n\n.reminder-item {\n    margin-bottom: 20px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.reminder-item .controls {\n    margin-top: 10px;\n}\n/* Carousel Styles */\n.carousel-control-prev,\n.carousel-control-next {\n    filter: invert(100%);\n}\n\n/* General Styles for Carousel Items */\n.carousel-item {\n    height: 400px;\n    /* Fixed height for all carousel items */\n    transition: transform 0.5s ease;\n    /* Smooth transition for carousel items */\n}\n\n.carousel-item img.birthday {\n    width: auto;\n    max-height: 450px;\n    object-fit: contain;\n    margin: auto;\n}\n\n.card-footer {\n  font-size: 1em;\n  color: #555;\n}\n\n.card-footer p {\n  margin: 5px 0;\n}\n.card-footer1 {\n  font-size: 1em;\n  color: black;\n}\n\n.card-footer p {\n  margin: 5px 0;\n}\n/* .top-right-button {\n  position: absolute;\n  top: 10px; \n  right: 10px; \n  background-color: black; \n  color: white; \n  border: none; \n  padding: 5px 10px; \n  font-size: 12px; \n  cursor: pointer; \n  border-radius: 3px;\n} *//* Initial button styles */\n.top-right-button {\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  background-color: #3498db; /* Initial color */\n  color: white;\n  border: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  cursor: pointer;\n  position: relative;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n}\n\n/* Button active (after click) styles */\n.top-right-button.clicked {\n  background-color: #2ecc71; /* Change color after click */\n  transform: scale(1.1); /* Slightly enlarge the button */\n  color: transparent; /* Hide the original text */\n}\n\n.top-right-button.clicked::before {\n  content: '\\2714'; /* Unicode tick mark */\n  font-size: 24px;\n  color: white;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n/* Optionally hide the button text after click */\n.top-right-button.clicked::after {\n  content: '';\n  visibility: hidden;\n}\n\n.signUp{\n  position: absolute;\n  bottom: 80px; /* Adjust as needed */\n  right: 30px; /* Adjust as needed */\n  background-color: black; /* Button color */\n  color: white; /* Text color */\n  border: none; /* Remove border */\n  padding: 5px 10px; /* Adjust padding for button size */\n  font-size: 12px; /* Font size for small button */\n  cursor: pointer; /* Pointer cursor on hover */\n  border-radius: 3px; /* Rounded corners */\n  background-color: #3498db;\n  color: white;\n  padding: 10px 20px;\n  font-size: 1rem;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  margin: 0 5px;\n  background-color: #2980b9;\n}\n.exit{\n  position: absolute;\n  bottom: 80px; /* Adjust as needed */\n  right: 130px; /* Adjust as needed */\n  color: white; /* Text color */\n  font-size: 12px; /* Font size for small button */\n  cursor: pointer; /* Pointer cursor on hover */\n  border-radius: 3px; /* Rounded corners */\n  background-color: #3498db;\n  padding: 10px 20px;\n  font-size: 1rem;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  margin: 0 5px;\n  background-color: red;\n}\n.top-right-button:hover {\n  background-color: #333; /* Darker shade on hover */\n}\n.top-right-button1 {\n  position: absolute;\n  top: 10px; /* Adjust as needed */\n  right: 10px; /* Adjust as needed */\n  background-color: white; /* Button color */\n  color: blue; /* Text color */\n  border: none; /* Remove border */\n  padding: 5px 10px; /* Adjust padding for button size */\n  font-size: 12px; /* Font size for small button */\n  cursor: pointer; /* Pointer cursor on hover */\n  border-radius: 3px; /* Rounded corners */\n}\n\n.top-right-button1:hover {\n  background-color: wheat; /* Darker shade on hover */\n}\n/* Carousel container styles */\nlyte-carousel {\n  display: block;\n  position: relative;\n  width: 80%; /* Adjust width as needed */\n  max-width: 1200px; /* Optional: Max-width for larger screens */\n  height: 500px; /* Adjust height as needed */\n  margin: 20px auto;\n}\n\n/* Carousel item styles */\nlyte-carousel-item {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%; /* Ensure each item takes up full height */\n}\n\n/* Template card styles */\n.template-1-card,\n.template-2-container-card,\n.template-3-card,\n.template-4-card {\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n}\n\n/* Template 1 styles */\n.template-1-card {\n  background: #f5f5f5;\n  text-align: center;\n  padding: 20px;\n}\n\n.template-1-card-header {\n  font-size: 24px;\n  margin-bottom: 10px;\n}\n\n.template-1-card-body {\n  font-size: 16px;\n}\n\n.card-footer1 {\n  background: #fff;\n  padding: 10px;\n  text-align: center;\n  border-top: 1px solid #ccc;\n}\n\n.top-right-button {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: #008cba;\n  color: white;\n  border: none;\n  padding: 10px;\n  font-size: 14px;\n  cursor: pointer;\n}\n\n.top-right-button:hover {\n  background-color: #005f5f;\n}\n\n/* Template 2 styles */\n.template-2-container-card {\n  display: flex;\n  height: 100%;\n}\n\n.template-2-left-container-card {\n  flex: 1;\n}\n\n.template-2-right-container-card {\n  flex: 1;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.template-2-text {\n  font-size: 18px;\n  text-align: center;\n}\n\n/* Template 3 styles */\n.template-3-card {\n  text-align: center;\n  padding: 20px;\n  background: #ffebcd;\n}\n\n.template-3-text {\n  margin-top: 10px;\n}\n\n.template-3-text h1 {\n  margin-bottom: 10px;\n}\n\n/* Template 4 styles */\n.template-4-card {\n  background: #e0f7fa;\n  padding: 20px;\n  box-shadow: 0px 4px 6px rgba(0,0,0,0.1);\n  text-align: center;\n}\n\n.template-4-card-content {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.template-4-card-header,\n.template-4-card-body,\n.template-4-card-footer {\n  padding: 10px;\n}\n\n/* Carousel control button styles */\nlyte-carousel-prev,\nlyte-carousel-next {\n  background-color: #008cba;\n  border: none;\n  color: white;\n  padding: 10px;\n  font-size: 18px;\n  cursor: pointer;\n  position: absolute;\n  top: 45%;\n  transform: translateY(-50%);\n}\n\nlyte-carousel-prev {\n  left: 10px;\n}\n\nlyte-carousel-next {\n  right: 10px;\n}\n\nlyte-carousel-prev:hover,\nlyte-carousel-next:hover {\n  background-color: #005f5f;\n}\n\n/* Carousel indicators styles */\nlyte-carousel-indicator {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 5px;\n}\n\nlyte-indicator-item {\n  width: 10px;\n  height: 10px;\n  background-color: #ccc;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\nlyte-indicator-item[data-value=\"0\"].active,\nlyte-indicator-item[data-value=\"1\"].active,\nlyte-indicator-item[data-value=\"2\"].active,\nlyte-indicator-item[data-value=\"3\"].active {\n  background-color: #008cba;\n}\n/* Template 1 Styles */\n.template-1-card {\n  background-color: #fff;\n  border-radius: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n  text-align: center;\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n}\n\n.template-1-card-header {\n  background-color: #ff6f61;\n  color: #fff;\n  padding: 20px;\n  border-radius: 15px 15px 0 0;\n  font-size: 1.5em;\n}\n\n.template-1-card-body {\n  font-size: 1.2em;\n  color: #333;\n background-color:#fff4df;\n}\n\n.template-1-button {\n  background-color: #ff6f61;\n  color: #fff;\n  border: none;\n  border-radius: 5px;\n  padding: 10px 20px;\n  cursor: pointer;\n  font-size: 1em;\n  transition: background-color 0.3s ease;\n}\n\n.template-1-button:hover {\n  background-color: #e55a4e;\n}\n\n/* Template 2 Styles */\n.template-2-container-card {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  /* Ensure full height */\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n.template-2-left-container-card {\n  width: 50%;\n  height: 100%;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.template-2-left-container-card img {\n  width: 100%;\n  /* Ensure image fits the container */\n  height: 100%;\n  object-fit: cover;\n  /* Cover the entire area */\n}\n\n.template-2-right-container-card {\n  backdrop-filter: blur(25px);\n  background-color: rgba(255, 255, 255, 0.1);\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  width: 50%;\n  height: 100%;\n  margin: 1vw;\n  border-radius: 10px;\n  text-align: center;\n}\n\n.template-2-text {\n  padding: 1em;\n  font-size: 1.2em;\n  color: #333;\n}\n\n/* Template 3 Styles */\n.template-3-card {\n  background: #12192c;\n  border-radius: 30px;\n  height: 100%;\n  /* Ensure full height */\n  width: 100%;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 1em;\n  color: #DCE35B;\n}\n\n.template-3-text {\n  padding: 1em;\n  font-size: 1.5em;\n  color:#ccc;\n}\n\n.template-3-card img.birthday {\n  max-height: 200px;\n  object-fit: contain;\n  margin: auto;\n}\n\n.template-3-text h1 {\n  font-family: cursive;\n  font-size: 40px;\n  color:#ccc;\n}\n\n/* Template 4 Styles */\n.template-4-card {\n  background-image: url('https://source.unsplash.com/800x600/?birthday,party');\n  background-size: cover;\n  background-position: center;\n  border-radius: 20px;\n  width: 100%;\n  height: 100%;\n  /* Ensure full height */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  position: relative;\n}\n\n.template-4-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.8);\n}\n\n.template-4-card-content {\n  position: relative;\n  z-index: 1;\n  text-align: center;\n  padding: 20px;\n}\n\n.template-4-card-header {\n  color: #d72638;\n  margin-bottom: 15px;\n  font-size: 2em;\n}\n\n.template-4-card-header h1 {\n  font-size: 2.5em;\n  margin: 0;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.template-4-card-body {\n  font-size: 1.2em;\n  color: #333;\n  margin-bottom: 20px;\n  line-height: 1.6;\n}\n\n.template-4-card-footer {\n  font-size: 1em;\n  color: #555;\n}\n\n.template-4-card-footer p {\n  margin: 5px 0;\n}\n\n/* General modal styles */\nlyte-modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 400px;\n  max-width: 90%;\n  background-color: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n  z-index: 999;\n}\n\nlyte-modal-header {\n  font-size: 1.25rem;\n  font-weight: 600;\n  padding-bottom: 15px;\n  color: #333;\n  /* border-bottom: 1px solid #eaeaea; */\n}\n\nlyte-modal-content {\n  padding: 20px;\n  font-size: 1rem;\n  color: #555;\n}\n\nlyte-modal-footer {\n  padding: 15px 0;\n  text-align: right;\n  /* border-top: 1px solid #eaeaea; */\n}\n\n.mymodalinput lyte-input {\n  width: 300px;\n  padding: 10px;\n  font-size: 1rem;\n  /* border: 1px solid #ddd; */\n  border-radius: 5px;\n  box-sizing: border-box;\n  margin-bottom: 15px;\n}\n\n.mymodalinput lyte-input:focus {\n  border-color: #3498db;\n  outline: none;\n  box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-center lyte-button {\n  margin: 10px 5px;\n}\n\n.text-center lyte-button[lt-prop-appearance=\"primary\"] {\n  background-color: #3498db;\n  border: none;\n  color: white;\n  padding: 10px 20px;\n  font-size: 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.text-center lyte-button[lt-prop-appearance=\"primary\"]:hover {\n  background-color: #2980b9;\n}\n\n.text-center lyte-button {\n  background-color: #e0e0e0;\n  border: none;\n  color: #333;\n  padding: 10px 20px;\n  font-size: 1rem;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.text-center lyte-button:hover {\n  background-color: #d5d5d5;\n}\n\n/* Delete Reminder Modal specific styles */\nlyte-modal#deleteReminderModal p {\n  font-size: 1.1rem;\n  color: #444;\n  padding: 15px 0;\n  text-align: center;\n}\n\nlyte-modal#deleteReminderModal lyte-button[lt-prop-appearance=\"primary\"] {\n  background-color: #e74c3c;\n}\n\nlyte-modal#deleteReminderModal lyte-button[lt-prop-appearance=\"primary\"]:hover {\n  background-color: #c0392b;\n}\n\n/* Modal close button styles */\nlyte-modal-footer lyte-button,\nlyte-modal-header lyte-button {\n  margin: 0 10px;\n}\n\n/* Modal transitions */\nlyte-modal {\n  opacity: 0;\n  transition: opacity 0.4s ease;\n}\n\nlyte-modal.show {\n  opacity: 1;\n}\n\n/* Styling for the note paragraph */\n.note {\n  font-size: 14px;                /* Smaller font size for subtlety */\n  font-style: italic;             /* Italic to differentiate the note */\n  color: #6c757d;                 /* Light grey color for soft emphasis */\n  background-color: #f8f9fa;      /* Light background for better readability */\n  padding: 10px 15px;             /* Add some padding for spacing */\n  border-left: 4px solid #007bff; /* Left border to highlight the note */\n  border-radius: 4px;             /* Rounded corners for a polished look */\n  margin: 15px 0;       \n  top: 50%;\n  left: 50%;          \n  text-align: center;\n}\n</style>";;
BirthdayReminder._dynamicNodes = [{"t":"a","p":[3,3]},{"t":"a","p":[3,7,1,1]},{"t":"cD","p":[3,7,1,1],"in":15,"sibl":[14]},{"t":"a","p":[3,7,3,1]},{"t":"cD","p":[3,7,3,1],"in":14,"sibl":[13]},{"t":"a","p":[3,9,1,1]},{"t":"cD","p":[3,9,1,1],"in":13,"sibl":[12]},{"t":"a","p":[3,9,3,1]},{"t":"cD","p":[3,9,3,1],"in":12,"sibl":[11]},{"t":"a","p":[3,15]},{"t":"r","p":[3,15,1],"dN":[{"t":"cD","p":[1],"in":11,"sibl":[10]},{"t":"tX","p":[3,1,1,1,1]},{"t":"tX","p":[3,1,1,3,3,0]},{"t":"cD","p":[3,1],"in":10,"sibl":[9]},{"t":"tX","p":[3,3,1,3,1,7]},{"t":"tX","p":[3,3,1,3,1,11]},{"t":"cD","p":[3,3],"in":9,"sibl":[8]},{"t":"tX","p":[3,5,1,3,1,1]},{"t":"tX","p":[3,5,1,3,3,0]},{"t":"cD","p":[3,5],"in":8,"sibl":[7]},{"t":"tX","p":[3,7,1,1,3,1,1]},{"t":"tX","p":[3,7,1,1,3,3,0]},{"t":"cD","p":[3,7],"in":7,"sibl":[6]},{"t":"cD","p":[3,9,1],"in":6,"sibl":[5]},{"t":"cD","p":[3,9,3],"in":5,"sibl":[4]},{"t":"cD","p":[3,9,5],"in":4,"sibl":[3]},{"t":"cD","p":[3,9,7],"in":3,"sibl":[2]},{"t":"cD","p":[3,9],"in":2,"sibl":[1]},{"t":"cD","p":[3],"in":1,"sibl":[0]},{"t":"cD","p":[7],"in":0}],"dc":[11,10,9,8,7,6,5,4,3,2,1,0],"hc":true,"trans":true,"in":11,"sibl":[10]},{"t":"cD","p":[3,15],"in":10,"sibl":[9]},{"t":"a","p":[3,17,1,1]},{"t":"r","p":[3,17,1,1,1],"dN":[],"in":9,"sibl":[8]},{"t":"cD","p":[3,17,1,1],"in":8,"sibl":[7]},{"t":"r","p":[3,19,1],"dN":[{"t":"a","p":[1,1,1,1]},{"t":"f","p":[1,1,1,1],"dN":[],"in":5,"sibl":[4]},{"t":"cD","p":[1,1,1],"in":4,"sibl":[3]},{"t":"cD","p":[1,1],"in":3,"sibl":[2]},{"t":"a","p":[1,3,1]},{"t":"f","p":[1,3,1],"dN":[{"t":"a","p":[1,1]},{"t":"f","p":[1,1],"dN":[],"in":3,"sibl":[2]},{"t":"tX","p":[1,3,1,1,1,0]},{"t":"tX","p":[1,3,1,1,3,0]},{"t":"tX","p":[1,3,1,1,5,0]},{"t":"tX","p":[1,3,1,1,7,0]},{"t":"a","p":[1,3,1,3,1]},{"t":"cD","p":[1,3,1,3,1],"in":2,"sibl":[1]},{"t":"a","p":[1,3,1,3,3,1]},{"t":"a","p":[1,3,1,3,3,3]},{"t":"cD","p":[1,3],"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[2,1,0],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"cD","p":[1,3],"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[4,3,2,1,0],"hc":true,"trans":true,"in":7,"sibl":[6]},{"t":"cD","p":[3,19],"in":6,"sibl":[5]},{"t":"r","p":[5,1],"dN":[{"t":"cD","p":[1],"in":9,"sibl":[8]},{"t":"a","p":[3,1]},{"t":"a","p":[3,1,1]},{"t":"a","p":[3,1,3,1,1,3,1]},{"t":"cD","p":[3,1,3,1,1,3,1],"in":8,"sibl":[7]},{"t":"a","p":[3,1,3,1,3,3,1]},{"t":"cD","p":[3,1,3,1,3,3,1],"in":7,"sibl":[6]},{"t":"a","p":[3,1,3,1,5,3,1]},{"t":"cD","p":[3,1,3,1,5,3,1],"in":6,"sibl":[5]},{"t":"a","p":[3,1,3,1,7,3,1]},{"t":"cD","p":[3,1,3,1,7,3,1],"in":5,"sibl":[4]},{"t":"a","p":[3,1,5,1]},{"t":"r","p":[3,1,5,1,1],"dN":[],"in":4,"sibl":[3]},{"t":"cD","p":[3,1,5,1],"in":3,"sibl":[2]},{"t":"a","p":[3,1,5,3]},{"t":"r","p":[3,1,5,3,1],"dN":[],"in":2,"sibl":[1]},{"t":"cD","p":[3,1,5,3],"in":1,"sibl":[0]},{"t":"cD","p":[3],"in":0}],"dc":[9,8,7,6,5,3,1,0],"hc":true,"trans":true,"in":5,"sibl":[4]},{"t":"cD","p":[5],"in":4,"sibl":[3]},{"t":"r","p":[7,1],"dN":[{"t":"cD","p":[1],"in":5,"sibl":[4]},{"t":"a","p":[5,1]},{"t":"r","p":[5,1,1],"dN":[],"in":4,"sibl":[3]},{"t":"cD","p":[5,1],"in":3,"sibl":[2]},{"t":"a","p":[5,3]},{"t":"r","p":[5,3,1],"dN":[],"in":2,"sibl":[1]},{"t":"cD","p":[5,3],"in":1,"sibl":[0]},{"t":"cD","p":[5],"in":0}],"dc":[5,3,1,0],"hc":true,"trans":true,"in":3,"sibl":[2]},{"t":"cD","p":[7],"in":2,"sibl":[1]},{"t":"r","p":[9,1],"dN":[{"t":"cD","p":[1],"in":1,"sibl":[0]},{"t":"a","p":[5]},{"t":"a","p":[7]},{"t":"cD","p":[10],"in":0}],"dc":[1,0],"hc":true,"trans":true,"in":1,"sibl":[0]},{"t":"cD","p":[9],"in":0},{"type":"dc","trans":true,"hc":true,"p":[15,14,13,12,11,10,8,7,6,5,4,3,2,1,0]}];;

BirthdayReminder._observedAttributes = [
    "headerJSON",
    "reminders",
    "name",
    "message",
    "email",
    "birthday",
    "template",
    "editReminder",
    "deleteRemind",
    "isEditModalVisible",
    "isDeleteModalVisible",
    "isSignOutModalVisible",
    "maxDate",
    "selectedButton",
    "selectTemplate",
    "userName",
    "userId",
    "userType"
];



BirthdayReminder.register("birthday-reminder", {
    hash: "BirthdayReminder_4",
    refHash: "C_birthday-reminder_app_0"
});


/***/ }),

/***/ 60336744:
/*!***********************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-button.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteButtonComponent": () => (/* binding */ LyteButtonComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    }
});




/**
 * Renders a button
 * @component lyte-button
 * @version 1.0.0
 * @utility click, focus, blur
 * @dependencies lyte-shortcut
 * 		/plugins/lyte-shortcut.js
 */

class LyteButtonComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    data(arg1) {
		return Object.assign(super.data({

			/**
			 * @componentProperty {string} ltPropName
			 */

			'ltPropName': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': undefined
			} ),


			/**
			 * @componentProperty {boolean} ltPropDisabled=false
			 */

			'ltPropDisabled': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', {
				'default': false
			} ),

			/**
			 * @componentProperty {boolean} ltPropAutoFocus=false
			 */

			'ltPropAutofocus': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', {
				'default': false
			} ),

			/**
			 * @componentProperty {default | primary | secondary | success | failure} ltPropAppearance=default
			 */

			'ltPropAppearance': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-button', 'appearance', 'default' )
			} ),

			/**
			 * @componentProperty {string} ltPropId
			 */

			'ltPropId': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': undefined
			} ),

			/**
			 * @componentProperty {button | submit | reset} ltPropType=button
			 */

			'ltPropType': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': 'button'
			} ),

			/**
			 * @componentProperty {string} ltPropValue
			 */

			'ltPropValue': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': undefined
			} ),

			/**
			 * @componentProperty {string} ltPropTabindex
			 */

			'ltPropTabindex': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': undefined
			} ),

			/**
			 * @componentProperty {string} ltPropStyle
			 */

			'ltPropStyle': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-button', 'style', undefined )
			} ),

			/**
			 * @componentProperty {extra-small | small | medium | large} ltPropSize=default
			 */

			'ltPropSize': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-button', 'size', 'default' )
			} ),
			/**
			 * @componentProperty {colorString} ltPropBackgroundColor
			 */

			'ltPropBackgroundColor': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-button', 'backgroundColor', undefined )
			} ),
			/**
			 * @componentProperty {colorString} ltPropColor
			 */

			'ltPropColor': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-button', 'color', undefined )
			} ),

			/**
			 * @componentProperty {string} lyteShortcut
			 */

			'lyteShortcut': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': ''
			} ),

			/**
			 * @componentProperty {string} ltPropClass
			 */

			'ltPropClass':(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-button', 'class', '' )
			} ),
			/**
			 * @componentProperty {string} ltPropClass
			 */

			'lyteUnbound': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', {
				'default': false
			} ),

			/**
			 * @componentProperty {object} ltPropAriaButton={}
			 * @version 3.1.0
			 */

			'ltPropAriaButton': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', {
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-button', 'ariaButton', {} )
			} ),

			/**
			 * @componentProperty {string} ltPropText
			 */

			'ltPropText': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': ''
			}),
			/**
			 * @componentProperty {string} ltPropDataTabindex
			 */
			'ltPropDataTabindex': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': null }),
			'randomId': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string')
		}), arg1);
	}

    init() {
		this.pushValue();
	}

    registerFunction(fn) {
		var that = this;
		this.$node[ fn ] = function() {
			var node = that.$node,
			button = node.querySelector( 'button' ),
			disabled = node.ltProp( 'disabled' );

			if( disabled ) {
				return ;
			}

			button[ fn ]();
		}
	}

    didConnect() {
		var fns = [ 'click', 'focus', 'blur' ], i = 0,
		oldAria = {}, newAria = this.getData( 'ltPropAriaButton' );

		for( ; i < fns.length; i++ ) {
			this.registerFunction( fns[ i ] );
		}

		this.addAriaValues( oldAria, newAria );
	}

    addAriaValues(oldAria, newAria) {
		var button = this.getButtonWidget();

		window._lyteUiUtils.setAttribute( button, newAria, oldAria );
	}

    getButtonWidget() {
		return this.$node.querySelector( 'button' );
	}

    didDestroy() {
		var val;

		delete this.$node.focus;
		delete this.$node.blur;
		delete this.$node.click;

		try {
			val = JSON.parse( this.getData('lyteShortcut') );
		}
		catch( err ) {
			return ;
		}

		if( Array.isArray( val ) ) {
			val.forEach( function( shortcutConfig ) {
				if( shortcutConfig.key ) {
					window.shortcut.push( {
						newKey: undefined,
						type: undefined,
						wait: undefined,
						oldKey: shortcutConfig.key
					} );
				}
			} );
		}
		else {
			window.shortcut.push( {
				newKey: undefined,
				type: undefined,
				wait: undefined,
				oldKey: val.key
			} );
		}
	}

    pushValue(oldValue) {
		var key = this.getData( 'lyteShortcut' ),
		node = this.$node,
		// oldValue can be an array as well. Need to handle that
		oldObj = JSON.parse( oldValue || '{}' ),
		oldKey = oldObj.key;

		if(!key){
			return
		}
		window.newObj = JSON.parse( key );
		if(Array.isArray(newObj)){
			newObj.forEach(function(item){
				if(item.key){
					window.shortcut.push( {
						newKey : item.key,
						type : item.type,
						wait : item.wait,
						// Need to unregister shortcut for array case
						oldKey:undefined,
						value:node
					} );
				}
			})
		}
		else{
			if(newObj.key){
				window.shortcut.push( {
					newKey : newObj.key,
					type : newObj.type,
					wait : newObj.wait,
					oldKey: oldKey,
					value:node
				} );
			}
			else {
				window.shortcut.push( {
					newKey: undefined,
					type: undefined,
					wait: undefined,
					oldKey: oldKey
				} );
			}
		}
	}

    static actions(arg1) {
        return Object.assign(super.actions({
            check: function( event ) {
                var button = this.$node.querySelector( 'button' )
                if( button.disabled ) {
                    event.stopPropagation();
                    event.preventDefault();
                }
            }
        }), arg1);
    }

    static observers(arg1) {
        return Object.assign(super.observers({
            ariaObserver: function( change ) {
                var oldAria = change.oldValue,
                newAria = change.newValue;

                this.addAriaValues( oldAria, newAria );
            }.observes( 'ltPropAriaButton' ),

            shortcutChanged: function( changeObj ) {
                this.pushValue( changeObj.oldValue );
            }.observes( 'lyteShortcut' ),

            changeClass: function() {
                var cls = this.getData('ltPropClass'), tempStyle = '',
                tempClass = 'lyte-button' + ( cls ? ' ' + cls : '' ),
                app = this.getData( 'ltPropAppearance' ), size = this.getData( 'ltPropSize' ),
                color = this.getData( 'ltPropColor' ), bg = this.getData( 'ltPropBackgroundColor' );
                size = size ? size.toLowerCase() : '';
                app = app ? app : 'default';

                if( bg ) {
                    tempClass = tempClass + ' lyteBackgroundColorBtn';
                }
                else if( color ) {
                    tempClass = tempClass + ' lyteColorBtn';
                }
                else if( app.indexOf( 'default' ) !== -1 ) {
                    tempClass = tempClass + ' lyteDefaultBtn';
                }
                else if( app.indexOf( 'primary' ) !== -1 ) {
                    tempClass = tempClass + ' lytePrimaryBtn';
                }
                else if( app.indexOf( 'secondary' ) !== -1 ) {
                    tempClass = tempClass + ' lyteSecondary';
                }

                if( app.indexOf( 'success' ) !== -1 ) {
                    tempClass = tempClass + ' lyteSuccess';
                }
                else if( app.indexOf( 'failure' ) !== -1 ) {
                    tempClass = tempClass + ' lyteFailure';
                }

                if( size === 'extra-small' ) {
                    tempClass = tempClass + ' lyteExsm';
                }
                else if( size === 'small' ) {
                    tempClass = tempClass + ' lyteSm';
                }
                else if( size === 'large' ) {
                    tempClass = tempClass + ' lyteLg';
                }

                if( color ) {
                    if( !bg ) {
                        // Adding bg-color #fff because androids render a grayish button.
                        tempStyle = tempStyle + 'background-color: #fff; color:' + color + ';border-color:' + color + ';';
                    }
                    else {
                        tempStyle = tempStyle + 'background-color:' + bg + ';border-color:' + bg + ';color:' + color + ';';
                    }
                }
                else if( bg ) {
                    tempStyle = tempStyle + 'background-color:' + bg + ";border-color:" + bg + ";color:white;";
                }

                if( this.getData( 'ltPropStyle' ) ) {
                    tempStyle = tempStyle + this.getData( 'ltPropStyle' );
                }

                this.setData( 'finalStyle', tempStyle );
                this.setData( 'finalClass', tempClass );
            }.observes(
                'ltPropClass',
                'ltPropBackgroundColor',
                'ltPropColor',
                'ltPropStyle',
                'ltPropSize',
                'ltPropAppearance'
            ).on( 'init' )
        }), arg1);
    }

    _() {
        _;
    }
}

LyteButtonComponent._template = "<template tag-name=\"lyte-button\" onclick=\"{{action('check',event)}}\" onmousedown=\"{{action('check',event)}}\"> <button type=\"{{ltPropType}}\" class=\"{{finalClass}}\" value=\"{{ltPropValue}}\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" id=\"{{ltPropId}}\" name=\"{{ltPropName}}\" autofocus=\"{{ltPropAutofocus}}\" disabled=\"{{ltPropDisabled}}\" style=\"{{finalStyle}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropText}}\" is=\"case\" lc-id=\"lc_id_0\"> {{ltPropText}} </template><template default=\"\"> <lyte-yield yield-name=\"text\"></lyte-yield> </template></template> </button> </template>";;
LyteButtonComponent._dynamicNodes = [{"t":"a","p":[1],"a":{"style":{"name":"style","dynamicValue":"finalStyle"},"t":{"name":"type","dynamicValue":"ltPropType"}}},{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"i","p":[1],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0},{"type":"dc","trans":true,"hc":true,"p":[0]}];;

LyteButtonComponent._observedAttributes = [
    "ltPropName",
    "ltPropDisabled",
    "ltPropAutofocus",
    "ltPropAppearance",
    "ltPropId",
    "ltPropType",
    "ltPropValue",
    "ltPropTabindex",
    "ltPropStyle",
    "ltPropSize",
    "ltPropBackgroundColor",
    "ltPropColor",
    "lyteShortcut",
    "ltPropClass",
    "lyteUnbound",
    "ltPropAriaButton",
    "ltPropText",
    "ltPropDataTabindex",
    "randomId"
];

/**
 * @syntax yielded
 * <lyte-button>
 *     <template is="registerYield" yield-name="text">
 *         click me
 *     </template>
 * </lyte-button>
 */

/**
 * @syntax staticBuilder
 * <lyte-button lt-prop-text="click me"></lyte-button>
 */



LyteButtonComponent.register("lyte-button", {
    hash: "LyteButtonComponent_7",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});


/***/ }),

/***/ 70273897:
/*!*************************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-calendar.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteCalendarComponent": () => (/* binding */ LyteCalendarComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_helpers_helpers_dev_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/helpers/helpers-dev.js */ 16898062);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_dropdown_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-dropdown.js */ 99219004);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_tooltip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-tooltip.js */ 30122601);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_plugins_lyte_moment_basic_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/plugins/lyte-moment-basic.js */ 84342124);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_plugins_lyte_moment_basic_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_ui_component_plugins_lyte_moment_basic_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_plugins_lyte_moment_additional_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/plugins/lyte-moment-additional.js */ 8595206);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_plugins_lyte_moment_additional_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_ui_component_plugins_lyte_moment_additional_js__WEBPACK_IMPORTED_MODULE_7__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    }
});













/**
 * Renders a calendar
 * @component lyte-calendar
 * @version 1.0.0
 * @utility revertToToday,revertToSelected
 * @methods onDateSelected,onNavigate,onViewChange
 * @dependencies lyte-dropdown
 */

class LyteCalendarComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    data(arg1) {
		return Object.assign(super.data({
			'ltPropStartDate': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': ''
			}),
			'ltPropEndDate': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': ''
			}),

			/**
			 * @componentProperty {dateString} ltPropCurrentDate
			 */

			'ltPropCurrentDate': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 
				'default': '' 
			} ),
			/** 
			 * @typedef {
				* MM/DD/YYYY |
				* YYYY/MM/DD |
				* MMM/DD/YYYY |
				* MMM/YYYY/DD |
				* DD/MMM/YYYY |
				* YYYY/MMM/DD |
				* DD/YYYY/MMM |
				* YYYY/DD/MMM |
				* MMMM/DD/YYYY |
				* MMMM/YYYY/DD |
				* DD/YYYY/MMMM |
				* YYYY/DD/MMMM |
				* DD/MMMM/YYYY |
				* YYYY/MMMM/DD
				* } dateFormat
			*/
			/**
			 * @componentProperty {dateFormat} ltPropFormat
			 * @default MM/DD/YYYY
			 */

			'ltPropFormat': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'format', 'MM/DD/YYYY' )  
			} ),

			/**
			 * @componentProperty {boolean} ltPropYear
			 * @default false
			 * 
			 */

			'ltPropYear': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'year', false ) 
			} ),

			/**
			 * @typedef {
			 * 'MMMM YYYY' |
			 * 'MMM YYYY'
			 * } MonthHeaderFormat
			 */
			/**
			 * @componentProperty {MonthHeaderFormat} ltPropMonthHeaderFormat
			 * @default 'MMMM YYYY'
			 */

			'ltPropMonthHeaderFormat': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'monthHeaderFormat', 'MMMM YYYY' ) 
			} ),
			'daysOfWeek': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 
				'default': [] 
			} ),

			'ariaMonthNames': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 'default': [
					'January',
					'February',
					'March',
					'April',
					'May',
					'June',
					'July',
					'August',
					'September',
					'October',
					'November',
					'December' 
			] } ),

			'monthSystemValues': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', {
				'default': [
					'January',
					'February',
					'March',
					'April',
					'May',
					'June',
					'July',
					'August',
					'September',
					'October',
					'November',
					'December'
				]
			}),

			'monthNames': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 
				'default': [
					'January',
					'February',
					'March',
					'April',
					'May',
					'June',
					'July',
					'August',
					'September',
					'October',
					'November',
					'December'
				]
			} ),
			'shortHands': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 
				'default': [
					'Jan',
					'Feb',
					'Mar',
					'Apr',
					'short.may',
					'Jun',
					'Jul',
					'Aug',
					'Sep',
					'Oct',
					'Nov',
					'Dec'
				]
			} ),
			'todayName': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default': 'Today' 
			} ),
			'viewDate': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', { 
				'default': {} 
			} ),
			'changeData': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', {
				'default': 0 
			} ),

			/**
			 * @componentProperty {boolean} ltPropYield
			 * @default false
			 *
			 */

			'ltPropYield': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 
				'default': false
			}),

			/**
			 * @componentProperty {dateString} ltPropMinDate
			 */

			'ltPropMinDate': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 
				'default': ''
			}),

			/**
			 * @componentProperty {dateString} ltPropMaxDate
			 */

			'ltPropMaxDate': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 
				'default': '' 
			} ),

			/**
			 * @componentProperty {number} ltPropStartWeekDay
			 * @default 1
			 * @minValue 0
			 * @maxValue 6
			 * @step 1
			 */

			'ltPropStartWeekDay': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'startWeekDay', 1 )
			} ),
			'navYield': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 
				'default': false 
			} ),
			'selectDate': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 
				'default': true 
			} ),
			'currentDatechanged': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', { 
				'default': 0 
			} ),

			/**
			 * @componentProperty {boolean} ltPropFillRows
			 * @default true
			 * @version 1.0.2
			 *
			 */

			'ltPropFillRows': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'fillRows', true ) 
			} ),

			/**
			 * @componentProperty {number} ltPropNumberOfRows
			 * @version 1.0.2
			 * @default 6
			 */

			'ltPropNumberOfRows': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', { 
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'numberOfRows', 6 )
			} ),
			'callFrmDidcnct' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean',{"default" : false}),
			'monthDD' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("object"),
			'yearDD' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("object"),
			'years' :(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("array",{"default":[]}),

			/**
			 * @componentProperty {default|dropdown|drilldown} ltPropHeaderType
			 * @default default
			 * @version 1.0.2
			 */

			'ltPropHeaderType' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( "string", { "default": window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'headerType', 'default' ) } ),

			'ltPropDropdown': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'dropdown', 
				{
					'callout': true
				} 
			) } ),

			'cords': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', { default: {} } ),
			'start': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number' ),
			'prev': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean' ),
			'tt': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': true } ),
			'showToday': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': true } ),

			'monthViewTableArray': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 'default': [] } ),

			'ltPropBodyYield': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropShowToday': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'showToday', true ) } ),

			'ltPropI18n': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'I18n', false ) } ),

			'ltPropActivateNavigation': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			// This attribute is only relevant for dateView
			'ltPropDisableNavigation': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			/* A team uses this but we are not goint to expose this outside */
			'ltPropPreventAddingRows': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropSelectionType': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': 'day' } ),

			'ltPropWeekends': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 'default': [ 6, 0 ] } ),

			'ltPropCurrentWeek': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 'default': [] } ),

			'ltPropCurrentMonth': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': '' } ),

			'ltPropCurrentYear': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': '' } ),

			'ltPropDisabledDates': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 'default': [] } ),

			'ltPropCurrentDates': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 'default': [] } ),

			'ltPropMultiple': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'headerId': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string' ),

			'monthDropdownId': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string' ),
			
			'yearDropdownId': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string' ),

			'ltPropIso' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string'  ),

			'ltPropWeekNumCriteria': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', { 'default': 1 } ),

			'ltPropHolidays': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { 'default': [ ] } ),

			'ltPropDisableWeekends': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropDisableHolidays': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropWeekNumber': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			//showToday even when we are in current date
			'ltPropAlwaysShowToday': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropHighlightWeekendHolidays': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropTimeZone' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string' ),

			'ltPropDisabledDays' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', { default : window._lyteUiUtils.resolveDefaultValue( 'lyte-calendar', 'disabledWeekDays', [] ) } ),

			'ltPropHeaderAlignType': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': '' } ),

			'ltPropWeekNumHeader': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': '' } ),

			'showYear': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropCurrentDisplayMonth': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': '' } ),

			'ltPropCurrentDisplayYear': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': '' } ),

			'ltPropCurrentDisplayDecade': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': '' } )
		}), arg1);
	}

    getCells() {
		var container = this.getTableContainer(),
			rows = container.children, cells = [];

		Array.from(rows).forEach(function (row) {
			cells = cells.concat(Array.from(row.children));
		});

		return cells;
	}

    getTableContainer() {
		return this.$node.querySelector( '.lyteCalTableRowGroup' );
	}

    moveForward(event, navDirection, cellsToMove) {
		this.move( event, navDirection, cellsToMove );
	}

    moveBackward(event, navDirection, cellsToMove) {
		this.move( event, navDirection, cellsToMove );
	}

    move(event, navDirection, cellsToMove) {
		var activeCell = this.getActiveCell(),
			cells = this.getCells(),
			currentNavIndex = cells.indexOf(activeCell),
			newNavIndex = currentNavIndex + cellsToMove,
			newActiveCell;

		if (!activeCell) {
			return;
		}

		if (!this.shouldViewChange(cells, newNavIndex, cellsToMove)) {
			newActiveCell = this.getCellFromSameView(cells, newNavIndex);
		}
		else {
			newActiveCell = this.getCellFromDifferentView(navDirection, currentNavIndex, cellsToMove, event);
		}

		this.activateCell(newActiveCell);
		this.focusActiveCell();
	}

    getCellFromSameView(cells, index) {
		return cells[ index ];
	}

    focusActiveCell() {
		var activeCell = this.getActiveCell();

		if (activeCell) {
			activeCell.focus();
		}
	}

    focusActiveRow() {
		var activeRow = this.getActiveRow();
		if( activeRow ) {
			activeRow.focus();
		}
	}

    shouldViewChange(cells, newNavIndex, cellsToMove) {
		var viewType = this.getData( 'viewType' );

		if (viewType === 'monthView' || viewType === 'decadeView') {
			return !cells[newNavIndex];
		}

		return !this.isSameMonth( cellsToMove );
	}

    isDisabledCell(cell) {
		return cell.classList.contains( 'lyteCalDisabled' )
	}

    getCellFromDifferentView(navDirection, currentNavIndex, cellsToMove, event) {
		var viewType = this.getData( 'viewType' ), newActiveDate;

		if (viewType === 'monthView' || viewType === 'decadeView') {
			this.changeView(navDirection);

			return this.getDrillDownViewCell(navDirection, currentNavIndex, cellsToMove);
		}


		newActiveDate = this.getChangedDate(cellsToMove);
		this.changeView(navDirection);

		return this.getCell( newActiveDate );
	}

    getDrillDownViewCell(navDirection, currentNavIndex, cellsToMove) {
		var cells = this.getCells();

		return navDirection === 'previous' ? cells[ cells.length + ( currentNavIndex + cellsToMove ) ] : cells[ ( currentNavIndex + cellsToMove ) % cells.length ]
	}

    changeView(navDirection) {
		if( navDirection === 'previous' ) {
			this.moveToPrevious( 'M', window.event );	
		}
		else {
			this.moveToNext( 'M', window.event );
		}
	}

    moveToFirstCell(event, navDirection) {
		var actionType = 'home',
			cellsToMove = this.getCellsToMove(navDirection, actionType);

		this.moveBackward( event, navDirection, cellsToMove );
	}

    moveToLastCell(event, navDirection) {
		var actionType = 'end', 
		cellsToMove = this.getCellsToMove( navDirection, actionType );

		this.moveForward( event, navDirection, cellsToMove );
	}

    getCellsToMove(navDirection, actionType) {
		var activeCell = this.getActiveCell(),
			parentElement = (activeCell || {}).parentElement,
			children = Array.from((parentElement || {}).children || []),
			index = children.indexOf(activeCell), viewType = this.getData('viewType');

		if (!activeCell) {
			return 0;
		}

		if (actionType === 'home' || actionType === 'end') {
			return navDirection === 'previous' ? -index : (children.length - 1 - index);
		}

		if (viewType === 'monthView' || viewType === 'decadeView') {
			return navDirection === 'previous' ? -4 : 4;
		}

		return navDirection === 'previous' ? -7 : 7;
	}

    getCell(date) {
		return this.$node.querySelector( '[data-date="' + date + '"]' );
	}

    isSameMonth(daysToChange) {
		var changedMonth = this.getChangedMonth( daysToChange ),
		viewDate = this.getData( 'viewDate' ),
		currentViewedMonth = viewDate.getMonth();
		
		return changedMonth === currentViewedMonth;

	}

    getChangedMonth(daysToChange) {
		var changedDate = this.getChangedDate( daysToChange ),
		format = this.getData( 'ltPropFormat' );

		return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment( changedDate, format ).format( 'M' ) - 1;
	}

    // Assume activeCell will always return a valid cell
    getChangedDate(daysToChange) {
		var activeCell = this.getActiveCell(),
			activeDate = activeCell.getAttribute('data-date'),
			format = this.getData('ltPropFormat');

		return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment( activeDate, format ).add( daysToChange, 'day' ).format( format );
	}

    previousNavigation(MONTH, event) {
		var YEAR = 'Y', MONTH = 'M', 
		navigationType = event.shiftKey ? YEAR : MONTH;

		this.moveToPrevious(navigationType, event);
		this.focusActiveCell();
	}

    nextNavigation(MONTH, event) {
		var YEAR = 'Y', MONTH = 'M', 
		navigationType = event.shiftKey ? YEAR : MONTH;

		this.moveToNext(navigationType, event);
		this.focusActiveCell();
	}

    toDate() {

		var comp_timezone = this.data.ltPropTimeZone;

		if( comp_timezone != void 0 ){
			return new Date( _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment().timezone( comp_timezone ).format( 'MM/DD/YYYY' ) );
		}

		if( this.isHavingTimezone ){
			return new Date( _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment().format( 'MM/DD/YYYY' ) );
		}
		return new Date();
	}

    moment(arg1, arg2, arg3) {
		var timezone = this.isHavingTimezone;
		if (timezone) {// for test case failure
			if (arg3) {
				arg3.ignore_timezone = timezone;
			} else {
				arg3 = { ignore_timezone: timezone };
			}
			return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(arg1, arg2, arg3);
		} else {
			if (arg2) { // for test case failure
				if (arg3) { // for test case failure
					return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(arg1, arg2, arg3);
				}
				return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(arg1, arg2);
			}
			return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(arg1);
		}
	}

    setShowYearAccToView() {
		var viewType = this.getData( 'viewType' );
		var showYear = this.getData( 'ltPropYear' );

		if( viewType === 'dateView' ) {
			if( showYear ){
				this.setData('showYear',true);
			}
			else{
				this.setData('showYear',false);
			}
		}
		else if( viewType === 'monthView' ) {
			this.setData('showYear',false);
		}
		else if( viewType === 'decadeView' ) {
			this.setData('showYear',false);
		}
	}

    removeSelectionStyles() {
		var container = this.$node.querySelector( '.lyteCalTableContainer' );

		container.classList.remove( 'lyteCalDaySelType' );
		container.classList.remove( 'lyteCalWeekSelType' );
		container.classList.remove( 'lyteCalMonthSelType' );
		container.classList.remove( 'lyteCalYearSelType' );
	}

    changeDaysOfWeek() {
		var days = [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ], 
		title = [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ],
		startDay = this.getData( 'ltPropStartWeekDay' ), i, result = [] ;
		var weekend = this.getData('ltPropWeekends');

		for( i = 0; i < 7; i++ ) { 
			var resClass = 'lyteCalTableCellHeader';
			var isWeekendHeader = weekend.indexOf( ( i + startDay ) % 7 ) === -1 ? false : true;
			if( isWeekendHeader ){
				resClass += ' lyteCalWeekendHeader'
			}

			result.push( { 'day': days[ ( i + startDay ) % 7 ], 'id': this.generateRandomId() , 'title': title[ ( i + startDay ) % 7 ], 'class': resClass } );

		}

		this.setData( 'daysOfWeek', result );
		
	}

    generateRandomId() {
		return 'Lyte_Calendar_Day_' + window._lyteUiUtils.calId++;
	}

    isYYFormat() {
		var format = this.getData( 'ltPropFormat' ),
		rYY = /\byy\b/ig;

		return rYY.test( format );
	}

    outsideBoundary(calStartDate) {
		var calculatedYear = calStartDate.getFullYear(),
			current = this.toDate(),
			currentYear = current.getFullYear(),
			diff = calculatedYear - currentYear,
			dateBounds = this.isMomentSupported ? _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment() : { uL: 19, lL: 80 };

		if (diff > dateBounds.uL) {
			return true;
		}
		else if (diff < -dateBounds.lL) {
			return true;
		}	
		
	}

    didDestroy() {
		delete this.$node.revertToToday;
	}

    activateRelevantCell() {
		var format = this.getData( 'ltPropFormat' ),
		curDate = this.stringToDate( this.getData( 'ltPropCurrentDate' ), format ),
		todayDate = this.toDate(), 
		previousActiveDate = this.stringToDate( this.getData( 'previousActiveCellDate' ), format ), relevantCell;

		if( previousActiveDate !== 'Invalid Date' ) {
			relevantCell = this.findSimilarCell( previousActiveDate );
		}

		if( curDate !== 'Invalid Date' ) {
			relevantCell = relevantCell || this.findSimilarCell( curDate );
		}

		relevantCell = relevantCell || this.findSimilarCell( todayDate );

		this.activateCell( relevantCell );
	}

    findSimilarCell(userDateObj) {
		var userDate = userDateObj.getDate(),
			currentViewedDateObj = this.getData('viewDate'),
			currentViewedMonth = currentViewedDateObj.getMonth(),
			currentViewedYear = currentViewedDateObj.getFullYear(),
			userMonth = userDateObj.getMonth(),
			numberOfDaysInMonth = this.getNumber(currentViewedMonth, currentViewedYear),
			format = this.getData('ltPropFormat'),
			resultDate, resultDateObj, resultDateString;

		resultDate = userDate > numberOfDaysInMonth ? numberOfDaysInMonth : userDate;
		resultDateObj = new Date(currentViewedMonth + 1 + '/' + resultDate + '/' + currentViewedYear);
		resultDateString = this.getDateFromFormat(resultDateObj, format);

		return this.getCell( resultDateString );
	}

    activateCell(cell) {

		if (!cell) {
			return;
		}

		var previousCell = this.$node.querySelector('.lyteCalNavCell');

		if (previousCell) {
			previousCell.classList.remove('lyteCalNavCell');
			previousCell.setAttribute('tabindex', '-1');
		}

		cell.setAttribute('tabindex', '0');
		cell.focus();
		cell.classList.add( 'lyteCalNavCell' );
		
		this.setData( 'previousActiveCellDate', cell.getAttribute( 'data-date' ) );
	}

    getActiveCell() {
		return this.$node.querySelector( '.lyteCalNavCell' );
	}

    getActiveRow() {
		var par =  this.$node.querySelector( '.lyteCalToday' ); //gives undefined !?
		return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( par ).closest('lyteCalTableRow')[0];
	}

    removeOutOfRangeOption() {
		var years = this.getData( 'years' ),
		index;

		if( !isNaN( this.addedOption ) ) {
			index = years.indexOf( this.addedOption );

			if( !!~index ) {
				this.$addon.arrayUtils( years, 'removeAt', index );
				this.addedOption = null;
			}
		}
	}

    outOfRange(val) {
		if( val < 1900 || val > 2100 ) {
			return true;
		}

		return false;
	}

    addOutOfRangeOption(val) {
		var years = this.getData( 'years' );

		this.addedOption = val;

		if( val < 1900 ) {
			this.$addon.arrayUtils( years, 'insertAt', 0, val );
		}
		else if( val > 2100 ) {
			this.$addon.arrayUtils( years, 'push', val );
		}
	}

    getMonthHeader() {
		var format = this.getData( 'ltPropMonthHeaderFormat' ), 
		lmd = /MMMM YYYY/ig,
		ld = /MMM YYYY/ig,
		retval = "", monthArray;

		if( lmd.test( format ) ) {
			monthArray = this.getData( 'monthNames' )
			retval = window._lyteUiUtils.i18n( monthArray[ this.getData( 'viewDate' ).getMonth() ] ) + " " + this.getData( 'viewDate' ).getFullYear();
		}
		else if( ld.test( format ) ) {
			monthArray = this.getData( 'shortHands' )
			retval = window._lyteUiUtils.i18n( monthArray[ this.getData( 'viewDate' ).getMonth() ] ) + " " + this.getData( 'viewDate' ).getFullYear();
		}

		return retval;
	}

    revert(event) {
		var from = new Date( this.getData( 'viewDate' ).getTime() ), 
		curDate = this.toDate();


		curDate.setDate(1);

		var to = new Date(curDate.getTime());

		this.setData( 'viewDate', curDate );
		this.setAndBuildView( 'dateView', event );
		if( !this.getData('ltPropAlwaysShowToday') ){
			this.setData('showToday',false);
		}
		if( this.getMethods( 'onNavigate' ) 
			&& ( from.getMonth() !== to.getMonth() 
			|| from.getFullYear() !== to.getFullYear() ) 
		) {
			this.executeMethod('onNavigate', event, this.getDateFromFormat(from, this.getData('ltPropFormat')), this.getDateFromFormat(to, this.getData('ltPropFormat')), this);
		}
	}

    revertToMonth(event) {
		var from = new Date( this.getData( 'viewDate' ).getTime() ), 
		curDate = this.toDate();


		curDate.setDate(1);

		var to = new Date( curDate.getTime() );

		this.setData( 'viewDate', curDate );
		this.setAndBuildView( 'monthView', event );
		if( !this.getData('ltPropAlwaysShowToday') ){
			this.setData('showToday',false);
		}
		if( this.getMethods( 'onNavigate' ) 
			&& ( from.getMonth() !== to.getMonth() 
			|| from.getFullYear() !== to.getFullYear() ) 
		) {
			this.executeMethod( 'onNavigate', event, this.getDateFromFormat( from, this.getData( 'ltPropFormat' ) ), this.getDateFromFormat( to, this.getData( 'ltPropFormat' ) ) ,this );
		}
	}

    revertToYear( event ) {
		var from = new Date( this.getData( 'viewDate' ).getTime() ), 
		curDate = this.toDate();


		curDate.setDate(1);

		var to = new Date( curDate.getTime() );

		this.setData( 'viewDate', curDate );
		this.setAndBuildView( 'decadeView', event );
		if( !this.getData('ltPropAlwaysShowToday') ){
			this.setData('showToday',false);
		}

		var fromDecade = (from.getFullYear()+'').slice(0,3);
		var toDecade = (to.getFullYear()+'').slice(0,3);

		if( this.getMethods( 'onNavigate' ) 
			&& (  fromDecade !== toDecade ) 
		) {
			this.executeMethod( 'onNavigate', event, this.getDateFromFormat( from, this.getData( 'ltPropFormat' ) ), this.getDateFromFormat( to, this.getData( 'ltPropFormat' ) ) ,this );
		}
	}

    getDateFromFormat(dateObj, format) {
		if( this.isMomentSupported ) {
			return this.getDateStringFromMoment( dateObj, format );
		}
		else {
			return this.getDateStringManually(dateObj, format);
		}
	}

    getDateStringFromMoment(dateObj, format) {
		format = this.getRelevantFormat( format );

		return this.moment( dateObj ).format( format );
	}

    resolveConflicts(format) {
		var match = /(\bd\b|\bdd\b|\bddd\b|\bdddd\b)/.exec( format ),
		index = ( match || {} ).index,
		matchLength = ( match || [] )[ 0 ].length || 0;

		if (!isNaN(index)) {
			return format.substring(0, index + matchLength) + (format.substring(index + matchLength) || '').toUpperCase();
		}

		return format.toUpperCase();
	}

    isConflictingFormat(format) {
		var rdate = /(\bd\b|\bdd\b|\bddd\b|\bdddd\b)/ig,
			match = format.match(rdate) || [];

		return match.length > 1;
	}

    getRelevantFormat(format) {

		if (this.isConflictingFormat(format)) {
			return this.resolveConflicts(format);
		}

		return format.toUpperCase();
	}

    getDateStringManually(dateObj, format) {
		var date = dateObj.getDate(), year = dateObj.getFullYear(), month = dateObj.getMonth() + 1, monthArray,
			sd = /(MM).+(DD).+(YYYY)/ig,
			dmy = /(DD).+(MM).+(YYYY)/ig,
			ld = /(MMM|DD|YYYY).+(MMM|DD|YYYY).+(YYYY|MMM|DD)/ig,
			lmd = /(MMMM|DD|YYYY).+(MMMM|DD|YYYY).+(YYYY|MMMM|DD)/ig,
			iso = /(YYYY).+(MM).+(DD)/ig;

		format = format.toUpperCase();

		if (month < 10) {
			month = '0' + month
		}

		if (date < 10) {
			date = '0' + date
		}

		if (lmd.test(format)) {
			monthArray = [
				'January',
				'February',
				'March',
				'April',
				'May',
				'June',
				'July',
				'August',
				'September',
				'October',
				'November',
				'December'
			]
			format = format.replace('MMMM', monthArray[month - 1]);
			format = format.replace('DD', date);
			format = format.replace('YYYY', year);
		}
		else if (ld.test(format)) {
			monthArray = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
			format = format.replace('MMM', monthArray[month - 1]);
			format = format.replace('DD', date);
			format = format.replace('YYYY', year);
		}
		else if (iso.test(format)) {
			format = format.replace('MM', month);
			format = format.replace('DD', date);
			format = format.replace('YYYY', year);
		}
		else if (sd.test(format)) {
			format = format.replace('MM', month);
			format = format.replace('DD', date);
			format = format.replace('YYYY', year);
		}
		else if (dmy.test(format)) {
			format = format.replace('MM', month);
			format = format.replace('DD', date);
			format = format.replace('YYYY', year);
		}

		return format
	}

    isLeapYear(year) {
		return ( ( year % 4 == 0 ) && ( year % 100 != 0 ) ) || ( year % 400 == 0 );
	}

    getNumber(month, year) {
		var daysinmonths = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
		if( this.isLeapYear.call( this, year ) && month == 1 ) {
			return 29;
		}
		else {
			return daysinmonths[month];
		}
	}

    showtoday() {
		var curDate = this.toDate();

		if (curDate.getMonth() != this.getData('viewDate').getMonth() || curDate.getYear() != this.getData('viewDate').getYear()) {
			this.setData('showToday', true);
		}
		else {
			this.setData('showToday', false);
		}

		if( this.getData('ltPropAlwaysShowToday') ){
			this.setData( 'showToday', true);
		}

	}

    reset(cur) {
		cur.setHours( 0 );
		cur.setMinutes( 0 );
		cur.setSeconds( 0 );
		cur.setMilliseconds( 0 );
	}

    isInRange(current, start, end) {
		var startDate, endDate;

		this.reset(current);

		if (start === '' && end === '') {
			return true;
		}
		else if (start !== '' && end === '') {
			startDate = this.stringToDate(start, this.getData('ltPropFormat'));
			this.reset(startDate);

			if (current >= startDate) {
				return true;
			}
		}
		else if (start !== '' && end !== '') {
			startDate = this.stringToDate(start, this.getData('ltPropFormat'));
			this.reset(startDate);

			endDate = this.stringToDate(end, this.getData('ltPropFormat'));
			this.reset(endDate);

			if (current >= startDate && current <= endDate) {
				return true;
			}
		}
		else {
			endDate = this.stringToDate(end, this.getData('ltPropFormat'));
			this.reset(endDate);

			if (current <= endDate) {
				return true;
			}
		}

		return false;
	}

    checkDate(current) {
		var start = this.getData( 'ltPropMinDate' ) || '', 
		end = this.getData( 'ltPropMaxDate' ) || '';

		return this.isInRange( current, start, end );
	}

    getNumberOfFirstRowDates(firstday) {
		var startDayOfMonth = this.getData( 'ltPropStartWeekDay' ), 
		firstRowDays;

		if( firstday == 0 ) {
			firstRowDays = startDayOfMonth === 0 ? 7 : startDayOfMonth;
		}
		else {
			if (firstday < startDayOfMonth) {
				firstRowDays = startDayOfMonth - firstday;
			}
			else {
				firstRowDays = 7 - (firstday - startDayOfMonth);
			}
		}

		return firstRowDays;

	}

    getNumberToSubtract(firstday) {
		var numberToSubtract, startDayOfMonth = this.getData( 'ltPropStartWeekDay' );

		if (firstday == 0) {
			numberToSubtract = startDayOfMonth == 0 ? 0 : 7 - startDayOfMonth;
		}
		else {
			if (firstday < startDayOfMonth) {
				numberToSubtract = 7 - (startDayOfMonth - firstday);
			}
			else {
				numberToSubtract = firstday - startDayOfMonth;
			}
		}

		return numberToSubtract;
	}

    getFirstDay(cur) {
		var date = cur.getDate(), day = cur.getDay(), first;

		first = date - Math.floor(date / 7) * 7 - 1;
		first = day - first;

		if (first < 0) {
			first = 7 - first;
		}

		return first;
	}

    getRemainingDays(numberOfDaysInMonth, firstRowDays) {
		var rem = numberOfDaysInMonth - firstRowDays;
		rem = rem - 28;

		return rem;
	}

    inc(rem, num) {
		var preventAddingRows = this.getData( 'ltPropPreventAddingRows' );

		if (preventAddingRows) {
			return num;
		}

		if (rem > 0 && num == 6) {
			return 7;
		}

		return num;
	}

    getFirstDateOfDateView() {
		var cur = this.getData( 'viewDate' ), 
		firstday =  this.getFirstDay( cur ),
		month = cur.getMonth(), year = cur.getFullYear(),
		calStartDate = new Date( month + 1 + '/1/' + year ),
		numberToSubtract = this.getNumberToSubtract( firstday );

		calStartDate.setDate( calStartDate.getDate() - numberToSubtract );

		return calStartDate;
	}

    getNumberOfRowsToDisplay() {
		var numberOfRows = this.getData( 'ltPropNumberOfRows' ),
		cur = this.getData( 'viewDate' ),
		firstday = this.getFirstDay( cur ), 
		numberOfDaysInMonth = this.getNumber( cur.getMonth(), cur.getFullYear() ),
		firstRowDays = this.getNumberOfFirstRowDates( firstday ),
		rem = this.getRemainingDays( numberOfDaysInMonth, firstRowDays );

		return this.inc( rem, numberOfRows );
	}

    setDatesFunction() {
		var fillRows = this.getData( 'ltPropFillRows' ), 
		reachedNextMonth = false,
		cur = this.getData( 'viewDate' ),
		month = cur.getMonth(), 
		result = [], numberOfRows;

		var weekNumber = this.getCurrentWeekNumber( cur );
		var weekNumArr = [];

		numberOfRows = this.getNumberOfRowsToDisplay();

		var calStartDate = this.getFirstDateOfDateView();
		
		// Construct array
		for (var i = 0; i < numberOfRows; i++) {

			// This is to ensure that we don't create an empty row when we reach the next month when fillRows is false.
			if (reachedNextMonth) {
				break;
			}

			var weekStartDate = this.cloneDateObj( calStartDate );

			result.push( [] );

			for( var j = 0; j < 7; j++ ) {
				if( 
					( !fillRows && month !== calStartDate.getMonth() )
					|| ( fillRows && this.isYYFormat() && this.outsideBoundary( calStartDate ) && !this.isIso ) 
				) {
					result[ i ].push( { emptyBlock: true } );

					if (i != 0) {
						reachedNextMonth = true;
					}

				}
				else {
					result[ i ].push( this.createDateCell( calStartDate, this.getCellClass( calStartDate ) ) );
				}

				calStartDate.setDate( calStartDate.getDate() + 1 );
			}

			var nextWeekStartDate = this.cloneDateObj( calStartDate );
			weekNumArr.push( this.createWeekCell( weekStartDate, nextWeekStartDate, weekNumber ) );
			weekNumber++;
		}

		this.setData( 'matrix', result );
		this.setData( 'weeknum', weekNumArr );

		if (this.shouldActivateCell()) {
			this.activateRelevantCell();
		}
	}

    createWeekCell(weekStartDate, nextWeekStartDate, weekNumber) {
		return { class: this.getWeekClass( weekStartDate, nextWeekStartDate ), val: weekNumber }
	}

    cloneDateObj(date) {
		return new Date( date );
	}

    getWeekClass(weekStartDate, nextWeekStartDate) {
		var weekNumClass = 'lyteWeekNumberGrid',
		cur = this.getData( 'viewDate' ),
		weekEndDate = nextWeekStartDate.setDate( nextWeekStartDate.getDate() - 1 ),
		todayDate = this.__ignoremin ? cur : this.toDate();

		if( this.isInRange( todayDate, weekStartDate, weekEndDate ) ) {
			weekNumClass += ' lyteCalCurWeekNum';
		}

		return weekNumClass;
	}

    isPresentInViewingMonth(currentProcessedDate) {
		var viewingMonth = this.getData( 'viewDate' ).getMonth(),
		currentProcessedMonth = currentProcessedDate.getMonth();

		return viewingMonth === currentProcessedMonth
	}

    isRangeGiven() {
		return ( this.getData( 'ltPropMinDate' ) || "" ) !== "" || ( this.getData( 'ltPropMaxDate' ) || "" ) !== "";
	}

    getCellClass(currentProcessedDate) {
		var clsname = 'lyteCalCdate', 
		isRangeGiven = this.isRangeGiven(),
		isInRange = this.checkDate( currentProcessedDate ),
		disabledDates = this.getDisabledDates(),
		isDisabled = this.isDisabled( currentProcessedDate, disabledDates ),
		selectionType = this.getData( 'ltPropSelectionType' ) || 'day',
		curSelectedDate = this.getSelectedDateObj(),
		cur = this.getData( 'viewDate' ), 
		todayDate = this.__ignoremin ? cur : this.toDate();

		if( !this.isPresentInViewingMonth( currentProcessedDate ) ) {
			clsname += ' lyteCalDiffMonth';

			if( !isRangeGiven ) {
				clsname += ' lyteCalGray';
			}

			// Out of range in different month
			else if( !isInRange ) {
				clsname += ' lyteCalDisabled';
			}		
		}

		// Out of range in same month
		else if( isRangeGiven 
			&& !isInRange ) {
			clsname += ' lyteCalDisabled';
		}

		if( isDisabled ) {
			clsname += ' lyteCalendarDisabledDate';
		}

		// select-date might be some internal property used somewhere
		if( selectionType === 'day' && this.isSelectedDate( currentProcessedDate, curSelectedDate ) && this.getData( 'selectDate' ) ) {
			clsname += ' lyteCalSel';
		}

		if( selectionType === 'week' ) {
			clsname += ' ' + this.getWeekSelectedClass( currentProcessedDate );
		}

		if( 
			todayDate.getMonth() === currentProcessedDate.getMonth() 
			&& todayDate.getDate() === currentProcessedDate.getDate() 
			&& todayDate.getYear() === currentProcessedDate.getYear() ) {

			clsname += ' lyteCalToday';
		}
		
		clsname += this.addWeekEndClass( currentProcessedDate, isDisabled );
		clsname += this.addHolidayClass( currentProcessedDate, isDisabled );
		clsname += ' lyteCalTableCell';

		return clsname;
	}

    addWeekEndClass(currentProcessedDate, isDisabled) {
		var clsname = '';
		var holidayDates = this.getHolidayDates();

		if( this.isWeekend( currentProcessedDate ) ) {
			clsname += ' lyteCalWeekend';	//only weekend

			/* ltPropDisableWeekends property should disable all weekends whether they are present in lt-prop-disabled-dates or not*/
			if( this.getData('ltPropDisableWeekends') && !isDisabled ){
				clsname += ' lyteCalendarDisabledDate'; 
			}

			if( this.getData('ltPropHighlightWeekendHolidays') && this.isHoliday( currentProcessedDate, holidayDates ) ){
				clsname += ' lyteCalWeekendHoliday'; 	//weekend and holiday 
			}
		}

		return clsname;
	}

    addHolidayClass(currentProcessedDate, isDisabled) {
		var clsname = '';
		var holidayDates = this.getHolidayDates();

		if( this.isHoliday( currentProcessedDate, holidayDates ) ) {
			clsname += ' lyteCalHoliday';

			/* ltPropDisableHolidays property should disable all holidays whether they are present in lt-prop-disabled-dates or not*/
			if( this.getData('ltPropDisableHolidays') && !isDisabled ){
				clsname += ' lyteCalendarDisabledDate';
			}
		}

		return clsname;
	}

    createDateCell(calStartDate, clsname) {
		var obj = {},
		format = this.getData( 'ltPropFormat' );

		obj.date = calStartDate.getDate();
		obj.id = this.generateRandomId();
		obj.clsname = clsname;
		obj.val = this.getDateFromFormat( calStartDate, format );

		return obj;
	}

    isSelectedDate(date, selectedDate) {
		var isMultiple = this.getData( 'ltPropMultiple' );

		if (isMultiple) {
			return this.isDateInArray(selectedDate, date);
		}
		else {
			return selectedDate !== 'nodate' && selectedDate !== 'Invalid Date' && this.isSameDate(date, selectedDate);
		}
		
	}

    isDateInArray(dateArr, date) {
		dateArr = dateArr || [];

		for (var i = 0; i < dateArr.length; i++) {
			if (this.isSameDate(date, dateArr[i])) {
				return true;
			}
		}
	}

    isSameDate(obj1, obj2) {
		return obj1.getYear() == obj2.getYear()
			&& obj1.getMonth() == obj2.getMonth()
			&& obj1.getDate() == obj2.getDate();
	}

    getSelectedDateObj() {
		var isMultiple = this.getData( 'ltPropMultiple' ),
		selectedDates = this.getData( 'ltPropCurrentDates' ),
		that = this,
		dateObj;

		if (isMultiple) {
			return this.getDObjArrayFromStrings(selectedDates);
		}
		else {
			if (this.isIso) {
				dateObj = this.isoToDate(this.getData('ltPropIso'));
			} else {
				dateObj = this.getData('ltPropCurrentDate') ? this.stringToDate(this.getData('ltPropCurrentDate'), this.getData('ltPropFormat')) : 'nodate';
			}

			return dateObj;
		}

	}

    getDObjArrayFromStrings(dates) {
		var that = this;

		dates = dates || [];

		return dates.map( function( date ) { 
			return that.stringToDate( date, that.getData( 'ltPropFormat' ) );
		} );
	}

    getDisabledDates() {
		var disabledDates = this.getData( 'ltPropDisabledDates' );

		return this.getDObjArrayFromStrings( disabledDates );
	}

    isDisabled(date, disabledDates) {
		return this.isDateInArray( disabledDates, date );
	}

    getWeekSelectedClass(currentDate) {
		var selectedWeek = this.getData( 'ltPropCurrentWeek' ) || [],
		weekStart = selectedWeek[ 0 ] || '',
		weekEnd = selectedWeek[ 1 ] || '',
		format = this.getData( 'ltPropFormat' );

		weekStart = this.stringToDate(weekStart, format);
		weekEnd = this.stringToDate(weekEnd, format);

		if (weekStart === 'Invalid Date' || weekEnd === 'InvalidDate' || currentDate < weekStart || currentDate > weekEnd) {
			return ''
		}
		else {
			return 'lyteCalWeekSel';
		}
	}

    isWeekend(date) {
		var day = date.getDay(),
			weekends = this.getData('ltPropWeekends') || [];

		return !!~weekends.indexOf( day );
	}

    getHolidayDates() {
		var holidayDates = this.getData( 'ltPropHolidays' );

		return this.getDObjArrayFromStrings( holidayDates );
	}

    isHoliday(date, holidayDates) {
		return this.isDateInArray( holidayDates, date );
	}

    shouldActivateCell() {
		var disableNavigation = this.getData( 'ltPropDisableNavigation' ),
		/* input can set the lt-prop-current-date - so don't activate during observer changes because input might lose focus */
		isObserverCall = this.isFromCurrentDateObserver,

			/* don't focus when previous/next buttons are pressed */
			navigationButtonPressed = this.navigationButtonPressed;

		this.isFromCurrentDateObserver = false;

		this.navigationButtonPressed = false;

		return !disableNavigation && !isObserverCall && !navigationButtonPressed;
	}

    /** 
	 * get proper month from user defined value
	 * @param {String} mon - The current month
	 *
	 */

    getProperMonth(val) {
		var sm = {
			'jan': 1,
			'feb': 2,
			'mar': 3,
			'apr': 4,
			'may': 5,
			'jun': 6,
			'jul': 7,
			'aug': 8,
			'sep': 9,
			'oct': 10,
			'nov': 11,
			'dec': 12
		}, lg = {
			'january': 1,
			'february': 2,
			'march': 3,
			'april': 4,
			'may': 5,
			'june': 6,
			'july': 7,
			'august': 8,
			'september': 9,
			'october': 10,
			'november': 11,
			'december': 12
		}, ret

		val = val.toLowerCase();
		ret = sm[val] || lg[val];

		if (!ret && ret !== 0) {
			return parseFloat(val) - 1;
		}

		return ret-1;
	}

    /**
	 * Checks if the date is a proper date for the corresponding month and year
	 * @param {Number} year - The year of the date object
	 * @param {Number} month - The month of the date object
	 * @param {Number} date - The date value of the date object
	 *
	 */

    isProperDate(year, month, date) {
		var daysInMonth = this.getNumber( month, year );

		if (date <= daysInMonth) {
			return true;
		}

		return false;
	}

    /**
	 * Return the date object for the given string and format
	 * @param {String} dateString - The current date in the form of a string
	 * @param {String} format - The format of the dateString
	 *
	 */

    getDateObjFromString(dateString, format) {
		try {
			var vals = dateString.match(/([\da-z]+)/ig), year, month,
				format = format.toUpperCase(),
				sep = format.match(/([a-z]+)/ig),
				date = this.toDate(), i = 0, order = ['Y', 'M', 'D'];
			date.setDate(1);  //initialize the day to be 1 to avoid error for eg: 30 Feb if passed will generate 1 Mar as result.

			if (vals.length !== 3) {
				return 'Invalid Date';
			}

			while (i < sep.length) {
				var ind = this.getOrderIndex(sep, order[i]);

				if (i == 0) {
					date.setFullYear(year = vals[ind]);
				}
				else if (i == 1) {
					month = this.getProperMonth(vals[ind]);

					if (month < 0 || month > 11) {
						return 'Invalid Date';
					}

					date.setMonth(month);
				}
				else if (i == 2) {
					if (!this.isProperDate(year, month, vals[ind])) {
						return 'Invalid Date';
					}

					date.setDate(vals[ind]);
				}

				if (date.toString() === 'Invalid Date') {
					return date.toString();
				}

				i++;
			}

			return date;
		}
		catch (e) {
			return 'Invalid Date';
		}
	}

    getDateObjFromMoment(dateString, format) {
		var momentObj, ret;

		format = this.getRelevantFormat(format);

		if (!dateString) {
			return 'Invalid Date';
		}

		try {
			momentObj = this.moment(dateString, format);
			ret = momentObj.getDObj();
		}
		catch (e) {
			ret = 'Invalid Date';
		}

		if (Object.prototype.toString.call(ret) === '[object Date]') {
			if (isNaN(ret.getTime())) {
				ret = 'Invalid Date';
			}
		}

		return ret || 'Invalid Date';
	}

    /**
	 * Convert the string to date object based on the format
	 * @param {String} cur - The current date of the user passed
	 * @param {String} format - The format of the dates
	 *
	 */

    stringToDate(cur, format) {
		var ret;

		cur = this.convertToEnglish(cur);

		if (this.isMomentSupported) {
			ret = this.getDateObjFromMoment(cur, format);
		}
		else {
			ret = this.getDateObjFromString(cur, format);
		}

		return ret;
	}

    findISO() {
		this.isIso = this.getData('ltPropIso') ? true : false;
	}

    isoToDate(cur) {
		var ret = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(cur).getDObj();
		this.data.ltPropCurrentDate = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(ret).format(this.getData('ltPropFormat'));
		return ret;
	}

    convertToEnglish(cur) {
		var i18n = this.getData( 'ltPropI18n' ),
		format = this.getData( 'ltPropFormat' );

		if (i18n) {
			return this.moment(cur, format, { i18n: true }).format(format);
		}

		return cur;
	}

    getEnglishShorthand(cur) {
		var months = this.getShortHands(), proper = -1, max = 0,
			shortHands = this.getData('shortHands');

		for (var i = 0; i < months.length; i++) {
			if (!!~cur.indexOf(months[i]) && months[i].length > max) {
				proper = i;
				max = months[i].length;
			}
		}

		if (proper !== -1) {
			cur = cur.replace(months[proper], this.getProperShortHand(shortHands[proper]));
		}

		return cur;
	}

    getShortHands() {
		var shortHands = this.getData( 'shortHands' ), res = [];

		for( var i = 0; i < shortHands.length; i++ ) {
			res.push( window._lyteUiUtils.i18n( shortHands[ i ] ) );
		}

		return res;
	}

    getProperShortHand(val) {
		if( val === 'short.may' ) {
			return 'May';
		}

		return val;
	}

    getEnglishStandard(cur) {
		var months = this.getStandardMonths(), englishMonths = this.getData( 'monthNames' ),
		proper = -1, max = 0;

		for (var i = 0; i < months.length; i++) {
			if (!!~cur.indexOf(months[i]) && months[i].length > max) {
				proper = i;
				max = months[i].length;
			}
		}

		if (proper !== -1) {
			cur = cur.replace(months[proper], englishMonths[proper]);
		}

		return cur;
	}

    getStandardMonths() {
		var monthNames = this.getData( 'monthNames' ), res = [];

		for( var i = 0; i < monthNames.length; i++ ) {
			res.push( window._lyteUiUtils.i18n( monthNames[ i ] ) );
		}

		return res;
	}

    getOrderIndex(objArr, match) {
		for(var i = 0; i < objArr.length; i++){
			if(objArr[i].charAt(0) === match){
				return i;
			}
		}
		return -1;
	}

    buildYears() {
		/*var yearBounds = this.buildMinAndMaxYear(),*/
		var maxYear = 2100,
			minYear = 1900, i, years = [];

		for (i = minYear; i <= maxYear; i++) {
			years.push(i.toString());
		}
		// if(this.isIso){
		// 	years.push( $L.moment(this.getData('ltPropIso')).get('fullYear') )
		// }
		this.setData( 'years', years );
	}

    /*buildMinAndMaxYear: function() {
			
		var currentDate = this.toDate();
		var isYYFormat = this.isYYFormat(),
		currentYear = currentDate.getFullYear(),
		dateBounds = this.isMomentSupported ? $L.moment() : { uL: 19, lL: 80 },
		valueToAdd = dateBounds.uL,
		valueToRemove = dateBounds.lL;

		return {
			maxYear: isYYFormat ? currentYear + valueToAdd : 2100,
			minYear: isYYFormat ? currentYear - valueToRemove : 1900
		};

	},*/

    setAndBuildView(viewType, event, preventCallback) {
		var oldView = this.getData( 'viewType' ),
		newView = viewType;

		this.setData('viewType', viewType);

		if (viewType === 'monthView') {
			this.buildMonthView();
		}
		else if (viewType === 'decadeView') {
			this.buildDecadeView();
			this.setData('showToday', false);
		}
		else if (viewType === 'dateView') {
			this.buildDateView();
		}

		if( this.getData('ltPropAlwaysShowToday') ){
			this.setData( 'showToday', true );
		}
		// pressing the today button should not fire the viewChange when it is in the dateview
		if (!preventCallback && (oldView !== newView)) {
			if (this.getMethods('onViewChange')) {
				this.executeMethod('onViewChange', event, viewType, this);
			}
		}
		
	}

    buildDateView() {
		this.buildDateViewHeader();
		this.buildDateViewContent();
		this.showtoday();
	}

    buildDateViewHeader() {		
		var viewDate = this.getData( 'viewDate' );
		var year = viewDate.getFullYear();
		var month = viewDate.getMonth();
		var currentYear = viewDate.getFullYear();
		var numberOfYearsFromDecadeStart = currentYear % 10;
		var decadeStart = currentYear - numberOfYearsFromDecadeStart;
		var decadeEnd = decadeStart + 9;

		this.setData( 'monthHeader', this.getMonthHeader() );
		this.setData( 'ltPropCurrentDisplayMonth', month );
		this.setData( 'ltPropCurrentDisplayYear', year );
		this.setData('ltPropCurrentDisplayDecade',decadeStart + '-' + decadeEnd);

	}

    buildDateViewContent() {
		this.setDatesFunction();
	}

    buildMonthView() {
		this.buildMonthViewHeader();
		this.buildMonthViewContent();
		this.showtoday();
		this.activateCell( this.getActiveCell() );
	}

    buildMonthViewHeader() {
		var viewDate = this.getData( 'viewDate' );
		var year = viewDate.getFullYear();
		var currentYear = viewDate.getFullYear();
		var numberOfYearsFromDecadeStart = currentYear % 10;
		var decadeStart = currentYear - numberOfYearsFromDecadeStart;
		var decadeEnd = decadeStart + 9;

		this.setData( 'currentYear', year );
		this.setData( 'ltPropCurrentDisplayYear', year );
		this.setData('ltPropCurrentDisplayDecade',decadeStart + '-' + decadeEnd);

	}

    buildMonthViewContent() {
		var systemValues = this.getData( 'monthSystemValues' ),
		displayValue = this.getData( 'shortHands' ),
		rowCount = 3, columnCount = 4,
		rowIterator = 0, columnIterator,
		result = [], indexOfMonth;

		for (; rowIterator < rowCount; rowIterator++) {
			result.push([]);

			for (columnIterator = 0; columnIterator < columnCount; columnIterator++) {
				indexOfMonth = (rowIterator * columnCount) + columnIterator;

				result[rowIterator].push(
					{
						displayValue: window._lyteUiUtils.i18n( displayValue[ indexOfMonth ] ),
						systemValue: systemValues[ indexOfMonth ],
						class: this.getProperClassForMonthView( indexOfMonth )
					} 
				);
			}
		}

		this.setData( 'monthViewData', result );
	}

    getProperClassForMonthView(month) {
		var viewDate = this.getData( 'viewDate' ),
		viewYear = viewDate.getFullYear(),
		todayMonth = this.getCurrentMonth(),
		todayYear = this.getCurrentYear(),
		format = this.getData( 'ltPropFormat' ),
		curDate = this.stringToDate( this.getData( 'ltPropCurrentDate' ), format ),
		previousActiveDate = this.getData( 'previousActiveCellDate' ) || '',
		previousActiveMonth = this.getData( 'monthSystemValues' ).indexOf( previousActiveDate ),
		ret = 'lyteCalTableCell', curMonth, selectedMonth = this.getData( 'ltPropCurrentMonth' );

		ret += todayYear === viewYear && month === todayMonth ? ' lyteDrillCalCurrentMonth' : '';

		if (previousActiveMonth !== -1) {
			ret += month === previousActiveMonth ? ' lyteCalNavCell' : '';
		}
		else if (curDate !== 'Invalid Date') {
			curMonth = curDate.getMonth();
			ret += month === curMonth ? ' lyteCalNavCell' : '';
		}
		else {
			ret += month === todayMonth ? ' lyteCalNavCell' : '';
		}

		if (selectedMonth === (month + 1).toString()) {
			ret += ' lyteCalMonthSel';
		}


		return ret;
	}

    getCurrentYear() {
		var date = this.toDate();

		return date.getFullYear();
	}

    getCurrentMonth() {
		var date = this.toDate();

		return date.getMonth();
	}

    buildDecadeView() {
		this.buildDecadeViewHeader();
		this.buildDecadeViewContent();
		this.activateCell( this.getActiveCell() );
	}

    buildDecadeViewHeader() {
		var viewDate = this.getData( 'viewDate' ),
		currentYear = viewDate.getFullYear(),
		numberOfYearsFromDecadeStart = currentYear % 10,
		decadeStart = currentYear - numberOfYearsFromDecadeStart,
		decadeEnd = decadeStart + 9;

		this.setData( 'decadeStart', decadeStart );
		this.setData( 'decadeEnd', decadeEnd );
		this.setData('ltPropCurrentDisplayDecade',decadeStart + '-' + decadeEnd);
	}

    buildDecadeViewContent() {
		var viewDate = this.getData( 'viewDate' ),
		currentYear = viewDate.getFullYear(),
		numberOfYearsFromDecadeStart = currentYear % 10,
		decadeStart = currentYear - numberOfYearsFromDecadeStart,
		yearBounds = {minYear:1900 , maxYear:2100},	
		isYYFormat = this.isYYFormat(),
		minYear = yearBounds.minYear, maxYear = yearBounds.maxYear,	
		rows = 3, columns = 4, i, j, result = [], year;

		for( i = 0; i < rows; i++ ) {
			result.push( [] );

			for (j = 0; j < columns; j++) {

				year = (decadeStart + i * 4 + j) - 1;

				if (isYYFormat) {
					result[i].push(
						(year > maxYear || year < minYear) ? this.emptyCell() : this.currentYearCell(year, decadeStart)
					);
				}
				else {
					result[i].push(this.currentYearCell(year, decadeStart));
				}

			}
		}

		this.setActiveDecadeCell(result);

		this.setData( 'decadeViewData', result );
	}

    emptyCell() {
		return {
			emptyBlock: true
		};
	}

    currentYearCell(year, decadeStart) {
		var decadeEnd = decadeStart + 9,
			classVal = [], todayYear = this.getCurrentYear(),
			selectedYear = this.getData('ltPropCurrentYear');

		if (year < decadeStart || year > decadeEnd) {
			classVal.push('lyteCalOtherDecadeCell');
		}

		if (todayYear === year) {
			classVal.push('lyteDrillCalCurrentYear');
		}

		if (selectedYear === year.toString()) {
			classVal.push('lyteCalYearSel')
		}

		return {
			year: year,
			emptyBlock: false,
			class: classVal.join(' ')
		}
	}

    setActiveDecadeCell(result) {
		var currentDate = this.getData( 'ltPropCurrentDate' ),
		format = this.getData( 'ltPropFormat' ),
		currentDateObj = this.stringToDate( currentDate, format ),
		previousActiveDate = this.getData( 'previousActiveCellDate' ),
		todayYear = this.getCurrentYear(),
		yearToUse = !isNaN( previousActiveDate ) ? +previousActiveDate : ( currentDateObj !== 'Invalid Date' ? currentDateObj.getFullYear() : todayYear ),
		firstCell = result[ 0 ][ 0 ], firstRenderedYear = firstCell.year, lastCell = result[ result.length - 1 ][ result[ result.length - 1 ].length - 1 ], lastRenderedYear = lastCell.year, activeCellIndex;

		if (yearToUse >= firstRenderedYear && yearToUse <= lastRenderedYear) {
			result[Math.floor((yearToUse - firstRenderedYear) / 4)][(yearToUse - firstRenderedYear) % 4].class += ' lyteCalNavCell';
		}
		else {
			if (yearToUse % 10 === 9) {
				activeCellIndex = Math.abs(yearToUse - firstRenderedYear) < Math.abs(yearToUse - lastRenderedYear) ? 0 : 10;
			}
			else if (yearToUse % 10 === 0) {
				activeCellIndex = Math.abs(yearToUse - firstRenderedYear) < Math.abs(yearToUse - lastRenderedYear) ? 1 : 11;
			}
			else {
				activeCellIndex = (yearToUse % 10) + 1;
			}


			result[Math.floor(activeCellIndex / 4)][activeCellIndex % 4].class += ' lyteCalNavCell';
		}
	}

    buildNavigationalUI() {
		var type = this.getData( 'ltPropHeaderType' );

		if (this.isDropdownHeader()) {
			this.buildYears();
		}
	}

    init() {
		this.findISO();
	}

    setCalendarIdsForAria() {
		this.setData( 'headerId', this.generateRandomId() );
		this.setData( 'monthDropdownId', this.generateRandomId() );
		this.setData( 'yearDropdownId', this.generateRandomId() );
		this.setData( 'monthAriaObj', { 'aria-labelledby': this.getData( 'monthDropdownId' ) } );
		this.setData( 'yearAriaObj', { 'aria-labelledby': this.getData( 'yearDropdownId' ) } );
	}

    revertToSelected() {
		var from = new Date( this.getData( 'viewDate' ).getTime() ), 
		cur = this.getData( 'ltPropCurrentDate' ),
		format = this.getData( 'ltPropFormat' ),
		curDate = cur ? this.stringToDate( cur, format ) : this.toDate(),
		today = this.toDate(), event = {};

		if( curDate === 'Invalid Date' ) {
			return ;
		}
		
		curDate.setDate(1);

		var to = new Date(curDate.getTime());

		this.setData('viewDate', curDate);
		this.setAndBuildView('dateView', event);

		if (to.getMonth() === today.getMonth() && to.getFullYear() === today.getFullYear()) {
			this.setData('showToday', false);
		}
		else {
			this.setData('showToday', true);
		}
		
		if( this.getData('ltPropAlwaysShowToday') ){
			this.setData( 'showToday',true );
		}
		if( this.getMethods( 'onNavigate' ) 
			&& ( from.getMonth() !== to.getMonth() 
			|| from.getFullYear() !== to.getFullYear() ) 
		) {
			this.executeMethod('onNavigate', event, this.getDateFromFormat(from, this.getData('ltPropFormat')), this.getDateFromFormat(to, this.getData('ltPropFormat')), this);
		}
	}

    addContainerClass() {
		var type = this.getData( 'ltPropHeaderType' ),
		classVal = [ 'lyteCalendarPopup' ];

		if (type === 'drilldown') {
			classVal.push('lyteDrillDownCalendar');
		}

		this.setData( 'containerClass', classVal.join( ' ' ) );
	}

    checkForMoment() {
		this.isMomentSupported = (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()) && (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment) ? true : false; 
		this.isHavingTimezone = this.isMomentSupported && !!_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment()._timezone;
	}

    buildViewDate() {
		if(this.isIso){
			var viewDate = this.isoToDate( this.getData('ltPropIso') );
		}else{
			var viewDate = this.determineViewDateFromUserInput();
		}

		if( viewDate === 'Invalid Date' ) {
			viewDate = this.toDate();
		}

		viewDate.setDate( 1 );
		this.setData( 'viewDate', viewDate );
	}

    determineViewDateFromUserInput() {
		var viewDate, selectionType = this.getData( 'ltPropSelectionType' ), currentWeek, startDay;

		if( selectionType === 'week' ) {
			currentWeek = this.getData( 'ltPropCurrentWeek' ) || [];

			startDay = currentWeek[ 0 ];

			viewDate = startDay ? 
						this.stringToDate( startDay, this.getData( 'ltPropFormat' ) ) 
						: this.toDate();
		}
		else {
			viewDate = this.getData( 'ltPropCurrentDate' ) ? 
						this.stringToDate( this.getData( 'ltPropCurrentDate' ), this.getData( 'ltPropFormat' ) ) 
						: this.toDate();
		}
		
		return viewDate;
	}

    initializeCalendar() {
		
		this.buildNavigationalUI();
		this.decideView();
			
	}

    decideView() {
		var selectionType = this.getData('ltPropSelectionType') || 'day';

		if (selectionType === 'day' || selectionType === 'week') {
			this.setAndBuildView('dateView', undefined, true);
		}
		else if (selectionType === 'month') {
			this.setAndBuildView('monthView', undefined, true);
		}
		else if( selectionType === 'year' ){
			this.setAndBuildView( 'decadeView', undefined, true );
		}
		else{
			this.setAndBuildView( 'dateView', undefined, true );
		}
	}

    isDrilldown() {
		var type = this.getData( 'ltPropHeaderType' );

		return type === 'drilldown';
	}

    didConnect() {

		if (!this.getData('navYield') && this.isDropdownHeader()) {
			this.setData('monthDD', this.getMonthDropdown());
			this.setData('yearDD', this.getYearDropdown());
			this.setData('callFrmDidcnct', true);
		}

		if( this.getMethods('onDateHover') || this.getMethods('onMonthHover') || this.getMethods('onYearHover') ){
			this.addListenerForHoverEvent();
		}
	}

    addListenerForHoverEvent() {
		var parDiv = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()('div.lyteCalTableRowGroup')[0];
		parDiv.addEventListener('mouseover', function( event ){
			var viewType = this.getData('viewType');
			if( event.target.classList.contains('lyteCalTableCell') ){
				var target = event.target;
				if( this.getMethods('onDateHover') && viewType === 'dateView' ){
					this.executeMethod('onDateHover', event, target.getAttribute('data-date'), this);
				}
				else if( this.getMethods('onMonthHover') && viewType === 'monthView' ){
					var currentSelectedMonth = this.getData('monthSystemValues').indexOf(target.getAttribute('data-date')) + 1;
					this.executeMethod('onMonthHover', event, currentSelectedMonth, this);
				}
				else if( this.getMethods('onYearHover') && viewType === 'decadeView' ){
					this.executeMethod('onYearHover', event, target.getAttribute('data-date'), this);
				}
			}
		}.bind(this));
	}

    isDropdownHeader() {
		var type = this.getData( 'ltPropHeaderType' );

		return type === 'picklist' || type === 'dropdown';
	}

    getYearDropdown() {
		var type = this.getData( 'ltPropHeaderType' ), 
		ret = this.$node.querySelector( '.lyteCalYearDD' );

		if (type === 'picklist') {
			ret = ret.querySelector('lyte-dropdown');
		}

		return ret;
	}

    getMonthDropdown() {
		return this.$node.querySelector( '.lyteCalMonthDD' );
	}

    isWithinAllowedYears(date) {
		var year = date.getFullYear();

		if (year >= 1900 && year <= 2100) {
			return true;
		}

		return false;
	}

    changeCurrentDate(set, val, event) {
		var inter, to, from = new Date( this.getData( 'viewDate' ).getTime() ), 
		fromDate, toDate, formattedDate, format = this.getData( 'ltPropFormat' ),
		isYYFormat = this.isYYFormat();

		if (set === 'Y') {
			inter = this.getData('viewDate');
			if (this.isIso) {
				formattedDate = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(this.getData('viewDate'));
				isYYFormat = false;
			} else {
				formattedDate = this.moment(this.getDateFromFormat(inter, format), format);
			}

			if (this.isMomentSupported) {
				if (val > 0) {
					to = this.moment(formattedDate, format).add(val, 'fullYear', isYYFormat).getDObj();
				}
				else {
					to = this.moment(formattedDate, format).add(val, 'fullYear', isYYFormat).getDObj();
				}
			}
			else {
				inter.setYear(inter.getFullYear() + val)
				to = new Date(inter.getTime())
			}

			this.setData('viewDate', to);
			this.buildDateView();
		}
		else if (set === 'M') {
			inter = this.getData('viewDate');
			if (this.isIso) {
				formattedDate = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(this.getData('viewDate'));
				isYYFormat = false;
			} else {
				formattedDate = this.moment(this.getDateFromFormat(inter, format), format);
			}
			if (this.isMomentSupported) {
				if (val > 0) {
					to = formattedDate.add(val, 'month', isYYFormat).getDObj();
				}
				else {
					to = formattedDate.add(val, 'month', isYYFormat).getDObj();
				}
			}
			else {
				inter.setMonth(inter.getMonth() + val)
				to = new Date(inter.getTime())
			}

			this.setData('viewDate', to)
			this.buildDateView();
		}

		fromDate = this.getDateFromFormat(from, this.getData('ltPropFormat'));
		toDate = this.getDateFromFormat(to, this.getData('ltPropFormat'));

		if (this.getMethods('onNavigate')) {
			this.executeMethod('onNavigate', event, fromDate, toDate, this)
		}
	}

    changeCurrentYear(val, event) {
		var viewDate = this.getData( 'viewDate' ),
		isMomentSupported = this.isMomentSupported,
		fullYear = viewDate.getFullYear(),
		format = this.getData( 'ltPropFormat' ),
		isYYFormat = this.isYYFormat(),
		formattedDate = this.getDateFromFormat( viewDate, format ),
		fromDate = formattedDate,
		toDate;
		if( isMomentSupported ) {
			format = this.getRelevantFormat( format );
			if(this.isIso){
				formattedDate = this.moment(this.getData('viewDate'));
				isYYFormat = false;
			} else {
				formattedDate = this.moment(formattedDate, format);
			}
			viewDate = formattedDate.add(val, 'fullYear', isYYFormat).getDObj();
		}
		else {
			viewDate.setFullYear(fullYear + val);
		}

		toDate = this.getDateFromFormat(viewDate, format);

		this.setData('viewDate', viewDate);

		if (this.getMethods('onNavigate')) {
			this.executeMethod('onNavigate', event, fromDate, toDate, this);
		}
	}

    changeCurrentDecade(val, event) {
		var viewDate = this.getData( 'viewDate' ),
		format = this.getData( 'ltPropFormat' ),
		isMomentSupported = this.isMomentSupported,
		formattedDate = this.getDateFromFormat( viewDate, format ),
		isYYFormat = this.isYYFormat(),
		currentYear = viewDate.getFullYear(),
		fromDate = formattedDate,
		toDate;

		format = this.getRelevantFormat(format);

		if (isMomentSupported) {
			if (this.isIso) {
				formattedDate = this.moment(this.getData('viewDate'));
				isYYFormat = false;
			} else {
				formattedDate = this.moment(formattedDate, format);
			}
			// viewDate = formattedDate.add( val, 'fullYear', isYYFormat ).getDObj();
			viewDate = formattedDate.add(val * 10, 'fullYear', isYYFormat).getDObj();
		}
		else {
			viewDate.setFullYear(currentYear + 10 * val);
		}

		toDate = this.getDateFromFormat(viewDate, format);
		this.setData('viewDate', viewDate);

		if (this.getMethods('onNavigate')) {
			this.executeMethod('onNavigate', event, fromDate, toDate, this);
		}
	}

    /** 
	 * Get the proper calendar date item that was clicked
	 * @param {Element} elem - represents the element that was clickedd
	 *
	 */
    getProper(elem) {
		while( elem 
			&& !elem.classList.contains( 'lyteCalTableCell' ) 
		) {
			elem = elem.parentElement;
		}

		return elem;
	}

    convertToLang(val) {
		var i18n = this.getData( 'ltPropI18n' ),
		format = this.getData( 'ltPropFormat' );

		if (i18n) {
			return this.moment(val, format).i18N(format);
		}

		return val;
	}

    moveToPrevious(val, event) {
		var viewType = this.getData( 'viewType' );

		if (viewType === 'dateView') {
			this.navigationButtonPressed = true;
			this.changeCurrentDate(val, -1, event);
		}
		else if (viewType === 'monthView') {
			this.changeCurrentYear(-1, event);
			this.buildMonthView();
		}
		else if (viewType === 'decadeView') {
			this.changeCurrentDecade(-1, event);
			this.buildDecadeView();
		}
	}

    moveToNext(val, event) {

		var viewType = this.getData('viewType');

		if (viewType === 'dateView') {
			this.navigationButtonPressed = true;
			this.changeCurrentDate(val, 1, event);
		}
		else if (viewType === 'monthView') {
			this.changeCurrentYear(1, event);
			this.buildMonthView();
		}
		else if (viewType === 'decadeView') {
			this.changeCurrentDecade(1, event);
			this.buildDecadeView();
		}
	}

    changeToMonthView(event) {
		this.setAndBuildView( 'monthView', event );
	}

    changeToDecadeView(event) {
		this.setAndBuildView( 'decadeView', event );
	}

    selectHighlightedCell(event) {
		var viewType = this.getData( 'viewType' ),
		headerType = this.getData( 'ltPropHeaderType' );

		if (headerType !== 'drilldown' || viewType === 'dateView') {
			this.makeSelection(event);
		}
		else if (viewType === 'monthView') {
			this.monthSelected(event);
		}
		else {
			this.yearSelected(event);
		}
	}

    selectDate(event) {
		var isMultiple = this.getData( 'ltPropMultiple' );

		if (isMultiple) {
			this.selectMultiple(event);
		}
		else {
			this.selectSingle(event);
		}
	}

    selectMultiple(event) {
		var dateCell = this.getProper( event.target );

		if (this.terminateSelection(this.fireBeforeCallback(event, dateCell))) {
			return;
		}

		if (this.alreadySelected(dateCell)) {
			this.removeSelectedCell(dateCell);
			this.removeSelected(dateCell);

			if (this.getMethods('onDateRemoved')) {
				this.executeMethod('onDateRemoved', event, dateCell.getAttribute('data-date'), this);
			}
		}
		else {
			this.selectCell(event);
		}
	}

    terminateSelection(beforeCallbackReturnValue) {
		return beforeCallbackReturnValue === false;
	}

    fireBeforeCallback(event, dateCell) {
		if( this.alreadySelected( dateCell ) ) {
			return this.fireBeforeRemove( event, dateCell );
		}

		return this.fireBeforeAdd( event, dateCell );
	}

    fireBeforeRemove(event, dateCell) {
		if( this.getMethods( 'onBeforeRemove' ) ) {
			return this.executeMethod( 'onBeforeRemove', event, dateCell.getAttribute( 'data-date' ), this );
		}
	}

    fireBeforeAdd(event, dateCell) {
		if( this.getMethods( 'onBeforeAdd' ) ) {
			return this.executeMethod( 'onBeforeAdd', event, dateCell.getAttribute( 'data-date' ), this );
		}
	}

    alreadySelected(cell) {
		return cell.classList.contains( 'lyteCalSel' );
	}

    removeSelected(cell) {
		var dateToRemove = cell.getAttribute( 'data-date' ),
		selectedDates = this.getData( 'ltPropCurrentDates' ) || [],
		indexToRemove = selectedDates.indexOf( dateToRemove );

		if( !!~indexToRemove ) {
			this.$addon.arrayUtils( selectedDates, 'removeAt', indexToRemove );
		}
	}

    selectSingle(event) {
		this.removeDayHighlights();
		this.selectCell( event );
	}

    selectCell(event) {
		var target = this.getProper( event.target );
		
		this.setSelected( target );

		target.classList.add('lyteCalSel');
		target.setAttribute('aria-selected', 'true');
		target.setAttribute('tabindex', '1');

		if (this.getMethods('onDateSelected')) {
			this.executeMethod('onDateSelected', event, target.getAttribute('data-date'), this);
		}
	}

    setSelected(cell) {
		var isMultiple = this.getData( 'ltPropMultiple' ),
		curDate = this.convertToLang( cell.getAttribute( 'data-date' ) );

		this.setData('preventObs', true);

		if( isMultiple ) {
			this.$addon.arrayUtils( this.getData( 'ltPropCurrentDates' ), 'push', curDate );
		}
		else {
			this.setData('ltPropCurrentDate', curDate);
		}
		
		this.setData( 'preventObs', false );
	}

    monthSelected(event) {
		var viewDate = this.getData('viewDate'),
			currentYear = viewDate.getFullYear(),
			target = this.getProper(event.target),
			currentSelectedMonth = target.getAttribute('data-date'),
			isDrilldown = this.getData('ltPropHeaderType') === 'drilldown';

		currentSelectedMonth = this.getData('monthSystemValues').indexOf(currentSelectedMonth) + 1;

		this.setData('viewDate', new Date(currentSelectedMonth + '/1/' + currentYear));

		if (isDrilldown) {
			this.setAndBuildView('dateView', event);
		}

		this.removeMonthHighlight();
		this.addMonthHighlight(target);

		this.setData('ltPropCurrentMonth', currentSelectedMonth);

		if (this.getMethods('onMonthSelected')) {
			this.executeMethod('onMonthSelected', event, (currentSelectedMonth || "").toString(), this);
		}

		this.focusActiveCell();
	}

    removeMonthHighlight() {
		var month = this.$node.querySelector( '.lyteCalMonthSel' );

		if (month) {
			month.classList.remove('lyteCalMonthSel');
			month.removeAttribute('aria-selected');
		}
	}

    addMonthHighlight(cell) {
		cell.classList.add( 'lyteCalMonthSel' );
		cell.setAttribute( 'aria-selected', 'true' );
	}

    yearSelected(event) {
		var viewDate = this.getData( 'viewDate' ),
		target = this.getProper( event.target ),
		currentSelectedYear = target.getAttribute( 'data-date' ),
		isDrilldown = this.getData( 'ltPropHeaderType' ) === 'drilldown';

		viewDate.setYear(currentSelectedYear);
		this.setData('viewDate', viewDate);

		if (isDrilldown) {
			this.setAndBuildView('monthView', event);
		}

		this.removeYearHighlight();
		this.addYearHighlight(target);

		this.setData('ltPropCurrentYear', currentSelectedYear);

		if (this.getMethods('onYearSelected')) {
			this.executeMethod('onYearSelected', event, currentSelectedYear, this);
		}

		this.focusActiveCell();
	}

    removeYearHighlight() {
		var year = this.$node.querySelector( '.lyteCalYearSel' );

		if (year) {
			year.classList.remove('lyteCalYearSel');
			year.removeAttribute('aria-selected');
		}
	}

    addYearHighlight(cell) {
		cell.classList.add( 'lyteCalYearSel' );
		cell.setAttribute( 'aria-selected', 'true' );
	}

    focusDrillDownButton() {
		var button = this.$node.querySelector( '.lyteDrillCalHeaderButton' );

		if (button) {
			button.focus();
		}
	}

    makeSelection(event) {
		var selectionType = this.getData( 'ltPropSelectionType' );

		if (selectionType === 'day') {
			this.selectDate(event);
		}
		else {
			this.selectWeek(event);
		}
	}

    selectWeek(event) {
		if( !event ){
			var dateCell = this.$node.querySelector('.lyteCalToday');
		}
		else {
			var dateCell = this.getProper( event.target );
		}

		var firstDayOfWeek = this.getFirstSelectableDay( dateCell ).getAttribute( 'data-date' ),
		lastDayOfWeek = this.getLastSelectableDay( dateCell ).getAttribute( 'data-date' );

		this.removeDayHighlights();
		this.addWeekHighlight(dateCell);
		this.setData('ltPropCurrentWeek', [this.convertToLang(firstDayOfWeek), this.convertToLang(lastDayOfWeek)]);

		if (this.getMethods('onWeekSelected')) {
			this.executeMethod('onWeekSelected', event, firstDayOfWeek, lastDayOfWeek, this);
		}
	}

    removeDayHighlights() {
		this.removeSelectedCell();
		this.removeWeekHighlight();
	}

    removeSelectedCell(cell) {
		var node = cell || this.getSelectedCell();

		if (node) {
			node.classList.remove('lyteCalSel');
			node.removeAttribute('aria-selected');
			node.setAttribute('tabindex', '-1');
		}
	}

    getSelectedCell() {
		return this.$node.querySelector( '.lyteCalSel' );
	}

    removeWeekHighlight() {
		var highlightedDays = this.$node.querySelectorAll( '.lyteCalWeekSel' );
		var highlightedWeekNum = this.$node.querySelectorAll('.lyteCalWeekNumberSel');

		for( var i = 0; i < highlightedDays.length; i++ ) {
			highlightedDays[ i ].classList.remove( 'lyteCalWeekSel' );
			highlightedDays[ i ].removeAttribute( 'aria-selected' );
		} 

		for( var i = 0; i < highlightedWeekNum.length; i++ ) {
			highlightedWeekNum[ i ].classList.remove( 'lyteCalWeekNumberSel' );
			highlightedWeekNum[ i ].removeAttribute( 'aria-selected' );
		} 
		
	}

    addWeekHighlight(dateCell) {
		var firstSelectableDayOfWeek = this.getFirstSelectableDay( dateCell );

		var day = firstSelectableDayOfWeek;

		if( this.getData('ltPropWeekNumber') ){
			var parent = dateCell.parentElement;
			var target = parent.querySelector('.lyteWeekNumberGrid');

			if( target ){
				target.classList.add('lyteCalWeekNumberSel');
				target.setAttribute( 'aria-selected', 'true' );
			}
		}

		do {
			day.classList.add( 'lyteCalWeekSel' );
			day.setAttribute( 'aria-selected', 'true' );

			day = day.nextElementSibling;
		}while( day && day.getAttribute( 'data-selectable' ) === 'true' );
	}

    getFirstSelectableDay(cell) {
		var rowCells = cell.parentElement.children;

		for( var i = 0; i < rowCells.length; i++ ) {
			if( rowCells[ i ].getAttribute( 'data-selectable' ) === "true" ) {
				return rowCells[ i ];
			}
		}
	}

    getLastSelectableDay(cell) {
		var rowCells = cell.parentElement.children;

		for( var i = rowCells.length - 1; i > -1; i-- ) {
			if( rowCells[ i ].getAttribute( 'data-selectable' ) === "true" ) {
				return rowCells[ i ];
			}
		}
	}

    getCurrentWeekNumber(currentDateObj) {
		var curDateObj = new Date( currentDateObj );	//clone
		var weekNumCriteria = this.getData('ltPropWeekNumCriteria');
		var startDate = 1;
		var startWeekDay = this.getData('ltPropStartWeekDay');
		var weekNum = 0;

		switch( weekNumCriteria ){
			case 1:
				startDate = 1;
				break;

			case 2:
				//find first thursday date( can provide option for user to select 'any' day instead of thursday )
				startDate = this.getDateOfFirstDay( currentDateObj.getFullYear(), 4 ); // 4 -> thursday
				break;

			case 3: 
				//find first full week's first date
				startDate = this.getDateOfFirstDay( currentDateObj.getFullYear(), this.getData('ltPropStartWeekDay') ); 
				break;

		}

		var startDateObj = new Date( currentDateObj.getFullYear(), 0, startDate );

		this.getDateObjToStartDay( curDateObj );
		this.getDateObjToStartDay( startDateObj );

		var itrDateObj = new Date( startDateObj );

		while (itrDateObj <= curDateObj) {
			if (itrDateObj.getDay() === startWeekDay) { 
				weekNum += 1;
			}
			itrDateObj.setDate(itrDateObj.getDate() + 1); 
		}

		return weekNum;
	}

    getDateOfFirstDay(year, day) {
		var currDateObj = new Date( year, 0, 1 );
		for( var i=0; i<7; i++ ){
			if( currDateObj.getDay() === day ){
				break;
			}  
			currDateObj.setDate( currDateObj.getDate()+1 );
		}

		return currDateObj.getDate();
	}

    getDateObjToStartDay(curDateObj) {
		var startOfWeekDay = this.getData('ltPropStartWeekDay');
		for( var it=0;it<7;it++ ){
			if( curDateObj.getDay() == startOfWeekDay ){
				return;
			}
			curDateObj.setDate( curDateObj.getDate() - 1 );
		}
	}

    static actions(arg1) {
        return Object.assign(super.actions({
            changeToMonthView: function( event ) {
                this.changeToMonthView( event );
                this.focusDrillDownButton();	
            },

            changeToMonthViewOnKeys: function( event ) {
                var keyCode = event.keyCode,
                SPACE_KEY = 32,
                ENTER_KEY = 13;

                if( keyCode === ENTER_KEY || keyCode === SPACE_KEY ) {
                    this.changeToMonthView( event );
                    this.focusDrillDownButton();	
                }
            },

            changeToDecadeView: function( event ) {
                this.changeToDecadeView( event );
                this.focusActiveCell();
            },

            changeToDecadeViewOnKeys: function( event ) {
                var keyCode = event.keyCode,
                SPACE_KEY = 32,
                ENTER_KEY = 13;

                if( keyCode === ENTER_KEY || keyCode === SPACE_KEY ) {
                    this.changeToDecadeView( event );
                    this.focusActiveCell();
                }
            },

            // Detecting a one finger swipe
            record: function( event ) {
                // This is stupid
                this.setData( 'prev', false );

                if( event.touches.length > 1 ) {
                    this.setData( 'prev', true );

                    return ;
                }

                var touch = event.targetTouches[ 0 ],
                cords = {
                    x: touch.clientX,
                    y: touch.clientY
                },
                start = this.toDate().getTime();

                this.setData( 'cords', cords );
                this.setData( 'start', start );
            },

            decide: function( event ) {
                var prev = this.getData( 'prev' );

                // prev will be false only when you do a single finger swipe
                // Multi finger swipes return out of execution
                if( prev ) {
                    return ;
                }

                var start = this.getData( 'cords' ),
                x = start.x, y = start.y,
                touch = event.changedTouches[ 0 ],
                diffX = x - touch.clientX,
                diffY = y - touch.clientY,
                parent = this.$node.querySelector( '.lyteCalendarPopup' ),
                rect = parent.getBoundingClientRect(),
                width = rect.width,
                height = rect.height,
                xTolerance = width * 0.2,
                yTolerance = height * 0.15,
                begin = this.getData( 'start' ),
                delay = ( this.toDate().getTime() ) - begin;

                if( yTolerance > Math.abs( diffY ) 
                    && xTolerance < Math.abs( diffX ) 
                    && delay < 1000 
                ) {
                    if( diffX < 0 ) {
                        this.changeCurrentDate( "M", -1, event );
                    }
                    else if( diffX > 0 ) {
                        this.changeCurrentDate( "M", 1, event );
                    }
                }
                
            },

            previousOnKeys: function( val, event ) {
                var ENTER_KEY = 13, SPACE_KEY = 32, keyCode = event.keyCode;

                if( event.keyCode === ENTER_KEY || event.keyCode === SPACE_KEY ) {
                    this.moveToPrevious( val, event );
                }

            },

            nextOnKeys: function( val, event ) {
                var ENTER_KEY = 13, SPACE_KEY = 32, keyCode = event.keyCode;

                if( keyCode === ENTER_KEY || keyCode === SPACE_KEY ) {
                    this.moveToNext( val, event );
                }
            },

            previous: function( val, event ) {
                this.moveToPrevious( val, event );
            },

            next: function( val, event ) {
                this.moveToNext( val, event );
            },

            yearSelected: function( event ) {
                this.yearSelected( event );
            },

            monthSelected: function( event ) {
                this.monthSelected( event );
            },

            dateSelected: function( event ) {
                if( event.button !== 0 ) {
                    return ;
                }

                this.makeSelection( event );
            },

            performNavigation: function( event ) {
                var keyCode = event.keyCode,
                ARROW_UP = 38,
                ARROW_DOWN = 40,
                ARROW_LEFT = 37,
                ARROW_RIGHT = 39,
                SPACE_KEY = 32, 
                ENTER_KEY = 13,
                HOME_KEY = 36,
                END_KEY = 35,
                PAGE_UP = 33,
                PAGE_DOWN = 34,
                MONTH = 'M',
                navDirection, cellsToMove, cell = event.target, actionType;

                if( this.getData( 'ltPropDisableNavigation' ) ) {
                    return ;
                }

                switch( keyCode ) {
                    case ARROW_UP:
                        navDirection = 'previous';
                        actionType = 'up';
                        cellsToMove = this.getCellsToMove( navDirection, actionType );
                        this.moveBackward( event, navDirection, cellsToMove );
                        event.preventDefault();
                        break;

                    case ARROW_DOWN:
                        navDirection = 'next';
                        actionType = 'down';
                        cellsToMove = this.getCellsToMove( navDirection, actionType );
                        this.moveForward( event, navDirection, cellsToMove );
                        event.preventDefault();
                        break;

                    case ARROW_LEFT:
                        navDirection = 'previous';
                        cellsToMove = -1;
                        this.moveBackward( event, navDirection, cellsToMove );
                        event.preventDefault();
                        break;

                    case ARROW_RIGHT:
                        navDirection = 'next';
                        cellsToMove = 1;
                        this.moveForward( event, navDirection, cellsToMove );
                        event.preventDefault();
                        break;
                    case SPACE_KEY:
                    case ENTER_KEY:
                        if( this.isDisabledCell( cell ) ) {
                            return ;
                        }

                        this.selectHighlightedCell( event );
                        event.preventDefault();
                        break;
                    case HOME_KEY:
                        navDirection = 'previous';
                        this.moveToFirstCell( event, navDirection );
                        event.preventDefault();
                        break;
                    case END_KEY:
                        navDirection = 'next';
                        this.moveToLastCell( event, navDirection );
                        event.preventDefault();
                        break;
                    case PAGE_UP:
                        this.previousNavigation( MONTH, event );
                        event.preventDefault();
                        break;
                    case PAGE_DOWN:
                        this.nextNavigation( MONTH, event );
                        event.preventDefault();
                        break;
                }
            },

            today: function( event ) {
                this.revert( event );
                this.focusActiveCell();
            },

            todayOnKey: function( event ) {
                var keyCode = event.keyCode,
                SPACE_KEY = 32,
                ENTER_KEY = 13;

                if( keyCode === ENTER_KEY || keyCode === SPACE_KEY ) {
                    this.revert( event );
                    this.focusActiveCell();
                }
            },

            curWeek: function( event ) {
                //should entire row be focused? its been selected for now
                
                this.revert( event );
                this.selectWeek();
                // this.focusActiveRow();
            },

            curWeekOnKey: function( event ) {
                var keyCodes = event.keyCode;

                if( keyCodes === 13 || keyCodes === 32 ) {
                    this.revert( event );
                    this.selectWeek();
                    // this.focusActiveRow();

                }
            },

            curMonth: function( event ) {
                this.revertToMonth( event );
                // this.focusActiveCell();
            },

            curMonthOnKey: function( event ) {
                var keycode = event.keyCode;

                if( keycode === 13 || keycode === 32 ) {
                    this.revertToMonth( event );
                    // this.focusActiveCell();
                }
            },

            curYear: function( event ) {
                this.revertToYear( event );
                // this.focusActiveCell();
            },

            curYearOnKey: function( event ) {
                var keycode = event.keyCode;

                if( keycode === 13 || keycode === 32 ) {
                    this.revertToYear( event );
                    // this.focusActiveCell();
                }
            }
        }), arg1);
    }

    static methods(arg1) {
        return Object.assign(super.methods({
            optionSelected : function(prop,event,selected,comp){
                this.navigationButtonPressed = true;

                if(prop == 'M') {
                    // var index = comp.getData('ltPropOptions').indexOf(selected);
                    var index = this.getData('monthNames').indexOf(selected);

                    this.changeCurrentDate(prop, index - this.getData('viewDate').getMonth(),event);
                }
                else if(prop == 'Y') {
                    this.changeCurrentDate(prop, parseInt(selected) - this.getData('viewDate').getFullYear(),event);
                }
            },

            setClass: function( ev, comp ) {
                var drop = comp.childComp,
                rtl = window._lyteUiUtils.getRTL(),
                dir = rtl ? 'right' : 'left',
                arrow = drop.querySelector( '.lyteArrow' );

                drop.classList.add( 'lyteCalendarDropdown' )
                arrow.style[ dir ] = '20%';

                if( rtl ) {
                    arrow.style.left = 'auto';
                }
            }
        }), arg1);
    }

    static observers(arg1) {
        return Object.assign(super.observers({
            changeBodyContainerClass: function() {
                var container = this.$node.querySelector( '.lyteCalTableContainer' ),
                viewType = this.getData( 'viewType' ),
                selectionType = this.getData( 'ltPropSelectionType' );
				var isDrilldown = this.isDrilldown();

                if( isDrilldown ) {
                    if( viewType === 'dateView' ) {
                        container.classList.remove( 'lyteDrillCalMonthView' );
                        container.classList.remove( 'lyteDrillCalYearView' );
                    }
                    else if( viewType === 'monthView' ) {
                        container.classList.add( 'lyteDrillCalMonthView' );
                        container.classList.remove( 'lyteDrillCalYearView' );
                    }
                    else if( viewType === 'decadeView' ) {
                        container.classList.remove( 'lyteDrillCalMonthView' );
                        container.classList.add( 'lyteDrillCalYearView' );
                    }
                }

				this.removeSelectionStyles();
				if( !isDrilldown ){
					if( selectionType === 'day' ) {
						container.classList.add( 'lyteCalDaySelType' );
					}
					else if( selectionType === 'week' ) {
						container.classList.add( 'lyteCalWeekSelType' );
					}
					else if( selectionType === 'month' ) {
						container.classList.add( 'lyteCalMonthSelType' );
					}
					else if( selectionType === 'year' ){
						container.classList.add( 'lyteCalYearSelType' );
					}
					else {
						this.setData('ltPropSelectionType','day');
						container.classList.add( 'lyteCalDaySelType' );
					}
				}
				else if( viewType === 'dateView' ){
					if( selectionType === 'day' ) {
						container.classList.add( 'lyteCalDaySelType' );
					}
					else if( selectionType === 'week' ) {
						container.classList.add( 'lyteCalWeekSelType' );
					}
					else{
						this.setData('ltPropSelectionType','day');
						container.classList.add( 'lyteCalDaySelType' );
					}
				}

				this.setShowYearAccToView();
                
            }.observes( 'viewType', 'ltPropSelectionType' ).on( 'didConnect' ),


			yearObserver: function() {
				this.setShowYearAccToView();
			}.observes( 'ltPropYear' ),

            activateNavigation: function() {
                if( !this.getData( 'ltPropActivateNavigation' ) ) {
                    return ;
                }

                this.activateRelevantCell();

                this.setData( 'ltPropActivateNavigation', false );

            }.observes( 'ltPropActivateNavigation' ),

            setMonthAndYearDropdown : function(){
                if(!this.getData('navYield') && this.isDropdownHeader() && this.getData('monthDD') && this.getData('yearDD')){
                    var monthHeaders = this.getData('monthHeader').split( ' ' ),
                    format = this.getData( 'ltPropMonthHeaderFormat' ), 
                    lmd = /MMMM YYYY/ig,
                    ld = /MMM YYYY/ig,
                    monthArray = [],
                    monthNames, value;

                    if(arguments[0].item == "callFrmDidcnct"){
                        if(lmd.test( format )){
                            monthNames = this.getData('monthNames');
                        }
                        else if(ld.test(format)){
                            monthNames = this.getData('shortHands');
                        }
                        for(var i=0;i<monthNames.length; i++){
                            monthArray[i] = window._lyteUiUtils.i18n(monthNames[i]);
                        }
                        this.setData('monthNames',monthArray);
                    }

                    value = parseInt( monthHeaders[ 1 ] );

                    this.removeOutOfRangeOption();
                    
                    if( this.outOfRange( value ) ) {
                        this.addOutOfRangeOption( value );
                    }
                    // this.getData('monthDD').component.setData('ltPropOptions',monthArray);
                    this.getData('monthDD').component.setData('ltPropSelected',monthHeaders[0]);
                    this.getData('yearDD').component.setData('ltPropSelected',monthHeaders[1]);
                }
            }.observes('monthHeader','callFrmDidcnct'),

            startWeekDayObserver: function() {
                this.changeDaysOfWeek();
            }.observes( 'ltPropStartWeekDay' ),

            monthHeaderObserver: function() {
                this.buildDateViewHeader();
            }.observes( 'monthNames.[]' ),

            numberOfRowsChange: function() {
                // https://stackoverflow.com/questions/19727905/in-javascript-is-it-expensive-to-use-try-catch-blocks-even-if-an-exception-is-n
                // No penalty in chrome >= 60
                var numberOfRows = this.getData( 'ltPropNumberOfRows' );

                try {
                    if( numberOfRows < 5 ) {
                        throw "Calendar failed to render. The number of rows should be greater than 4.";
                    }
                }
                catch( e ) {
                    console.error( e );
                    return ;
                }

                this.setDatesFunction();
            }.observes( 'ltPropNumberOfRows' ),

            setDates: function( arg ) {
                if( this.__ignoremin && arg.item == "ltPropMinDate" ){
                    return;
                }
                this.setDatesFunction();
            }.observes( 
                'ltPropStartDate', 
                'ltPropEndDate', 
                'changeData', 
                'ltPropMinDate', 
                'ltPropMaxDate',
                'ltPropFormat',
                'ltPropStartWeekDay'
            ),

            executeViewDateChanges : function() {
                if( this.getMethods( 'onViewdateChange' ) ) {
                    this.executeMethod( 'onViewdateChange', this, this.getData( 'viewDate' ) );
                }
            }.observes( 'viewDate' ),

            initFn: function() {
                var self = this;
                
                this.addContainerClass();
                this.checkForMoment();		
                this.buildViewDate();
                this.changeDaysOfWeek();
                this.initializeCalendar();
                this.setCalendarIdsForAria();

                // set revert
                this.$node.revertToToday = function() {
                    self.revert();
                };

                this.$node.focusCalendar = function() {
                    self.setData( 'ltPropActivateNavigation', true );
                }

                this.$node.revertToSelected = function() {
                    self.revertToSelected();
                }

                // This is being internally used by CRM for their calendar
                this.$node.getDateArray = function( viewDate ) {
                    self.setData( 'viewDate', viewDate );
                    self.buildDateViewContent();

                    return self.getData( 'matrix' );
                }

            }.observes( 'currentDatechanged' ).on( 'init' ),

            selectionTypeObserver: function() {
                if( !this.isDrilldown() ) {
                    this.data.ltPropCurrentDate = '';
                    this.data.ltPropCurrentWeek = [];
                    this.data.ltPropCurrentMonth = '';
                    this.data.ltPropCurrentYear = '';
                }

                this.decideView();
            }.observes( 'ltPropSelectionType' ),

            changeIso : function(){
                
                this.isIso = true;
                var newDate = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(this.getData('ltPropIso')).getDObj();
                this.setData( 'viewDate', newDate );
                if( this.isDropdownHeader() ) {
                    this.buildYears();	
                }
                this.data.ltPropCurrentDate = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().moment(this.getData('ltPropIso')).format(this.getData('ltPropFormat'),this.isYYFormat());
                this.buildDateView();
            }.observes('ltPropIso'),

            changeViewDate: function( val ) {
                this.isIso = false;
                var cur = this.getData( 'ltPropCurrentDate' );

                if( this.getData( 'preventObs' ) ) {
                    return ;
                }

                // Current Date is set to empty
                if( !cur ) {
                    this.removeSelectedCell();
                    return ;
                }

                // Bad current date
                if( this.stringToDate( cur, this.getData( 'ltPropFormat' ) ) === 'Invalid Date' ) {
                    this.removeSelectedCell();
                    return ;
                }

                var val = this.getData( 'ltPropCurrentDate' );
                var newDate = this.stringToDate( val, this.getData( 'ltPropFormat' ) );
                newDate.setDate( 1 );

                // if( type === 'dropdown' && !this.isWithinAllowedYears( newDate ) ) {
                // 	return ;
                // }

                this.setData( 'viewDate', newDate );
                if(this.isMomentSupported){
                    this.data.ltPropIso = this.moment(newDate).format();
                }
                this.isFromCurrentDateObserver = true;
                this.buildDateView();
            }.observes( 'ltPropCurrentDate' ),

            selectedDatesChanged: function() {
                if( this.getData( 'preventObs' ) ) {
                    return ;
                }

                // Handling invalid dates is a bit expensive

                this.isFromCurrentDateObserver = true;
                this.buildDateView();

            }.observes( 'ltPropCurrentDates.[]' ),

            disabledDatesChanged: function() {
                this.isFromCurrentDateObserver = true;
                this.buildDateView();
            }.observes( 'ltPropDisabledDates.[]' ),

            monthHeaderFormatObserver: function() {
                this.buildDateViewHeader();
            }.observes( 'ltPropMonthHeaderFormat' ),

            weekNumberObserver: function() {
                var parCalendar = this.$node;

                if( this.getData('ltPropWeekNumber') && this.getData('viewType') === 'dateView' ){
					if( !parCalendar.classList.contains('lyteWeekNumContainer')){
                    	parCalendar.classList.add( 'lyteWeekNumContainer' );
					}
                }
                else {
                    parCalendar.classList.remove( 'lyteWeekNumContainer' );
                }

            }.observes( 'ltPropWeekNumber', 'viewType' ).on( 'didConnect' )
        }), arg1);
    }

    _() {
        _;
    }
}

LyteCalendarComponent._template = "<template tag-name=\"lyte-calendar\"> <div class=\"{{containerClass}}\" ontouchstart=\"{{action('record',event)}}\" ontouchend=\"{{action('decide',event)}}\"> <div class=\"lyteCalendarView\"> <div> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{navYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-yield yield-name=\"navigator\"></lyte-yield> </template><template default=\"\"> <div class=\"lyteCalendarNavigator {{if(ifEquals(ltPropHeaderAlignType,&quot;centerdate&quot;),&quot;lyteCalHeaderCenterAlign&quot;,&quot;&quot;)}}\"> <span id=\"{{monthDropdownId}}\" class=\"lyteVisuallyHidden\">{{lyteUiI18n(\"lyte.calendar.choose.month\")}}</span> <span id=\"{{yearDropdownId}}\" class=\"lyteVisuallyHidden\">{{lyteUiI18n(\"lyte.calendar.choose.year\")}}</span> <span class=\"lyteVisuallyHidden\" aria-live=\"polite\" id=\"{{headerId}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(viewType,'===','dateView')}}\" is=\"case\" lc-id=\"lc_id_0\"> <span>{{lyteUiGetMonthOrYear(monthHeader,\"M\")}}</span><span>{{lyteUiGetMonthOrYear(monthHeader,\"Y\")}}</span> </template><template case=\"{{expHandlers(viewType,'===','monthView')}}\" is=\"case\" lc-id=\"lc_id_1\"> <span>{{currentYear}}</span> </template><template default=\"\"> <span>{{decadeStart}} - {{decadeEnd}}</span> </template></template> </span> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ifNotEquals(ltPropHeaderAlignType,&quot;centerdate&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteCalsCalMon\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(expHandlers(ltPropHeaderType,'===','dropdown'),'||',expHandlers(ltPropHeaderType,'===','picklist'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-dropdown lt-prop-aria-button=\"{{monthAriaObj}}\" lt-prop-freeze=\"false\" lt-prop=\"{{stringify(ltPropDropdown)}}\" on-show=\"{{method('setClass')}}\" class=\"lyteCalMonthDD\" on-option-selected=\"{{method('optionSelected','M')}}\"> <template is=\"registerYield\" yield-name=\"yield\"> <lyte-drop-box> <lyte-drop-body> <template items=\"{{monthNames}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item}}\">{{item}}</lyte-drop-item> </template> </lyte-drop-body> </lyte-drop-box> </template> </lyte-dropdown> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropHeaderType,'===','dropdown')}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-dropdown lt-prop-aria-button=\"{{yearAriaObj}}\" lt-prop-freeze=\"false\" lt-prop=\"{{stringify(ltPropDropdown)}}\" on-show=\"{{method('setClass')}}\" class=\"lyteCalYearDD\" on-option-selected=\"{{method('optionSelected','Y')}}\"> <template is=\"registerYield\" yield-name=\"yield\"> <lyte-drop-box> <lyte-drop-body> <template items=\"{{years}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item}}\">{{item}}</lyte-drop-item> </template> </lyte-drop-body> </lyte-drop-box> </template> </lyte-dropdown> </template><template default=\"\"> <lyte-picklist lt-prop-options=\"{{years}}\" lt-prop-dropdown=\"{&quot;freeze&quot;: false, &quot;callout&quot;: true}\" class=\"lyteCalYearDD\" on-option-select=\"{{method('optionSelected','Y')}}\" on-show=\"{{method('setClass')}}\"> </lyte-picklist> </template></template> </template><template case=\"{{expHandlers(ltPropHeaderType,'===','drilldown')}}\" is=\"case\" lc-id=\"lc_id_1\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(viewType,'===','dateView')}}\" is=\"case\" lc-id=\"lc_id_0\"> <span aria-label=\"{{lyteUiI18n('lyte.calendar.monthview.drilldown.button')}}\" tabindex=\"0\" role=\"button\" class=\"lyteDrillCalHeaderButton\" onclick=\"{{action('changeToMonthView',event)}}\" onkeydown=\"{{action('changeToMonthViewOnKeys',event)}}\"> <span class=\"lyteCalsCalMonth\">{{lyteUiGetMonthOrYear(monthHeader,\"M\")}}</span> <span class=\"lyteCalsCalYear\">{{lyteUiGetMonthOrYear(monthHeader,\"Y\")}}</span> </span> </template><template case=\"{{expHandlers(viewType,'===','monthView')}}\" is=\"case\" lc-id=\"lc_id_1\"> <span aria-label=\"{{lyteUiI18n('lyte.calendar.decadeview.drilldown.button')}}\" tabindex=\"0\" role=\"button\" class=\"lyteDrillCalHeaderButton\" onclick=\"{{action('changeToDecadeView',event)}}\" onkeydown=\"{{action('changeToDecadeViewOnKeys',event)}}\"> <span class=\"lyteCalsCalYear\">{{currentYear}}</span> </span> </template><template case=\"{{expHandlers(viewType,'===','decadeView')}}\" is=\"case\" lc-id=\"lc_id_2\"> <span class=\"lyteDrillCalHeaderButton lyteDrillCalYearListHeader\"> {{decadeStart}} - {{decadeEnd}} </span> </template></template> </template><template case=\"{{expHandlers(expHandlers(ltPropSelectionType,'===','month'),'||',expHandlers(ltPropSelectionType,'===','year'))}}\" is=\"case\" lc-id=\"lc_id_2\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(viewType,'===','monthView')}}\" is=\"case\" lc-id=\"lc_id_0\"> <span> <span class=\"lyteCalsCalYear\">{{currentYear}}</span> </span> </template><template case=\"{{expHandlers(viewType,'===','decadeView')}}\" is=\"case\" lc-id=\"lc_id_1\"> <span class=\"lyteDrillCalHeaderButton lyteDrillCalYearListHeader\"> {{decadeStart}} - {{decadeEnd}} </span> </template></template> </template><template default=\"\"> <span class=\"lyteCalsCalMonth\">{{lyteUiGetMonthOrYear(monthHeader,\"M\")}}</span> <span class=\"lyteCalsCalYear\">{{lyteUiGetMonthOrYear(monthHeader,\"Y\")}}</span> </template></template> </span> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ifNotEquals(ltPropHeaderType,&quot;dropdown&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(expHandlers(showYear,'&amp;&amp;',expHandlers(ltPropSelectionType,'!==','month')),'&amp;&amp;',expHandlers(ltPropSelectionType,'!==','year'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <span role=\"button\" tabindex=\"0\" class=\"lyteCalNav lyteCalyearNavLft\" onclick=\"{{action('previous','Y',event)}}\" onkeydown=\"{{action('previousOnKeys','Y',event)}}\"> <span class=\"lyteVisuallyHidden\">{{lyteUiI18n('lyte.calendar.previous.year')}}</span> </span> </template></template> </template></template> <span role=\"button\" class=\"lyteCalNav lyteCaldLft {{lyteUiDisableCalendarNav(viewDate,'previous')}}\" tabindex=\"0\" onclick=\"{{action('previous','M',event)}}\" onkeydown=\"{{action('previousOnKeys','M',event)}}\"> <span class=\"lyteVisuallyHidden\">{{lyteUiI18n('lyte.calendar.previous.month')}}</span> </span> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ifEquals(ltPropHeaderAlignType,&quot;centerdate&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteCalsCalMon\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(expHandlers(ltPropHeaderType,'===','dropdown'),'||',expHandlers(ltPropHeaderType,'===','picklist'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-dropdown lt-prop-aria-button=\"{{monthAriaObj}}\" lt-prop-freeze=\"false\" lt-prop=\"{{stringify(ltPropDropdown)}}\" on-show=\"{{method('setClass')}}\" class=\"lyteCalMonthDD\" on-option-selected=\"{{method('optionSelected','M')}}\"> <template is=\"registerYield\" yield-name=\"yield\"> <lyte-drop-box> <lyte-drop-body> <template items=\"{{monthNames}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item}}\">{{item}}</lyte-drop-item> </template> </lyte-drop-body> </lyte-drop-box> </template> </lyte-dropdown> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropHeaderType,'===','dropdown')}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-dropdown lt-prop-aria-button=\"{{yearAriaObj}}\" lt-prop-freeze=\"false\" lt-prop=\"{{stringify(ltPropDropdown)}}\" on-show=\"{{method('setClass')}}\" class=\"lyteCalYearDD\" on-option-selected=\"{{method('optionSelected','Y')}}\"> <template is=\"registerYield\" yield-name=\"yield\"> <lyte-drop-box> <lyte-drop-body> <template items=\"{{years}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item}}\">{{item}}</lyte-drop-item> </template> </lyte-drop-body> </lyte-drop-box> </template> </lyte-dropdown> </template><template default=\"\"> <lyte-picklist lt-prop-options=\"{{years}}\" lt-prop-dropdown=\"{&quot;freeze&quot;: false, &quot;callout&quot;: true}\" class=\"lyteCalYearDD\" on-option-select=\"{{method('optionSelected','Y')}}\" on-show=\"{{method('setClass')}}\"> </lyte-picklist> </template></template> </template><template case=\"{{expHandlers(ltPropHeaderType,'===','drilldown')}}\" is=\"case\" lc-id=\"lc_id_1\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(viewType,'===','dateView')}}\" is=\"case\" lc-id=\"lc_id_0\"> <span aria-label=\"{{lyteUiI18n('lyte.calendar.monthview.drilldown.button')}}\" tabindex=\"0\" role=\"button\" class=\"lyteDrillCalHeaderButton\" onclick=\"{{action('changeToMonthView',event)}}\" onkeydown=\"{{action('changeToMonthViewOnKeys',event)}}\"> <span class=\"lyteCalsCalMonth\">{{lyteUiGetMonthOrYear(monthHeader,\"M\")}}</span> <span class=\"lyteCalsCalYear\">{{lyteUiGetMonthOrYear(monthHeader,\"Y\")}}</span> </span> </template><template case=\"{{expHandlers(viewType,'===','monthView')}}\" is=\"case\" lc-id=\"lc_id_1\"> <span aria-label=\"{{lyteUiI18n('lyte.calendar.decadeview.drilldown.button')}}\" tabindex=\"0\" role=\"button\" class=\"lyteDrillCalHeaderButton\" onclick=\"{{action('changeToDecadeView',event)}}\" onkeydown=\"{{action('changeToDecadeViewOnKeys',event)}}\"> <span class=\"lyteCalsCalYear\">{{currentYear}}</span> </span> </template><template case=\"{{expHandlers(viewType,'===','decadeView')}}\" is=\"case\" lc-id=\"lc_id_2\"> <span class=\"lyteDrillCalHeaderButton lyteDrillCalYearListHeader\"> {{decadeStart}} - {{decadeEnd}} </span> </template></template> </template><template case=\"{{expHandlers(expHandlers(ltPropSelectionType,'===','month'),'||',expHandlers(ltPropSelectionType,'===','year'))}}\" is=\"case\" lc-id=\"lc_id_2\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(viewType,'===','monthView')}}\" is=\"case\" lc-id=\"lc_id_0\"> <span> <span class=\"lyteCalsCalYear\">{{currentYear}}</span> </span> </template><template case=\"{{expHandlers(viewType,'===','decadeView')}}\" is=\"case\" lc-id=\"lc_id_1\"> <span class=\"lyteDrillCalHeaderButton lyteDrillCalYearListHeader\"> {{decadeStart}} - {{decadeEnd}} </span> </template></template> </template><template default=\"\"> <span class=\"lyteCalsCalMonth\">{{lyteUiGetMonthOrYear(monthHeader,\"M\")}}</span> <span class=\"lyteCalsCalYear\">{{lyteUiGetMonthOrYear(monthHeader,\"Y\")}}</span> </template></template> </span> </template></template> <span role=\"button\" class=\"lyteCalNav lyteCaldRgt {{lyteUiDisableCalendarNav(viewDate,'next')}}\" tabindex=\"0\" onkeydown=\"{{action('nextOnKeys','M',event)}}\" onclick=\"{{action('next','M',event)}}\"> <span class=\"lyteVisuallyHidden\">{{lyteUiI18n('lyte.calendar.next.month')}}</span> </span> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ifNotEquals(ltPropHeaderType,&quot;dropdown&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(expHandlers(showYear,'&amp;&amp;',expHandlers(ltPropSelectionType,'!==','month')),'&amp;&amp;',expHandlers(ltPropSelectionType,'!==','year'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <span role=\"button\" class=\"lyteCalNav lyteCalyearNavRgt\" tabindex=\"0\" onkeydown=\"{{action('nextOnKeys','Y',event)}}\" onclick=\"{{action('next','Y',event)}}\"> <span class=\"lyteVisuallyHidden\">{{lyteUiI18n('lyte.calendar.next.year')}}</span> </span> </template></template> </template></template> </div> </template></template> </div> <div class=\"lyteCalTableContainer\" role=\"grid\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropBodyYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-yield yield-name=\"body\"></lyte-yield> </template><template default=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(viewType,'===','dateView')}}\" is=\"case\" lc-id=\"lc_id_0\"> <div role=\"row\" class=\"lyteCalTableRowHeader\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropWeekNumber}}\" is=\"case\" lc-id=\"lc_id_0\"> <div role=\"columnheader\" class=\"lyteCalTableCellHeader lyteWeekNumberGrid\"><span>{{ltPropWeekNumHeader}}</span></div> </template></template> <template items=\"{{daysOfWeek}}\" item=\"day\" index=\"idod\" is=\"for\" _new=\"true\"> <div role=\"columnheader\" aria-label=\"{{day.title}}\" class=\"{{day.class}}\" id=\"{{day.id}}\">{{lyteUiI18n(day.day)}}</div> </template> </div> </template></template> <div class=\"lyteCalTableRowGroup\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(viewType,'===','dateView')}}\" is=\"case\" lc-id=\"lc_id_0\"> <template items=\"{{matrix}}\" item=\"vector\" index=\"rowid\" is=\"for\" _new=\"true\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(lyteUiCheckEmpty(vector),'!')}}\" is=\"case\" lc-id=\"lc_id_0\"> <div class=\"lyteCalTableRow\" role=\"row\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropWeekNumber}}\" is=\"case\" lc-id=\"lc_id_0\"> <div role=\"gridcell\" tabindex=\"-1\" class=\"{{weeknum[rowid].class}}\" lt-prop-title=\"Week Number\" lt-prop-tooltip-config=\"{&quot;position&quot; : &quot;right&quot;, &quot;appearance&quot; : &quot;box&quot;}\"><span>{{if(ifNotEquals(weeknum[rowid].val,0),weeknum[rowid].val,'')}}</span></div> </template></template> <template items=\"{{vector}}\" item=\"date\" index=\"cellid\" is=\"for\" _new=\"true\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(lyteUiCheckInRange(ltPropMinDate,ltPropMaxDate,date.val,ltPropFormat),'&amp;&amp;',expHandlers(lyteUiDisabledDates(date,ltPropDisabledDates),'!'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{date.emptyBlock}}\" is=\"case\" lc-id=\"lc_id_0\"> <div role=\"gridcell\" class=\"lyteCalEmpty\" data-selectable=\"false\"></div> </template><template default=\"\"> <div role=\"gridcell\" tabindex=\"-1\" id=\"{{date.id}}\" aria-labelledby=\"{{concat(date.id,' ',headerId,' ',daysOfWeek[cellid]['id'])}}\" onkeydown=\"{{action('performNavigation',event)}}\" onclick=\"{{action('dateSelected',event)}}\" class=\"{{date.clsname}}\" data-date=\"{{date.val}}\" data-selectable=\"true\"><span class=\"lyteCalDateSpan\">{{date.date}}</span></div> </template></template> </template><template default=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{date.emptyBlock}}\" is=\"case\" lc-id=\"lc_id_0\"> <div role=\"gridcell\" class=\"lyteCalEmpty\" data-selectable=\"false\"></div> </template><template default=\"\"> <div role=\"gridcell\" tabindex=\"-1\" id=\"{{date.id}}\" aria-labelledby=\"{{concat(date.id,' ',headerId,' ',daysOfWeek[cellid]['id'])}}\" aria-disabled=\"true\" onkeydown=\"{{action('performNavigation',event)}}\" data-date=\"{{date.val}}\" class=\"{{date.clsname}}\" data-selectable=\"false\"><span class=\"lyteCalDateSpan\">{{date.date}}</span></div> </template></template> </template></template> </template> </div> </template></template> </template> </template><template case=\"{{expHandlers(viewType,'===','monthView')}}\" is=\"case\" lc-id=\"lc_id_1\"> <template items=\"{{monthViewData}}\" item=\"row\" index=\"rowIndex\" is=\"for\" _new=\"true\"> <div class=\"lyteCalTableRow\"> <template items=\"{{row}}\" item=\"column\" index=\"columnIndex\" is=\"for\" _new=\"true\"> <div aria-label=\"{{lyteUiI18n(lyteUiGetLinearIndex(ariaMonthNames,rowIndex,columnIndex))}}\" role=\"gridcell\" tabindex=\"-1\" onkeydown=\"{{action('performNavigation',event)}}\" onclick=\"{{action('monthSelected',event)}}\" class=\"{{column['class']}}\" data-date=\"{{column['systemValue']}}\"> {{column['displayValue']}} </div> </template> </div> </template> </template><template case=\"{{expHandlers(viewType,'===','decadeView')}}\" is=\"case\" lc-id=\"lc_id_2\"> <template items=\"{{decadeViewData}}\" item=\"row\" index=\"rowIndex\" is=\"for\" _new=\"true\"> <div class=\"lyteCalTableRow\"> <template items=\"{{row}}\" item=\"column\" index=\"columnIndex\" is=\"for\" _new=\"true\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(column.emptyBlock,'!')}}\" is=\"case\" lc-id=\"lc_id_0\"> <div role=\"gridcell\" tabindex=\"-1\" onkeydown=\"{{action('performNavigation',event)}}\" onclick=\"{{action('yearSelected',event)}}\" class=\"lyteCalTableCell {{column.class}}\" data-date=\"{{column.year}}\"> {{column.year}} </div> </template><template default=\"\"> <div role=\"gridcell\" class=\"lyteCalEmpty\"> </div> </template></template> </template> </div> </template> </template></template> </div> </template></template> </div> <div> <div class=\"lyteCalBtns\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(expHandlers(showToday,'&amp;&amp;',ltPropShowToday),'&amp;&amp;',expHandlers(viewType,'===','monthView'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <p role=\"button\" tabindex=\"0\" onkeydown=\"{{action('curMonthOnKey',event)}}\" class=\"lyteCalCurrentDate\"><a onclick=\"{{action('curMonth',event)}}\">{{lyteUiI18n('Current Month')}}</a></p> </template><template case=\"{{expHandlers(expHandlers(showToday,'&amp;&amp;',ltPropShowToday),'&amp;&amp;',expHandlers(viewType,'===','decadeView'))}}\" is=\"case\" lc-id=\"lc_id_1\"> <p role=\"button\" tabindex=\"0\" onkeydown=\"{{action('curYearOnKey',event)}}\" class=\"lyteCalCurrentDate\"><a onclick=\"{{action('curYear',event)}}\">{{lyteUiI18n('Current Year')}}</a></p> </template><template case=\"{{expHandlers(expHandlers(expHandlers(showToday,'&amp;&amp;',ltPropShowToday),'&amp;&amp;',expHandlers(viewType,'===','dateView')),'&amp;&amp;',expHandlers(ltPropSelectionType,'===','week'))}}\" is=\"case\" lc-id=\"lc_id_2\"> <p role=\"button\" tabindex=\"0\" onkeydown=\"{{action('curWeekOnKey',event)}}\" class=\"lyteCalCurrentDate\"><a onclick=\"{{action('curWeek',event)}}\">{{lyteUiI18n('Current Week')}}</a></p> </template><template case=\"{{expHandlers(showToday,'&amp;&amp;',ltPropShowToday)}}\" is=\"case\" lc-id=\"lc_id_3\"> <p role=\"button\" tabindex=\"0\" onkeydown=\"{{action('todayOnKey',event)}}\" class=\"lyteCalCurrentDate\"><a onclick=\"{{action('today',event)}}\">{{lyteUiI18n('today')}}</a></p> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-yield yield-name=\"footer\"></lyte-yield> </template></template> </div> </div> </div> </div> </template>";;
LyteCalendarComponent._dynamicNodes = [{"t":"a","p":[1]},{"t":"s","p":[1,1,1,1],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"a","p":[1,1],"cn":"default"},{"t":"tX","p":[1,1,0],"cn":"default"},{"t":"a","p":[1,3],"cn":"default"},{"t":"tX","p":[1,3,0],"cn":"default"},{"t":"a","p":[1,5],"cn":"default"},{"t":"s","p":[1,5,1],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_0"},{"t":"tX","p":[2,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{"dN":[{"t":"tX","p":[1,0],"cn":"default"},{"t":"tX","p":[1,2],"cn":"default"}]},"dc":{"lc_id_0":{},"lc_id_1":{},"default":{}},"hd":true,"co":["lc_id_0","lc_id_1"],"in":4,"sibl":[3],"cn":"default"},{"t":"s","p":[1,7],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"r","p":[1,1],"dN":[{"t":"a","p":[1,1,1]},{"t":"f","p":[1,1,1],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"cD","p":[1,1],"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[2,1,0],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"s","p":[3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"r","p":[1,1],"dN":[{"t":"a","p":[1,1,1]},{"t":"f","p":[1,1,1],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"cD","p":[1,1],"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[2,1,0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"cD","p":[1],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[1,0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,1,0],"cn":"lc_id_0"},{"t":"tX","p":[1,3,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"a","p":[1],"cn":"lc_id_1"},{"t":"tX","p":[1,1,0],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true},"lc_id_2":{"dN":[{"t":"tX","p":[1,1],"cn":"lc_id_2"},{"t":"tX","p":[1,3],"cn":"lc_id_2"}],"cdp":{"t":"a","p":[2]},"dcn":true}},"d":{},"dc":{"lc_id_0":{},"lc_id_1":{},"lc_id_2":{}},"hd":true,"co":["lc_id_0","lc_id_1","lc_id_2"],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true},"lc_id_2":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"tX","p":[1,1],"cn":"lc_id_1"},{"t":"tX","p":[1,3],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{},"dc":{"lc_id_0":{},"lc_id_1":{}},"hd":true,"co":["lc_id_0","lc_id_1"],"cn":"lc_id_2"}],"cdp":{"t":"a","p":[2]},"dcn":true}},"d":{"dN":[{"t":"tX","p":[1,0],"cn":"default"},{"t":"tX","p":[3,0],"cn":"default"}]},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"lc_id_1":{},"lc_id_2":{},"default":{}},"hd":true,"co":["lc_id_0","lc_id_1","lc_id_2"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":3,"sibl":[2],"cn":"default"},{"t":"s","p":[1,9],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":2,"sibl":[1],"cn":"default"},{"t":"a","p":[1,11],"cn":"default"},{"t":"tX","p":[1,11,1,0],"cn":"default"},{"t":"s","p":[1,13],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"r","p":[1,1],"dN":[{"t":"a","p":[1,1,1]},{"t":"f","p":[1,1,1],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"cD","p":[1,1],"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[2,1,0],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"s","p":[3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"r","p":[1,1],"dN":[{"t":"a","p":[1,1,1]},{"t":"f","p":[1,1,1],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"cD","p":[1,1],"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[2,1,0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"cD","p":[1],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[1,0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,1,0],"cn":"lc_id_0"},{"t":"tX","p":[1,3,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"a","p":[1],"cn":"lc_id_1"},{"t":"tX","p":[1,1,0],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true},"lc_id_2":{"dN":[{"t":"tX","p":[1,1],"cn":"lc_id_2"},{"t":"tX","p":[1,3],"cn":"lc_id_2"}],"cdp":{"t":"a","p":[2]},"dcn":true}},"d":{},"dc":{"lc_id_0":{},"lc_id_1":{},"lc_id_2":{}},"hd":true,"co":["lc_id_0","lc_id_1","lc_id_2"],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true},"lc_id_2":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"tX","p":[1,1],"cn":"lc_id_1"},{"t":"tX","p":[1,3],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{},"dc":{"lc_id_0":{},"lc_id_1":{}},"hd":true,"co":["lc_id_0","lc_id_1"],"cn":"lc_id_2"}],"cdp":{"t":"a","p":[2]},"dcn":true}},"d":{"dN":[{"t":"tX","p":[1,0],"cn":"default"},{"t":"tX","p":[3,0],"cn":"default"}]},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"lc_id_1":{},"lc_id_2":{},"default":{}},"hd":true,"co":["lc_id_0","lc_id_1","lc_id_2"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"default"},{"t":"a","p":[1,15],"cn":"default"},{"t":"tX","p":[1,15,1,0],"cn":"default"},{"t":"s","p":[1,17],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[3,1],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":3,"sibl":[2]},{"t":"s","p":[1,1,3,1],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,0,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[0],"cn":"lc_id_0"},{"t":"a","p":[1,3],"cn":"lc_id_0"},{"t":"f","p":[1,3],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,0]}],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[0],"cn":"default"},{"t":"s","p":[3,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"f","p":[1],"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[0],"cn":"lc_id_0"},{"t":"a","p":[1,3],"cn":"lc_id_0"},{"t":"f","p":[1,3],"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"tX","p":[1,0,0],"cn":"default"}]},"dc":{"lc_id_0":{},"default":{}},"hd":true,"co":["lc_id_0"],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"tX","p":[1,0,0],"cn":"default"}]},"dc":{"lc_id_0":{},"default":{}},"hd":true,"co":["lc_id_0"],"cn":"default"}]},"dc":{"lc_id_0":{},"default":{}},"hd":true,"co":["lc_id_0"]}],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"]}],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"a","p":[1],"cn":"lc_id_1"},{"t":"f","p":[1],"dN":[{"t":"a","p":[1,1]},{"t":"f","p":[1,1],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,1]}]}],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true},"lc_id_2":{"dN":[{"t":"a","p":[1],"cn":"lc_id_2"},{"t":"f","p":[1],"dN":[{"t":"a","p":[1,1]},{"t":"f","p":[1,1],"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,1],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[]},"dc":{"lc_id_0":{},"default":{}},"hd":true,"co":["lc_id_0"]}]}],"cn":"lc_id_2"}],"cdp":{"t":"a","p":[2]},"dcn":true}},"d":{},"dc":{"lc_id_0":{},"lc_id_1":{},"lc_id_2":{}},"hd":true,"co":["lc_id_0","lc_id_1","lc_id_2"],"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"s","p":[1,1,5,1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"a","p":[1,0],"cn":"lc_id_0"},{"t":"tX","p":[1,0,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"a","p":[1],"cn":"lc_id_1"},{"t":"a","p":[1,0],"cn":"lc_id_1"},{"t":"tX","p":[1,0,0],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true},"lc_id_2":{"dN":[{"t":"a","p":[1],"cn":"lc_id_2"},{"t":"a","p":[1,0],"cn":"lc_id_2"},{"t":"tX","p":[1,0,0],"cn":"lc_id_2"}],"cdp":{"t":"a","p":[2]},"dcn":true},"lc_id_3":{"dN":[{"t":"a","p":[1],"cn":"lc_id_3"},{"t":"a","p":[1,0],"cn":"lc_id_3"},{"t":"tX","p":[1,0,0],"cn":"lc_id_3"}],"cdp":{"t":"a","p":[3]},"dcn":true}},"d":{},"dc":{"lc_id_0":{},"lc_id_1":{},"lc_id_2":{},"lc_id_3":{}},"hd":true,"co":["lc_id_0","lc_id_1","lc_id_2","lc_id_3"],"in":1,"sibl":[0]},{"t":"s","p":[1,1,5,1,3],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0},{"type":"dc","trans":true,"hc":true,"p":[3,2,0]}];;

LyteCalendarComponent._observedAttributes = [
    "ltPropStartDate",
    "ltPropEndDate",
    "ltPropCurrentDate",
    "ltPropFormat",
    "ltPropYear",
    "ltPropMonthHeaderFormat",
    "daysOfWeek",
    "ariaMonthNames",
    "monthSystemValues",
    "monthNames",
    "shortHands",
    "todayName",
    "viewDate",
    "changeData",
    "ltPropYield",
    "ltPropMinDate",
    "ltPropMaxDate",
    "ltPropStartWeekDay",
    "navYield",
    "selectDate",
    "currentDatechanged",
    "ltPropFillRows",
    "ltPropNumberOfRows",
    "callFrmDidcnct",
    "monthDD",
    "yearDD",
    "years",
    "ltPropHeaderType",
    "ltPropDropdown",
    "cords",
    "start",
    "prev",
    "tt",
    "showToday",
    "monthViewTableArray",
    "ltPropBodyYield",
    "ltPropShowToday",
    "ltPropI18n",
    "ltPropActivateNavigation",
    "ltPropDisableNavigation",
    "ltPropPreventAddingRows",
    "ltPropSelectionType",
    "ltPropWeekends",
    "ltPropCurrentWeek",
    "ltPropCurrentMonth",
    "ltPropCurrentYear",
    "ltPropDisabledDates",
    "ltPropCurrentDates",
    "ltPropMultiple",
    "headerId",
    "monthDropdownId",
    "yearDropdownId",
    "ltPropIso",
    "ltPropWeekNumCriteria",
    "ltPropHolidays",
    "ltPropDisableWeekends",
    "ltPropDisableHolidays",
    "ltPropWeekNumber",
    "ltPropAlwaysShowToday",
    "ltPropHighlightWeekendHolidays",
    "ltPropTimeZone",
    "ltPropDisabledDays",
    "ltPropHeaderAlignType",
    "ltPropWeekNumHeader",
    "showYear",
    "ltPropCurrentDisplayMonth",
    "ltPropCurrentDisplayYear",
    "ltPropCurrentDisplayDecade"
];

/**
 * @syntax nonYielded
 * <lyte-calendar></lyte-calendar>
 */

/**
 * @syntax yielded
 * <lyte-calendar>
 *     <template is="registerYield" yield-name="footer">
 *         <span>Footer Of The Calendar</span>
 *     </template>
 * </lyte-calendar>
 */



LyteCalendarComponent.register("lyte-calendar", {
    hash: "LyteCalendarComponent_10",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});


/***/ }),

/***/ 5322863:
/*!*************************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-carousel.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteCarouselComponent": () => (/* binding */ LyteCarouselComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    },

    "LyteUiComponentComponentRegistry": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry;
    }
});




/**
 * Renders a Carousel
 * @component lyte-carousel
 * @version  3.0.0
 * @methods onBeforePrev,onBeforeNext,onAfterNext,onAfterPrev
 * @utility moveSlideByIndex,reset,getActiveSlideIndex
 */
class LyteCarouselComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    data(arg1) {
		return Object.assign(super.data({
			/** 
			 * @componentProperty {boolean} ltPropAutoPlay
			 * @version 3.0.0
			 * @default false
			 */
			ltPropAutoPlay : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', {
			 'default' :  window._lyteUiUtils.resolveDefaultValue( 'lyte-carousel', 'autoPlay', false )
			  }),
			/** 
			 * @componentProperty {slide | fade} ltPropEffect
			 * @version 3.0.0
			 * @default slide
			 */
			ltPropEffect : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 
			 'default' :  window._lyteUiUtils.resolveDefaultValue( 'lyte-carousel', 'effect', 'slide' ) 
			}),
			/** 
			 * @componentProperty {number} ltPropActiveIndex
			 * @version 3.0.0
			 * @default 0
			 */

			ltPropActiveIndex : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', {
			 'default' : 0
			}),
			/** 
			 * @componentProperty {boolean} ltPropMoreRecords
			 * @version 3.0.0
			 * @default false
			 */
			ltPropMoreRecords : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', {
			 'default' : false
			}),
			/** 
			 * @componentProperty {number} ltPropRecords
			 * @version 3.0.0
			 */
			ltPropRecords : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', {
			 'default' : undefined
			}),
			/** 
			 * @componentProperty {number} ltPropAutoPlayDuration
			 * @version 3.0.0
			 * @default 3000
			 */
			ltPropAutoPlayDuration : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('number',{
			'default' :  window._lyteUiUtils.resolveDefaultValue( 'lyte-carousel', 'autoPlayDuration', 3000 )
			}),
			/** 
			 * @componentProperty {boolean} ltPropAutoPlayPause
			 * @version 3.0.0
			 * @default false
			 */
			ltPropAutoPlayPause : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', {
			 'default' :  window._lyteUiUtils.resolveDefaultValue( 'lyte-carousel', 'autoPlayPause', false )
			}),
			/** 
			 * @componentProperty {array} ltPropData
			 * @version 3.0.0
			 * @default []
             *
			 */
			ltPropData : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'array', {
			 'default' : []
			}),
			/**
			 * @componentProperty {boolean} ltPropAria
			 * @version 3.1.0
			 * @default true
			 */
			ltPropAria : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', {
				'default':true
			}),
			/**
			 * @componentProperty {object} ltPropAriaAttributes
			 * @version 3.1.0
			 * @default {}
			 */
			ltPropAriaAttributes : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', { 
				'default': {}
			}),
			/**
			 * @componentProperty {horizontal | vertical} ltPropOrientation
			 * @version 3.82.0
			 * @default "horizontal"
			 */
			ltPropOrientation : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 
				'default': "horizontal"
			}),
			/**
			 * @componentProperty {string} ltPropTabIndex
			 * @version 3.82.0
			 * @default 0
			 */
			ltPropTabIndex : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', {
				'default' : '3'
			}),
			ltPropDataTabIndex : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', {
				'default' : 1
			}),
			ltPropArrowKey : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean',{
				default : false
			}),
			coordinates : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object',{
				'default': {}
			}),
			currentActiveIndex : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', {
			 'default' : 0
			}),
			prev : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean',{
				'default' : false
			}),
			'start': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number' )

		}), arg1);		
	}

    didConnect() {
		var carouselContent = this.$node.querySelector('lyte-carousel-content');
		var activeIndex = this.getData( 'ltPropActiveIndex' );

		if(this.getData('ltPropAria') && carouselContent){
			carouselContent.setAttribute('aria-live', this.getData('ltPropAutoPlay') ? 'off' : 'polite') 
		}
		if( activeIndex ) {
			this.setData( 'currentActiveIndex', activeIndex )
		}
		if( this.getData( 'ltPropRecords' ) >= 1 ) {
			this.setActiveItem()
		}
		// if( this.getData( 'ltPropRecords' ) > 1 ) {
			this.setMethod();
		// }
		this.$node.moveSlideByIndex = function(index){
			var activeIndex = this.getData( 'currentActiveIndex' ),
			itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ),
		 	indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="'+ activeIndex +'"] ' );
			if( activeIndex >= 0 && activeIndex < itemList.length ){
				itemList[activeIndex].classList.remove('lyteActive')
				itemList[activeIndex].setAttribute('tabindex', -1)
				itemList[activeIndex].setAttribute('data-tabindex', -1)
				itemList[activeIndex].setAttribute('aria-hidden', false)
				if(indicatorList) {
					indicatorList.classList.remove('lyteActive')
					indicatorList.setAttribute('tabindex',-1)
					indicatorList.setAttribute('data-tabindex',-1)

				}
			}
			clearTimeout( this._nextTimeout )
			clearTimeout( this._nextFadeTimeout )
			this.setData( 'currentActiveIndex', index )
			this.setActiveItem()
		}.bind( this ) 
		this.$node.reset = function(){
			setTimeout( function() {
				var activeIndex = this.getData( 'currentActiveIndex' ),
				itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ),
			 	indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="'+ activeIndex +'"] ' );
				if( activeIndex >= 0 && activeIndex < itemList.length ){
					itemList[activeIndex].classList.remove('lyteActive')
					itemList[activeIndex].setAttribute('tabindex',-1)
					itemList[activeIndex].setAttribute('data-tabindex',-1)
					itemList[activeIndex].setAttribute('aria-hidden', false)

					if(indicatorList) {
						indicatorList.classList.remove('lyteActive')
						indicatorList.setAttribute('tabindex',-1)
						indicatorList.setAttribute('data-tabindex',-1)

					}
				}
				clearTimeout( this._nextTimeout )
				clearTimeout( this._nextFadeTimeout )
				this.setData( 'currentActiveIndex',this.getData( 'ltPropActiveIndex' ) )
				this.setActiveItem()

				this.setMethod();
			}.bind( this ) )
		}.bind( this ) 
		this.$node.getActiveSlideIndex =function(){
			return this.getData('currentActiveIndex')
		}.bind(this)
		this.$node.focus =function(){
			document.addEventListener('keyup', this._keyupEvents)
		}.bind(this)
		if( this.getData('ltPropEffect') === "swipe" ){
			this._carouselTochStart = this.carouselTouchStart.bind(this,carouselContent)
			carouselContent.addEventListener( 'touchstart', this._carouselTochStart)
		}
		if(this.getData('ltPropArrowKey')){
			this._carouselClick = this.carouselClick.bind(this)
			document.addEventListener('click', this._carouselClick)
		}
		this._keyupEvents = this.keyupEvents.bind(this)

	}

    carouselClick(event) {
		const target = event.target
		if(target === this.$node || this.$node.contains(target)){
			document.addEventListener('keyup', this._keyupEvents)
		} else{
			document.removeEventListener('keyup', this._keyupEvents)
		}
	}

    keyupEvents(event) {
		const key = (event.keyCode || event.which)
		const effect  = this.getData('ltPropEffect').toLowerCase()
		if(key == 37){
			if(effect !== 'fade'){
				this.prevClick(event)
			} else{
				this.prevFadeClick(event)
			}
		} else if(key == 39){
			if(effect !== 'fade'){
				this.nextClick(event)
			} else{
				this.nextFadeClick(event)
			}
		}
	}

    didDestroy() {
		if(this.getData('ltPropArrowKey')){
			document.removeEventListener('click', this._carouselClick)
		}
		clearInterval( this._autoId )
		delete this._autoId
	}

    carouselTouchStart(carouselContent, event) {
		this.setData( 'prev', false );

		if( event.touches.length > 1 ) {
				this.setData( 'prev', true );

				return ;
		}

		var touch = event.targetTouches[ 0 ],
		cords = {
				x: touch.clientX,
				y: touch.clientY
		}
		this.setData('coordinates',cords)
		window.start = new Date().getTime();
		this.setData('start', start)
		this._carouselTouchEnd = this.carouselTouchEnd.bind(this,carouselContent)
		// carouselContent.addEventListener('touchmove',this._carouselTouchMove )
		carouselContent.addEventListener('touchend',this._carouselTouchEnd)
	}

    carouselTouchMove(carouselContent, event) {
		event.preventDefault()
	}

    carouselTouchEnd(carouselContent, event) {
		var prev = this.getData( 'prev' );

			// prev will be false only when you do a single finger swipe
			// Multi finger swipes return out of execution
			if( prev ) {
				return ;
			}

			var start = this.getData( 'coordinates' ),
			x = start.x, y = start.y,
			touch = event.changedTouches[ 0 ],
			diffX = x - touch.clientX
			window.diffY = y - touch.clientY
			window.parent = this.$node.querySelector( 'lyte-carousel-content' ),
			window.rect = parent.getBoundingClientRect(),
			window.width = rect.width,
			window.height = rect.height,
			window.xTolerance = width * 0.2,
			window.yTolerance = height * 0.15,
			window.begin = this.getData('start'),
			window.delay = (new Date().getTime()) - begin;
			var orientation = this.getData("ltPropOrientation");
				if (!orientation || orientation === "horizontal" || orientation !== "vertical") {
					if (delay < 1000 && Math.abs(diffX) > 150) {
						if (diffX < 0) {
							this.prevClick();
						}
						else if (diffX > 0) {
							this.nextClick();
						}
					}
				}
				else if (orientation && orientation === "vertical") { 
					if (delay < 1000 && Math.abs(diffY) > 120) {
						if (diffY < 0) {
							this.prevClick();
						}
						else if (diffY > 0) {
							this.nextClick();
						}
					}
				}
	}

    getCarouselWidget() {
		return this.$node.querySelector( '.lyteCarouselWrapper' );
	}
    checkRecordCountEqualsOne(){
		if( this.getData('ltPropRecords') <= 1 ){
			return true
		}
		return false
	}

    setMethod() {
		if(this.getData('ltPropRecords') > 1 || (this.getData('ltPropData') && this.getData('ltPropData').length >1) || this.getData('ltPropMoreRecords')){
		
		var prev =this.$node.getElementsByTagName( 'lyte-carousel-prev' )[ 0 ],
			next = this.$node.getElementsByTagName( 'lyte-carousel-next' )[ 0 ],
			indicator = this.$node.getElementsByTagName( 'lyte-carousel-indicator' )[ 0 ];
			if( this.getData( 'ltPropEffect' ).toLowerCase() ==  "fade" ) {
				this.$node.classList.add( 'lyteFade' )
				if( prev && this.getData('ltPropRecords') > 1 ) {
					this._prevFadeClick = this.prevFadeClick.bind( this )
					prev.addEventListener( 'click', this._prevFadeClick )
				}
				if( next && !this._nextFadeClick ) {
					this._nextFadeClick = this.nextFadeClick.bind( this )
					next.addEventListener( 'click', this._nextFadeClick )
				}
				if( indicator && this.getData('ltPropRecords') > 1 ) {
					this._indicatorFadeClick = this.indicatorFadeClick.bind( this )
					indicator.addEventListener( 'click', this._indicatorFadeClick )
				}
				this._zeroOpacityTransition = this.zeroOpacityTransition.bind( this )
			}
			else{
				this.$node.classList.add( 'lyteScroll' )
				if( prev && this.getData('ltPropRecords') > 1 ) {
					this._prevClick = this.prevClick.bind( this )
					prev.addEventListener( 'click', this._prevClick )
				}
				if( next && !this._nextClick) {
					this._nextClick = this.nextClick.bind( this )
					next.addEventListener( 'click', this._nextClick )
				}
				if( indicator && this.getData('ltPropRecords') > 1 ) {
					this._indicatorClick = this.indicatorClick.bind( this );
					indicator.addEventListener( 'click', this._indicatorClick )
				}
				this._removePrevClass = this.removePrevClass.bind( this )
				this._removeNextClass = this.removeNextClass.bind( this )
			}
		}
	}
    clearTimeoutAndInterval(){
		clearInterval( this._autoId )
		delete this._autoId
		clearTimeout( this._timeOut1)
		delete this._timeOut1
	}

    carouselContentFocus() {
		var carouselWrapper = this.$node.querySelector( '.lyteCarouselWrapper' );
		var carouselContent = this.$node.querySelector('lyte-carousel-content')
		carouselContent.setAttribute('aria-live','polite')
		this.clearTimeoutAndInterval()

		this._carouselContentFocusOut = this.carouselContentFocusOut.bind( this, carouselWrapper, carouselContent )
		carouselWrapper.addEventListener( 'mouseleave',  this._carouselContentFocusOut)
	}

    carouselContentFocusOut(carouselWrapper, carouselContent) {
		carouselContent.setAttribute('aria-live','off')

		carouselWrapper.removeEventListener( 'mouseleave', this._carouselContentFocusOut )
		if(this.getData('ltPropAutoPlay'))	{
			this.autoPlayFunc();
		}
			
	}

    setActiveItem() {
		var activeIndex = this.getData( 'currentActiveIndex' ),
			itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ),
		 	indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="'+ activeIndex +'"] ' );
			if( activeIndex >= 0 && activeIndex < itemList.length ){
				itemList[activeIndex].setAttribute('tabindex', this.getData('ltPropTabIndex'))
				itemList[activeIndex].setAttribute('data-tabindex', this.getData('ltPropDataTabIndex'))

				itemList[ activeIndex ].classList.add( 'lyteActive' );
				itemList[activeIndex].setAttribute('aria-hidden', true)

				if( indicatorList ) {
					indicatorList.setAttribute('data-tabindex', this.getData('ltPropDataTabIndex'))
					indicatorList.setAttribute('tabindex', this.getData('ltPropTabIndex'))

					indicatorList.classList.add( 'lyteActive' ) ;
				}
	
			}
	}

    prevClick(event, index) {
		if( this._prevTrans ) {
			// event.preventDefault();
			// event.stopPropagation();
			console.log('return')

			return;
		}
		else{
			if( this._autoId ) {
				clearInterval( this._autoId )
				this._autoId = false;
			}
			this._prevTrans=true

			var records = this.getData( 'ltPropRecords' ),
		 	currentActive = this.getData( 'currentActiveIndex' ),
		 	itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ) ,
			 indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="' +currentActive+ '"] ' );
			 window.res=true;
			if( this.getMethods( 'onBeforePrev' ) ){
				res = this.executeMethod( 'onBeforePrev' , event , this , currentActive ,records);
				delete this._prevTrans

			}
			if(res !== false){
				if( currentActive >= 1 ){
					this.previous( currentActive, index || currentActive-1, itemList, indicatorList, event )
				}
				else if(currentActive==0){
					this.previous( currentActive, index || records-1, itemList, indicatorList, event )
	
				}
			}
			if( this.getData( 'ltPropAutoPlay' )  ) {
				setTimeout( function() {
					this.autoPlayFunc();
				}.bind( this ), 100 )
			}
		}
	}

    nextClick(event, index) {
		var records = this.getData( 'ltPropRecords' ),
		 	currentActive = this.getData( 'currentActiveIndex' ),
		 	res=true,that = this,index;
		if( this._nextTrans) {
			// event.preventDefault();
			// event.stopPropagation();
				return;			
		}
		else{
			
			this.clearTimeoutAndInterval()
			if( this.getMethods( 'onBeforeNext' ) ){
						res = this.executeMethod( 'onBeforeNext' , event , this , currentActive ,records);
						records = this.getData( 'ltPropRecords' )
			}
			if(this.getData( 'ltPropRecords' ) <= 1){
				return
			}
			let itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ) ,
		 	indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="'+ currentActive +'"] ' )
			if(res && res.then  ) {
				res.then( function( arg ) {
					if( currentActive >= 0 &&  currentActive < that.getData( 'ltPropRecords' ) ) {
						if( currentActive < that.getData( 'ltPropRecords' ) - 1 ) {
							that.next( currentActive, index || currentActive+1, itemList, indicatorList, event )

						}
						else if( currentActive == that.getData( 'ltPropRecords' ) - 1 ) {
							that.next( currentActive, index || 0, itemList, indicatorList, event )
						}
					}
					if( that.getData('ltPropAutoPlay')  ) {
							that.autoPlayFunc();
					}
					
				}).catch( function( err ) {
					console.error( err );
				} );
			}
			else if( res !== false ) {
				if( currentActive >= 0 && currentActive < records-1 ) {
					this.next( currentActive, index || currentActive+1, itemList, indicatorList, event )
							
				}
				else if( currentActive == records-1 ) {
					this.next( currentActive, index || 0, itemList, indicatorList, event )
				}
				if( this.getData( 'ltPropAutoPlay' )  ) {
					setTimeout( function() {
						this.autoPlayFunc();
					}.bind( this ), 100 )
				}
			}
		}
			
	}

    next(currentActive, nextIndex, itemList, indicatorList, event) {
		debugger
		var res = true, records = this.getData('ltPropRecords')

		this._nextTrans = true
			var duration = parseFloat( window.getComputedStyle( itemList[ currentActive ] ).transitionDuration )
				duration = ( duration * 1000 ) +200
			setTimeout( function() {
					
					if( this._nextTrans ) {
						var itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ),
						indicatorList = this.$node.getElementsByTagName( 'lyte-carousel-indicator-item' ),
						activeItemList = this.$node.querySelectorAll( 'lyte-carousel-item.lyteActive' )
						for( var i=0 ; i<itemList.length; ++i ) {
							if( _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()(itemList[ i ] ).hasClass( 'lyteActivePrev' ) ) {
								itemList[ i ].classList.remove( 'lyteActivePrev' )
							}
						}
						if( activeItemList.length > 1 ) {
							for( var i=0 ; i < itemList.length; ++i ) {
								if( i != this.getData( 'ltPropActiveIndex' ) && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( itemList[ i ] ).hasClass( 'lyteActive' ) ) {
									itemList[ i ].setAttribute('tabindex',-1)

									itemList[ i ].classList.remove( 'lyteActive' )
									itemList[i].setAttribute('aria-hidden', false)

									indicatorList[i].setAttribute('tabindex',-1)

									indicatorList[ i ].classList.remove( 'lyteActive' )

								}
							}
						}
						delete this._nextTrans
					}
			}.bind( this ), duration )
	
			itemList[ nextIndex].classList.add( 'lyteActiveNext' ) 
			this._nextTimeout = setTimeout( function() {
				if( this._nextTrans ) {
					itemList[ currentActive ].addEventListener( 'transitionend', this._removePrevClass )
					itemList[ currentActive ].classList.add( 'lyteActivePrev' ) 
					itemList[ currentActive ].setAttribute('tabindex',-1)

					itemList[ currentActive ].classList.remove( 'lyteActive' ) 
					itemList[currentActive].setAttribute('aria-hidden', false)

					if( indicatorList ) {
						indicatorList.setAttribute('tabindex',-1)

						indicatorList.classList.remove( 'lyteActive' )
 
					}
					itemList[ nextIndex].classList.remove( 'lyteActiveNext' ) 
					// this.setData( 'ltPropActiveIndex',	nextIndex ) ;
					this.setData( 'currentActiveIndex', nextIndex ) ;
					if( this.getMethods( 'onAfterNext' ) ){
						this.executeMethod( 'onAfterNext' , event , this , nextIndex ) ;
					}
				}
			}.bind( this ), 100 )
		
		
	}

    previous(currentActive, prevIndex, itemList, indicatorList, event) {
		var res = true, records = this.getData('ltPropRecords')
		

			this._prevTrans=true

			itemList[ prevIndex ].classList.add( 'lyteActivePrev' ) 
			setTimeout( function() {
				itemList[ currentActive ].addEventListener( 'transitionend', this._removeNextClass )
				itemList[ currentActive ].classList.add( 'lyteActiveNext' ) 
				itemList[ currentActive ].setAttribute('tabindex',-1)

				itemList[ currentActive ].classList.remove( 'lyteActive' ) 
				itemList[ currentActive ].setAttribute('aria-hidden', false)
				this.setData( 'currentActiveIndex', prevIndex )
				console.log(itemList[ prevIndex ].classList)
				setTimeout(function(){
					itemList[ prevIndex ].classList.remove('lyteActivePrev') 
				},10)
				if( indicatorList ) {
					indicatorList.setAttribute('tabindex',-1)

					indicatorList.classList.remove( 'lyteActive' ) 

				}
				// this.setData( 'ltPropActiveIndex', prevIndex )
				if( this.getMethods( 'onAfterPrev' ) ){
					this.executeMethod( 'onAfterPrev' , event , this , prevIndex ) 
				}
			}.bind( this ) )
		
	}

    removePrevClass(event) {
		
			// if(currentActive-1>=0){
				event.currentTarget.classList.remove( 'lyteActivePrev' ) 
				event.currentTarget.removeEventListener( 'transitionend', this._removePrevClass )

			// }

			delete this._nextTrans 
	}

    removeNextClass(event) {
		

		event.currentTarget.classList.remove('lyteActiveNext') ;
		event.currentTarget.removeEventListener('transitionend',this.removeNextClass);
		
		delete this._prevTrans 
	}

    autoPlayFunc() {
		if(this._autoId){
			clearInterval(this._autoId)
			this._autoId = false
		}
		var duration = this.getData('ltPropAutoPlayDuration')
		if(duration ){
			this._autoId=setInterval(function(){
				var effect = this.getData('ltPropEffect') ?  this.getData('ltPropEffect') :'';
				if( effect.toLowerCase() == "fade" && !this._nextFadeTrans ){
					this.nextFadeClick();
				}
				else if( effect.toLowerCase() !== "fade" &&!this._nextTrans ){
					this.nextClick();
				}
			}.bind(this),duration);
		}
	}

    indicatorClick(event) {
		if( this.checkRecordCountEqualsOne() ){
			return
		}
		var index, e = event.target,
		target= _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()(e).closest('lyte-carousel-indicator-item')[ 0 ];
		if( target && target.tagName.toLowerCase() == 'lyte-carousel-indicator-item' ){
			index = target.getAttribute('data-value');
			var currentActive = this.getData( 'currentActiveIndex' ),
		 	itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ) ,
		 	indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="'+ currentActive +'"] ' ),
			res=true,that = this;

			if( index < currentActive ){
				this.prevClick( event, index );
			}
			else if(index > currentActive ){
				this.nextClick( event, index );

			}
		}
	}

    prevFadeClick(event, index) {
		if( this._prevFadeTrans ) {
			// event.preventDefault()
			// event.stopPropagation()
			return;
		}
		else{
			if( this._autoId ) {
				clearInterval( this._autoId )
				this._autoId = false;
			}
			var records = this.getData( 'ltPropRecords' ),
		 	currentActive = this.getData( 'currentActiveIndex' ),
		 	itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ) ,
			indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="' +currentActive+ '"] ' ),
			res=true;
			if( this.getMethods( 'onBeforePrev' ) ){
				res = this.executeMethod( 'onBeforePrev' , event , this , currentActive ,records );
			}
			if(res !== false){
				if( currentActive >= 1 ){
					this.previousFade( currentActive, index || currentActive-1, itemList, indicatorList, event )
				}
				else if( currentActive==0 ) {
					this.previousFade( currentActive, index || records-1, itemList, indicatorList, event )
	
				}
			}
			if( this.getData( 'ltPropAutoPlay' )  ) {
				setTimeout( function() {
					this.autoPlayFunc();
				}.bind( this ), 100 )
			}
		}
	}

    previousFade(currentActive, prevIndex, itemList, indicatorList, event) {
		this._prevFadeTrans=true

		setTimeout( function() {
			itemList[ prevIndex ].addEventListener( 'transitionend', this._zeroOpacityTransition )
			itemList[ currentActive ].classList.remove( 'lyteActive' ) ;
			itemList[ currentActive ].setAttribute('tabindex',-1)
			itemList[ currentActive ].setAttribute('data-tabindex',-1)

			itemList[ currentActive ].setAttribute('aria-hidden', false)

			itemList[ prevIndex ].classList.add('lyteActive') ;
			itemList[ prevIndex ].setAttribute('tabindex', this.getData('ltPropTabIndex'))
			itemList[ prevIndex ].setAttribute('data-tabindex', this.getData('ltPropDataTabIndex'))

			itemList[ prevIndex ].setAttribute('aria-hidden', true)

			if( indicatorList ) {
				indicatorList.classList.remove( 'lyteActive' ) ;
				indicatorList.setAttribute('tabindex',-1)
				indicatorList.setAttribute('data-tabindex',-1)

			}
			this.setData( 'currentActiveIndex', prevIndex );
			if( this.getMethods( 'onAfterPrev' ) ){
				this.executeMethod( 'onAfterPrev' , event , this , prevIndex ) 
			}
		}.bind( this ) )
}

    zeroOpacityTransition(event) {
		event.currentTarget.removeEventListener( 'transitionend', this._zeroOpacityTransition )
		
		delete this._prevFadeTrans ;
		delete this._nextFadeTrans ;
	}

    nextFadeClick(event, index) {
		
		var records = this.getData( 'ltPropRecords' ),
		 	currentActive = this.getData( 'currentActiveIndex' ),
		 	res=true,that = this,index;
		if( this._nextTrans ) {
				// event.preventDefault();
				// event.stopPropagation();
				return;			
		}
		else{

			this.clearTimeoutAndInterval()
			if( this.getMethods( 'onBeforeNext' ) ){
						res = this.executeMethod( 'onBeforeNext' , event , this , currentActive ,records );
						records = this.getData( 'ltPropRecords' )
			}
			if(this.getData( 'ltPropRecords' ) <= 1){
				return
			}
			let itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ) ,
		 	indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="'+ currentActive +'"] ' )
			if( res && res.then) {
				res.then(function( arg ) {
					if( currentActive >= 0 &&  currentActive < that.getData( 'ltPropRecords' ) ) {
						if( currentActive < that.getData( 'ltPropRecords' )-1 ) {
							that.nextFade( currentActive, index || currentActive+1, itemList, indicatorList, event )

						}
						else if( currentActive == that.getData( 'ltPropRecords' ) - 1 ) {
							that.nextFade( currentActive,index || 0, itemList, indicatorList, event )
						}
					}
					if( that.getData( 'ltPropAutoPlay' ) ) {
						// setTimeout(function(){
							that.autoPlayFunc();
						// }.bind(that),100)
					}
				} ).catch( function( err ) {
					console.error( err );
				} );
			}
			else if( res !== false ) {
				if( currentActive >= 0 && currentActive < records-1 ){
					this.nextFade( currentActive, index || currentActive+1, itemList, indicatorList, event )
							
				}
				else if( currentActive == records-1 ) {
					this.nextFade( currentActive, index || 0, itemList, indicatorList, event )
				}
				if( this.getData( 'ltPropAutoPlay' ) ) {
					setTimeout( function() {
						this.autoPlayFunc();
					}.bind( this ),100 )
				}
			}
		}
		
	}

    nextFade(currentActive, nextIndex, itemList, indicatorList, event) {
		this._nextFadeTrans = true
		var duration = parseFloat( window.getComputedStyle( itemList[ currentActive ] ).transitionDuration )
			duration = ( duration * 1000 ) +20
			
		setTimeout( function() {
				if( this._nextFadeTrans ) {
					delete this._nextFadeTrans
				}
		}.bind( this ), duration )

		this._nextFadeTimeout = setTimeout( function() {
			itemList[ currentActive ].addEventListener( 'transitionend', this._zeroOpacityTransition)
			itemList[ currentActive ].classList.remove( 'lyteActive' ) ;
			itemList[ currentActive ].setAttribute('tabindex',-1)
			itemList[ currentActive ].setAttribute('data-tabindex',-1)
			itemList[ currentActive ].setAttribute('aria-hidden', false)

			if( indicatorList ) {
				indicatorList.classList.remove( 'lyteActive' ) ;
				indicatorList.setAttribute('tabindex',-1)
				indicatorList.setAttribute('data-tabindex',-1)

			}
			this.setData( 'currentActiveIndex', nextIndex ) ;
			if( this.getMethods( 'onAfterNext' ) ){
				this.executeMethod( 'onAfterNext' , event , this , nextIndex ) 
			}
		}.bind( this ), 100 )
	}

    indicatorFadeClick(event) {
		var index, e = event.target,
		target= _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( e ).closest( 'lyte-carousel-indicator-item' )[ 0 ];

	
		if( target && target.tagName.toLowerCase() == 'lyte-carousel-indicator-item' ) {
			index = target.getAttribute( 'data-value' );
			var currentActive = this.getData( 'currentActiveIndex' ),
		 	itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ) ,
		 	indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="'+ currentActive +'"] ' ),
			res=true,that = this;

			if( index < currentActive ){
				this.prevFadeClick( event, index );
			}
			else if(index > currentActive ){
				this.nextFadeClick( event , index);

			}
		}
	}

    static observers(arg1) {
        return Object.assign(super.observers({
            setOrientation: function () { 
                var orientation = this.getData("ltPropOrientation");
                if (orientation && orientation === "vertical") {
                    this.$node.classList.add('lyteCarouselVertical');
                }
                else if (orientation && orientation === "horizontal") {
                    this.$node.classList.remove('lyteCarouselVertical');
                }
            }.observes("ltPropOrientation").on("didConnect"),

            ariaObserver: function( change ) {
                if(this.getData('ltPropAria')){
                    window._lyteUiUtils.setAttribute( this.getCarouselWidget(), this.getData( 'ltPropAriaAttributes' ) || {}, {} );

                }

            }.observes( 'ltPropAriaAttributes' ).on( 'didConnect' ),

            dataObs : function() {
                setTimeout( function() {
                        clearTimeout( this._nextTimeout )
                        clearTimeout( this._nextFadeTimeout )
                        this.setData( 'currentActiveIndex',this.getData( 'ltPropActiveIndex' ) )
                        this.setActiveItem()
                        this.setMethod();
                }.bind( this ) )
            }.observes( 'ltPropData' ),

            currentActiveObs : function() {
                // this.checkButton();
                this.setActiveItem();
                
                
            }.observes( 'currentActiveIndex' ),
			recordObs : function(obj) {
                // this.checkButton();
                if(obj.oldValue === 1 && obj.newValue > 1 ){
					this.setMethod()
				}
                
            }.observes( 'ltPropRecords' ),
            activeIndexObs : function() {
                // this.checkButton();
                var activeIndex = this.getData( 'currentActiveIndex' ),
                    itemList = this.$node.getElementsByTagName( 'lyte-carousel-item' ),
                    indicatorList= this.$node.querySelector( ' lyte-carousel-indicator-item[data-value="'+ activeIndex +'"] ' );
                if( activeIndex >= 0 && activeIndex < itemList.length ){
                    itemList[activeIndex].setAttribute('tabindex',-1)
                    itemList[activeIndex].setAttribute('data-tabindex',-1)

                    itemList[activeIndex].classList.remove('lyteActive')
                    itemList[activeIndex].setAttribute('aria-hidden', false)

                    if(indicatorList) {
                        indicatorList.setAttribute('tabindex',-1)
                        indicatorList.setAttribute('data-tabindex',-1)
                        indicatorList.classList.remove('lyteActive')

                    }
                    this.setData( 'currentActiveIndex', this.getData( 'ltPropActiveIndex' ) )
                }
                
            }.observes( 'ltPropActiveIndex' ),

            autoPlayPauseObs : function() {
                var carouselContent = this.$node.querySelector( '.lyteCarouselWrapper' );
                this._carouselContentFocus= this.carouselContentFocus.bind(this)
                if( this.getData( 'ltPropAutoPlayPause' ) && this.getData( 'ltPropAutoPlayDuration' ) ) {
                    if( carouselContent ) {
                        carouselContent.addEventListener( 'mouseenter', this._carouselContentFocus )
                    }
                }
                else{
                    if( carouselContent ) {
                        carouselContent.removeEventListener( 'mouseenter', this._carouselContentFocus )
                    }
                }
            }.observes( 'ltPropAutoPlayPause' ).on( 'didConnect' ),

            autoPlayObs : function() {
                if( !this.getData( 'ltPropAutoPlay' ) && this._autoId ) {
                    clearInterval( this._autoId );
                    this._autoId = false
                }
                if(this.getData( 'ltPropAutoPlay' ) && (this.getData('ltPropRecords') > 1 || this.getData('ltPropMoreRecords'))) {
                    this.autoPlayFunc();
                }
            }.observes( 'ltPropAutoPlay' ).on( 'didConnect' )
        }), arg1);
    }

    _() {
        _;
    }
}

LyteCarouselComponent._template = "<template tag-name=\"lyte-carousel\"> <div class=\"lyteCarouselWrapper\"> <lyte-yield yield-name=\"carouselBoxYield\"></lyte-yield> </div> </template>";;
LyteCarouselComponent._dynamicNodes = [{"t":"i","p":[1,1],"in":0},{"type":"dc","trans":true,"hc":true,"p":[0]}];;

LyteCarouselComponent._observedAttributes = [
    "ltPropAutoPlay",
    "ltPropEffect",
    "ltPropActiveIndex",
    "ltPropMoreRecords",
    "ltPropRecords",
    "ltPropAutoPlayDuration",
    "ltPropAutoPlayPause",
    "ltPropData",
    "ltPropAria",
    "ltPropAriaAttributes",
    "ltPropOrientation",
    "ltPropTabIndex",
    "ltPropDataTabIndex",
    "ltPropArrowKey",
    "coordinates",
    "currentActiveIndex",
    "prev",
    "start"
];

if( !window._lyteUiUtils.registeredCustomElements[ 'lyte-carousel-item' ] ) {
    window._lyteUiUtils.registeredCustomElements[ 'lyte-carousel-item' ] = true;

    class LyteCarouselItemCustomElements extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry.CustomElements {
        lookups() {
            return [{
                component: _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return [ ];
        }

        connectedCallback() {
            var lyteNode = this.$node;

            lyteNode.setAttribute( 'aria-hidden', false );

            if( !lyteNode.hasAttribute( 'tabindex' ) ) {
				lyteNode.setAttribute( 'tabindex', '-1' );
				lyteNode.setAttribute( 'data-tabindex', '-1' );

			}
        }

        _() {
            _;
        }
    }

    LyteCarouselItemCustomElements.options = {clone : {allCallbacks : false}};

    LyteCarouselItemCustomElements.register("lyte-carousel-item");
}
if( !window._lyteUiUtils.registeredCustomElements[ 'lyte-carousel-next' ] ) {
    window._lyteUiUtils.registeredCustomElements[ 'lyte-carousel-next' ] = true;

    class LyteCarouselNextCustomElements extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry.CustomElements {
        lookups() {
            return [{
                component: _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return [ ];
        }

        connectedCallback() {
            var lyteNode = this.$node;

            lyteNode.setAttribute( 'aria-role', 'button' );
        }

        _() {
            _;
        }
    }

    LyteCarouselNextCustomElements.options = {clone : {allCallbacks : false}};

    LyteCarouselNextCustomElements.register("lyte-carousel-next");
}
if( !window._lyteUiUtils.registeredCustomElements[ 'lyte-carousel-prev' ] ) {
    window._lyteUiUtils.registeredCustomElements[ 'lyte-carousel-prev' ] = true;

    class LyteCarouselPrevCustomElements extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry.CustomElements {
        lookups() {
            return [{
                component: _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return [ ];
        }

        connectedCallback() {
            var lyteNode = this.$node;

            lyteNode.setAttribute( 'aria-role', 'button' );
        }

        _() {
            _;
        }
    }

    LyteCarouselPrevCustomElements.options = {clone : {allCallbacks : false}};

    LyteCarouselPrevCustomElements.register("lyte-carousel-prev");
}
/**
 * 
 * @syntax yielded 
 *	<lyte-carousel>
 *	<template is="registerYield" yield-name="carouselBoxYield">
 *       <lyte-carousel-prev> </lyte-carousel-prev>
 *       <lyte-carousel-content>
 *          <lyte-carousel-item> Content 1 </lyte-carousel-item>
 *          <lyte-carousel-item> Content 2 </lyte-carousel-item>
 *       </lyte-carousel-content>
 *       <lyte-carousel-indicator>
 *           <lyte-indicator-item data-value="0"> 1 </lyte-indicator-item>
 *           <lyte-indicator-item data-value="1"> 2 </lyte-indicator-item>
 *       </lyte-carousel-indicator>
 *      <lyte-carousel-next> </lyte-carousel-next>
 *   </template>
 *	</lyte-carousel> 
 */


LyteCarouselComponent.register("lyte-carousel", {
    hash: "LyteCarouselComponent_14",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});


/***/ }),

/***/ 13465052:
/*!*************************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-checkbox.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteCheckboxComponent": () => (/* binding */ LyteCheckboxComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_helpers_helpers_dev_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/helpers/helpers-dev.js */ 16898062);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    }
});





/**
 * Renders a checkbox
 * @component lyte-checkbox
 * @version 1.0.0
 * @utility focus,blur,click
 * @methods onBeforeChecked,onChecked,onChanged,onBeforeUnchecked,onUnchecked
 */

window._lyteCbox = {
	'checkedClass': 'lyteCboxChecked',
	'uncheckedClass': 'lyteCboxUnchecked'
};

class LyteCheckboxComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    data(arg1) {
    	return Object.assign(super.data({
    		/**
			 * @componentProperty {default | primary | secondary | switch | slider} ltPropType=default
			 */

			'ltPropType': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': window._lyteUiUtils.resolveDefaultValue('lyte-checkbox', 'type', 'default')
			}),

			/**
			 * @componentProperty {string} ltPropId
			 */

			'ltPropId': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': undefined
			}),

			/**
			 * @componentProperty {boolean} ltPropDisabled=false
			 */

			'ltPropDisabled': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {
				'default': false
			}),

			/**
			 * @componentProperty {boolean} ltPropChecked=false
			 */

			'ltPropChecked': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {
				'default': false
			}),

			/**
			 * @componentProperty {string} ltPropLabel
			 */

			'ltPropLabel': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': undefined
			}),

			/**
			 * @componentProperty {string} ltPropName
			 */

			'ltPropName': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': undefined
			}),

			/**
			 * @componentProperty {string} ltPropValue
			 */

			'ltPropValue': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': undefined
			}),

			/**
			 * @componentProperty {boolean} ltPropReadOnly=false
			 */

			'ltPropReadonly': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {
				'default': false
			}),

			/**
			 * @componentProperty {boolean} ltPropFireOnInit=false
			 */

			'ltPropFireOnInit': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {
				'default': window._lyteUiUtils.resolveDefaultValue('lyte-checkbox', 'fireOnInit', false)
			}),

			/**
			 * @componentProperty {string} ltPropClass
			 */

			'ltPropClass': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': window._lyteUiUtils.resolveDefaultValue('lyte-checkbox', 'class', '')
			}),

			/**
			 * @componentProperty {string} ltPropLabelClass
			 */

			'ltPropLabelClass': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {
				'default': window._lyteUiUtils.resolveDefaultValue('lyte-checkbox', 'labelClass', '')
			}),

			/**
			 * @componentProperty {number} ltPropTabindex=0
			 */

			'ltPropTabindex': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('number', {
				'default': 0
			}),
			'lyteUnbound': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {
				'default': false
			}),

			/**
			 * @componentProperty {boolean} ltPropYield=false
			 * @version 2.2.8
			 */

			'ltPropYield': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {
				'default': false
			}),

			/**
			 * @componentProperty {object} ltPropAriaCheckbox={}
			 * @version 3.1.0
			 */


			'ltPropAriaCheckbox': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', {
				'default': window._lyteUiUtils.resolveDefaultValue('lyte-checkbox', 'ariaCheckbox', {})
			}),

			/**
			 * @componentProperty {boolean} ltPropFocus=false
			 * @version 3.2.0
			 */

			'ltPropFocus': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {
				'default': false
			}),

			'ltPropPreventCallbackObservers': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {
				'default': false
			}),

			'ltPropDataTabindex': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': "" }),

			'ltPropShowTooltip': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-checkbox', 'showTooltip', false ) } ),

			'ltPropTooltipConfig': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', {
				'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-checkbox', 'tooltipConfig', {
					'position': 'bottom',
					'appearance': 'box',
					'margin': 5,
					'keeptooltip': true
				} )

			} ),

			'ltPropTooltipClass': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-checkbox', 'tooltipClass', '' ) } ),

			'ltPropAria': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': window._lyteUiUtils.resolveDefaultValue( 'lyte-checkbox', 'aria', false ) } ),

			'randomId': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string')
		}), arg1);
	}

    didDestroy() {
		delete this.$node.focus;
		delete this.$node.blur;
		delete this.$node.click;
	}

    reduceOpacity() {
		if (this.getData('ltPropDisabled')) {
			this.$node.classList.add('lyteCheckDisabled');
		}
		else {
			this.$node.classList.remove('lyteCheckDisabled');
		}
	}

    setDefaults() {
		var type = this.getData('ltPropType'),
			cls = this.getData('ltPropClass'),
			label = this.getData('ltPropLabelClass');

		if (type === 'switch' ) {
			this.setData('ltPropFinalClass', cls ? cls : this.getDefaultSwitchClass() );
		}
		else if (type === 'default') {
			this.setData('ltPropFinalClass', cls ? cls : 'lyteCheckBoxDefault');
		}
		else if (type === 'primary') {
			this.setData('ltPropFinalClass', cls ? cls : 'lyteCheckBoxPrimary');
		}
		else if (type === 'slider') {
			this.setData('ltPropFinalClass', cls ? cls : 'lyteCheckSlider');
		}

		if (type === 'slider') {
			this.setData('ltPropFinalLabelClass', label ? label : 'lyteCheckSliderText');
		}
		else {
			this.setData('ltPropFinalLabelClass', label ? label : '');
		}
	}

    getDefaultSwitchClass() {
		return 'lyteCheckSwitch' + ( this.getData( 'ltPropAria' ) ? ' lyteCheckboxSwitchWithStateLabel' : '' );
	}

    setTooltip() {
		var showTooltip = this.getData( 'ltPropShowTooltip' ),
		label = this.getData( 'ltPropLabel' ),
		tooltipConfig = this.getData( 'ltPropTooltipConfig' ),
		tooltipClass = this.getData( 'ltPropTooltipClass' ),
		labelElement = this.$node.querySelector( '[lyte-label]' );
		if(showTooltip) {
			this.$node.classList.add( 'lyteCheckboxLabelEllipsis' );
		}
		if( showTooltip && labelElement && labelElement.offsetWidth < labelElement.scrollWidth ) {
			labelElement.setAttribute( 'lt-prop-title', label );
			labelElement.setAttribute( 'lt-prop-tooltip-config', JSON.stringify( tooltipConfig ) );
			labelElement.setAttribute( 'lt-prop-tooltip-class', tooltipClass );
		}
	}

    setRandomId() {
		this.setData('randomId', 'lyte-checkbox-label-' + window._lyteUiUtils.cboxId++);
	}

    focusInput() {
		var input = this.$node.querySelector('input'),
			doesNeedFocus = document.activeElement !== input;

		// Clicking on label doesn't focus checkbox in ff and safari
		if (doesNeedFocus) {
			input.focus();
		}
	}

    didConnect() {
		var that = this, newAria = this.getData('ltPropAriaCheckbox');

		var dataIndex = this.getData('ltPropDataTabindex')
		this.$node.setAttribute('data-tabindex', dataIndex)

		this.reduceOpacity();

		this.$node.click = function () {
			var ev = new Event('click', {
				bubbles: true,
				cancelable: true
			}),
				node = that.$node,
				checked = node.ltProp('checked'),
				disabled = node.ltProp('disabled'),
				readonly = node.ltProp('readonly'),
				unbound = that.getData('lyteUnbound'),
				item = that.$node.querySelector('input');

			if (disabled || readonly) {
				return;
			}

			that.setData('eventCache', ev);
			// that.setData( 'preventRefire', true );

			that.setData('internalChange', true);
			that.clickFn = true;

			if (checked) {
				node.ltProp('checked', false);
			}
			else {
				node.ltProp('checked', true);
			}

			// Unbound checkboxes don't check/uncheck visually on their own because we rely on lt-prop-checked to do it
			// TODO: The input will be checked in onBefore callbacks
			// TODO: This needs to be changed when LN provides the relevant APIs to check if it is unbound
			if (that.$node._fR) {
				that.setData('internalChange', false);
				item.checked = node.ltProp('checked');

				if (item.checked) {
					item.setAttribute('checked', '');
				}
				else {
					item.removeAttribute('checked')
				}
				that.fireCallBacksFunction({}, false);
			}

			that.clickFn = false;
			// that.setData( 'preventRefire', false );
			// that.fireCallBacksFunction( {}, false );
			node.dispatchEvent(ev);
		}

		this.$node.focus = function () {
			var node = that.$node,
				input = node.querySelector('input'),
				disabled = node.ltProp('disabled'),
				readonly = node.ltProp('readonly');

			if (disabled || readonly) {
				return;
			}

			input.focus();
		}

		this.$node.blur = function () {
			var node = that.$node,
				input = node.querySelector('input'),
				disabled = node.ltProp('disabled'),
				readonly = node.ltProp('readonly');

			if (disabled || readonly) {
				return;
			}

			input.blur();
		}

		this.fireCallBacksFunction.call(this, undefined, true);
		this.addAriaValues({}, newAria);
	}

    addAriaValues(oldAria, newAria) {
		var checkbox = this.getCheckboxWidget();

		window._lyteUiUtils.setAttribute(checkbox, newAria, oldAria);
	}

    getCheckboxWidget() {
		return this.$node.querySelector('input');
	}

    fireCallBacksFunction(arg1, onrender) {
		var checked = this.getData('ltPropChecked'),
			foi = this.getData('ltPropFireOnInit'), returnval,
			eventCache = this.getData('eventCache'), shouldBreak;

		// This property is very misleading don't use it for anything
		this.$node.checked = checked ? checked : false;

		if (checked && onrender) {
			if (!foi) {
				return;
			}

			var input = this.$node.querySelector('input');
			if (this.getMethods('onBeforeChecked')) {
				this.executeMethod('onBeforeChecked', input, this, eventCache, 'script');
			}

			if (this.getMethods('onChecked')) {
				this.executeMethod('onChecked', input, this, eventCache, 'script')
			}

			if (this.getMethods('onChanged')) {
				this.executeMethod('onChanged', input, this, eventCache, 'script', this.getData( 'ltPropChecked' ) )
			}
		}
		else if (this.$node.checked && !onrender) {
			var input = this.$node.querySelector('input');

			if (!this.clicked) {
				this.setData('preventRefire', true);

				if (this.getMethods('onBeforeChecked')) {

					this.data.ltPropChecked = false;
					input.checked = false;

					// can return undefined or false
					shouldBreak = this.executeMethod('onBeforeChecked', input, this, eventCache, this.eventType()) === false;

					if (shouldBreak) {
						if (this.isCheckedLbound()) {
							this.setData('handleLbind', true);
						}
						else {

							// I am doing this so that the framework will set the checked attribute
							this.data.ltPropChecked = true;
							this.setData('internalChange', true);
							this.setData('ltPropChecked', false);
						}

						this.setData('preventRefire', false);

						return;
					}
					else {
						this.data.ltPropChecked = true;
						input.checked = true;
					}
				}

				this.setData('preventRefire', false);
			}

			if (this.getMethods('onChecked')) {
				this.executeMethod('onChecked', input, this, eventCache, this.eventType());
			}

			this.toggleClass( _lyteCbox.checkedClass );

			if (this.getMethods('onChanged')) {
				this.executeMethod('onChanged', input, this, eventCache, this.eventType(), this.getData( 'ltPropChecked' ) );
			}

			window._lyteUiUtils.dispatchEvent( 'checkboxchange', this.$node, { originalEvent: eventCache } );
		}
		else if (!this.$node.checked && !onrender) {
			var input = this.$node.querySelector('input');

			if (!this.clicked) {
				this.setData('preventRefire', true);
				// this.setData( 'ltPropChecked', true );

				if (this.getMethods('onBeforeUnchecked')) {

					this.data.ltPropChecked = true;
					input.checked = true;

					shouldBreak = this.executeMethod('onBeforeUnchecked', input, this, eventCache, this.eventType()) === false;

					if (shouldBreak) {
						if (this.isCheckedLbound()) {
							this.setData('handleLbind', true);
						}
						else {
							this.data.ltPropChecked = false;
							this.setData('internalChange', true);
							this.setData('ltPropChecked', true);
						}

						this.setData('preventRefire', false);

						return;
					}
					else {
						this.data.ltPropChecked = false;
						input.checked = false;
					}
				}

				this.setData('preventRefire', false);
			}

			if (this.getMethods('onUnchecked')) {
				this.executeMethod('onUnchecked', input, this, eventCache, this.eventType());
			}

			this.toggleClass( _lyteCbox.uncheckedClass );

			if (this.getMethods('onChanged')) {
				this.executeMethod('onChanged', input, this, eventCache, this.eventType(), this.getData( 'ltPropChecked' ) );
			}

			window._lyteUiUtils.dispatchEvent( 'checkboxchange', this.$node, { originalEvent: eventCache } );
		}

	}

    // class added only when it is checked/unchecked by user. Not added during initial render. Used to handle animations
    toggleClass(cls) {
		var clsToRemove = cls === _lyteCbox.checkedClass ? _lyteCbox.uncheckedClass : _lyteCbox.checkedClass;

		this.$node.classList.remove(clsToRemove);
		this.$node.classList.add(cls);
	}

    eventType() {
		var isClicked = this.clicked || this.clickFn,
			key = this.eveType;

		if (!isClicked) {
			return 'script';
		}

		return key ? key : 'click';
	}

    isCheckedLbound() {
		if (!this.$node._attributeDetails) {
			return false;
		}

		return this.$node._attributeDetails['lt-prop-checked'] ? !!this.$node._attributeDetails['lt-prop-checked'].isLbind : false;
	}

    isNodeDestroyed() {
		return !this.$node;
	}

    fireClick(event) {
		var input, hasClickHandlerFired = this.getData('sendEvent'),
			disabled = this.getData('ltPropDisabled'), clickEvent;

		this.isTimeoutInitiated = false;

		// sendEvent is going to tell us if the click handler was called or not
		/* fireClick will be called twice during 1 user click
		   hasClickHandlerFired will make sure the checkbox's state is only changed once since sendEvent gets reset in the mup function
		   metaOrShift makes sure this gets triggered only when meta or shift key is pressed
		   So change state once only when meta or shift is pressed in firefox but this can still interfer with lyte-state attribute
		   since the attribute doesn't want the click to get triggered. so mup gets triggered -> we change state -> but no click gets fired
		*/
		if (!this.isNodeDestroyed() && !hasClickHandlerFired && !disabled && this.metaOrShiftPressed) {
			input = this.$node.querySelector('input');
			input.checked = !input.checked;

			// This calls the click function
			clickEvent = new Event('click');
			clickEvent.shiftKey = true;
			input.dispatchEvent(clickEvent);
		}
	}

    static actions(arg1) {
        return Object.assign(super.actions({
            preventInputClick: function (event) {
                if (event.keyCode === 32) {
                    event.preventDefault();
                }
            },

            mup: function (event) {
                var readonly = this.getData( 'ltPropReadonly' );

                this.metaOrShiftPressed = event.metaKey || event.shiftKey;
                this.setData('prevented', false);
                this.setData('sendEvent', false);

                var disabled = this.getData('ltPropDisabled'), checked, returnval;

                if (disabled) {
                    return;
                }

                if( readonly ) {
                    event.preventDefault();
                    return ;
                }

                var ele = this.$node.querySelector('input')
                checked = ele.checked
                if (this.getMethods('onBeforeChecked') && !checked) {
                    returnval = this.executeMethod('onBeforeChecked', ele, this, event, 'click') == false ? false : true;
                    if (!returnval) {
                        this.setData('prevented', true);
                        event.preventDefault();
                    }
                }

                else if (this.getMethods('onBeforeUnchecked') && checked) {
                    returnval = this.executeMethod('onBeforeUnchecked', ele, this, event, 'click') == false ? false : true;
                    if (!returnval) {
                        this.setData('prevented', true)
                        event.preventDefault();
                    }
                }
            },

            prevent: function (event) {
                var se = this.getData('sendEvent'),
                    isFireFox = !!~window.navigator.userAgent.indexOf('Firefox'),
                    isTimeoutInitiated = this.isTimeoutInitiated;

                // Two events originate - one from the user click and another from the browser click
                // We only allow the user click event to bubble up not the browser click

                // In the newer versions of the framework 3 events are originating.?
                if (!se) {
                    event.stopPropagation();
                }

                // Insanely hacky solution to fix firefox bug
                // https://bugzilla.mozilla.org/show_bug.cgi?id=559506
                if (isFireFox && !isTimeoutInitiated ) {
                    this.isTimeoutInitiated = true;
                    setTimeout(this.fireClick.bind(this, event), 0);
                }

            },

            checkBoxClicked: function (event) {

                var readonly = this.getData( 'ltPropReadonly' );

                if( readonly ) {
                    return ;
                }

                this.setData('sendEvent', true);
                this.setData('eventCache', event);
                this.clicked = true
                var input;

                this.focusInput();

                if (this.getData('prevented')) {
                    input = this.$node.querySelector('input');
                    this.setData('prevented', false)
                    this.setData('preventRefire', true)
                    if (input.checked) {
                        input.checked = false
                    }
                    else {
                        input.checked = true
                    }

                    this.setData('preventRefire', false)
                    this.clicked = false
                    this.setData('eventCache', {});
                    return;
                }

                if (this.getData('ltPropDisabled')) {
                    this.clicked = false
                    event.preventDefault()
                    this.setData('eventCache', {});
                    return;
                }

                var checked
                var ele = event.target
                checked = ele.checked;

                // this.setData( 'preventRefire', true );
                this.setData('internalChange', true);

                if (!checked) {
                    this.setData('ltPropChecked', false);
                }
                else {
                    this.setData('ltPropChecked', true);
                }

                // this.setData( 'preventRefire', false );
                // TODO: change this when LN gives his API
                if (this.$node._fR) {
                    this.setData('internalChange', false);

                    if (this.getData('ltPropChecked')) {
                        this.$node.querySelector('input').setAttribute('checked', '');
                    }
                    else {
                        this.$node.querySelector('input').removeAttribute('checked');
                    }
                    this.fireCallBacksFunction({}, false);
                }
                // this.fireCallBacksFunction( {}, false );
                this.setData('eventCache', {});
                this.clicked = false
            }
        }), arg1);
    }

    static observers(arg1) {
        return Object.assign(super.observers({
            ariaObserver: function (change) {
                var oldAria = change.oldValue,
                    newAria = change.newValue;

                this.addAriaValues(oldAria, newAria);
            }.observes('ltPropAriaCheckbox'),

            disabledChange: function () {
                this.reduceOpacity();
            }.observes('ltPropDisabled'),

            typeObs: function () {
                this.setDefaults();
                this.setRandomId();
            }.observes('ltPropType', 'ltPropClass', 'ltPropLabelClass').on('init'),

            labelChangedObserver: function() {
                this.setTooltip();
            }.observes( 'ltPropLabel', 'ltPropTooltipClass', 'ltPropShowTooltip', 'ltPropTooltipConfig' ).on( 'didConnect' ),

            fireCallbacks:function( change, onrender ) {
                var shouldPreventScriptChange = this.getData( 'ltPropPreventCallbackObservers' ),
                internalChange = this.getData( 'internalChange' ),
                currentState = this.getData( 'ltPropChecked' ),
                classToAdd = currentState ? _lyteCbox.checkedClass : _lyteCbox.uncheckedClass;

                this.setData('internalChange', false);

                if (this.getData('preventRefire')) {
                    return;
                }

                if (this.getData('preventObs')) {
                    return;
                }

                if( !internalChange && shouldPreventScriptChange ) {
                    this.toggleClass( classToAdd );
                    return ;
                }

                if (this.getData('handleLbind')) {

                    this.setData('preventObs', true);
                    this.setData('internalChange', true);
                    this.setData('ltPropChecked', !this.getData('ltPropChecked'));
                    this.setData('preventObs', false);

                    this.setData('handleLbind', false);
                    return;
                }

                this.fireCallBacksFunction.call(this, change, onrender);
            }.observes('ltPropChecked'),

            focusCheckbox: function () {
                var shouldFocus = this.getData('ltPropFocus');

                if (shouldFocus) {
                    this.$node.focus();
                }

                this.data.ltPropFocus = false;
            }.observes('ltPropFocus').on('didConnect')
        }), arg1);
    }

    _() {
        _;
    }
}

LyteCheckboxComponent._template = "<template tag-name=\"lyte-checkbox\" onkeydown=\"{{action('preventInputClick',event)}}\" onkeyup=\"{{action('preventInputClick',event)}}\"> <template _new=\"true\" value=\"{{ltPropType}}\" is=\"switch\">     <template case=\"default\" is=\"case\"><label class=\"lyteCheckbox lyteDefault\" onmouseup=\"{{action('mup',event)}}\" onclick=\"{{action('prevent',event)}}\"> <input aria-labelledby=\"{{randomId}}\" type=\"checkbox\" id=\"{{ltPropId}}\" name=\"{{ltPropName}}\" value=\"{{ltPropValue}}\" checked=\"{{ltPropChecked}}\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" disabled=\"{{ltPropDisabled}}\" class=\"\" readonly=\"{{ltPropReadonly}}\" onclick=\"{{action('checkBoxClicked',event)}}\"> <span class=\"{{ltPropFinalClass}}\"> <span class=\"{{ltPropFinalLabelClass}}\" aria-hidden=\"true\" id=\"{{randomId}}\" lyte-label=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-yield yield-name=\"yield\"></lyte-yield> </template><template default=\"\"> {{ltPropLabel}} </template></template> </span> </span> </label></template><template case=\"primary\" is=\"case\"><label class=\"lyteCheckbox lytePrimary\" onmouseup=\"{{action('mup',event)}}\" onclick=\"{{action('prevent',event)}}\"> <input aria-labelledby=\"{{randomId}}\" type=\"checkbox\" id=\"{{ltPropId}}\" name=\"{{ltPropName}}\" value=\"{{ltPropValue}}\" checked=\"{{ltPropChecked}}\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" disabled=\"{{ltPropDisabled}}\" class=\"\" readonly=\"{{ltPropReadonly}}\" onclick=\"{{action('checkBoxClicked',event)}}\"> <span class=\"{{ltPropFinalClass}}\"> <span class=\"{{ltPropFinalLabelClass}}\" id=\"{{randomId}}\" aria-hidden=\"true\" lyte-label=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-yield yield-name=\"yield\"></lyte-yield> </template><template default=\"\"> {{ltPropLabel}} </template></template> </span> </span> </label></template><template case=\"switch\" is=\"case\"><label class=\"\" onmouseup=\"{{action('mup',event)}}\" onclick=\"{{action('prevent',event)}}\"> <input aria-labelledby=\"{{randomId}}\" type=\"checkbox\" id=\"{{ltPropId}}\" name=\"{{ltPropName}}\" value=\"{{ltPropValue}}\" checked=\"{{ltPropChecked}}\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" disabled=\"{{ltPropDisabled}}\" class=\"lyteHide on-off-sw\" readonly=\"{{ltPropReadonly}}\" onclick=\"{{action('checkBoxClicked',event)}}\"> <span class=\"{{ltPropFinalClass}}\"> <span class=\"on-btn\"></span> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropAria}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteCheckboxOffStateLabel lyteCheckboxStateLabel\">{{lyteUiI18n('lyte.checkbox.off')}}</span> <span class=\"lyteCheckboxOnStateLabel lyteCheckboxStateLabel\">{{lyteUiI18n('lyte.checkbox.on')}}</span> </template></template> </span> <span class=\"{{ltPropFinalLabelClass}}\" aria-hidden=\"true\" id=\"{{randomId}}\" lyte-label=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-yield yield-name=\"yield\"></lyte-yield> </template><template default=\"\"> {{ltPropLabel}} </template></template> </span> </label></template><template case=\"slider\" is=\"case\"><label class=\"lyteCheckSliderLabel\" onmouseup=\"{{action('mup',event)}}\" onclick=\"{{action('prevent',event)}}\"> <input aria-labelledby=\"{{randomId}}\" type=\"checkbox\" id=\"{{ltPropId}}\" name=\"{{ltPropName}}\" value=\"{{ltPropValue}}\" checked=\"{{ltPropChecked}}\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" disabled=\"{{ltPropDisabled}}\" class=\"lyteHide\" readonly=\"{{ltPropReadonly}}\" onclick=\"{{action('checkBoxClicked',event)}}\"> <span class=\"{{ltPropFinalClass}}\"> <span class=\"{{ltPropFinalLabelClass}}\" aria-hidden=\"true\" id=\"{{randomId}}\" lyte-label=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-yield yield-name=\"yield\"></lyte-yield> </template><template default=\"\"> {{ltPropLabel}} </template></template> </span> </span> </label></template></template> </template>";;
LyteCheckboxComponent._dynamicNodes = [{"t":"a","p":[1]},{"t":"s","p":[1],"c":{"default":{"dN":[{"t":"a","p":[0],"cn":"default"},{"t":"a","p":[0,1],"cn":"default"},{"t":"a","p":[0,3],"cn":"default"},{"t":"a","p":[0,3,1],"cn":"default"},{"t":"s","p":[0,3,1,1],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"tX","p":[1],"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"primary":{"dN":[{"t":"a","p":[0],"cn":"primary"},{"t":"a","p":[0,1],"cn":"primary"},{"t":"a","p":[0,3],"cn":"primary"},{"t":"a","p":[0,3,1],"cn":"primary"},{"t":"s","p":[0,3,1,1],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"tX","p":[1],"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"primary"}]},"switch":{"dN":[{"t":"a","p":[0],"cn":"switch"},{"t":"a","p":[0,1],"cn":"switch"},{"t":"a","p":[0,3],"cn":"switch"},{"t":"s","p":[0,3,3],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_0"},{"t":"tX","p":[3,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":1,"sibl":[0],"cn":"switch"},{"t":"a","p":[0,5],"cn":"switch"},{"t":"s","p":[0,5,1],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"tX","p":[1],"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"switch"}]},"slider":{"dN":[{"t":"a","p":[0],"cn":"slider"},{"t":"a","p":[0,1],"cn":"slider"},{"t":"a","p":[0,3],"cn":"slider"},{"t":"a","p":[0,3,1],"cn":"slider"},{"t":"s","p":[0,3,1,1],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"tX","p":[1],"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"slider"}]}},"d":{},"dc":{"default":{"dc":[0],"hc":true,"trans":true},"primary":{"dc":[0],"hc":true,"trans":true},"switch":{"dc":[0],"hc":true,"trans":true},"slider":{"dc":[0],"hc":true,"trans":true}},"co":["default","primary","switch","slider"],"hc":true,"trans":true,"in":0},{"type":"dc","trans":true,"hc":true,"p":[0]}];;

LyteCheckboxComponent._observedAttributes = [
    "ltPropType",
    "ltPropId",
    "ltPropDisabled",
    "ltPropChecked",
    "ltPropLabel",
    "ltPropName",
    "ltPropValue",
    "ltPropReadonly",
    "ltPropFireOnInit",
    "ltPropClass",
    "ltPropLabelClass",
    "ltPropTabindex",
    "lyteUnbound",
    "ltPropYield",
    "ltPropAriaCheckbox",
    "ltPropFocus",
    "ltPropPreventCallbackObservers",
    "ltPropDataTabindex",
    "ltPropShowTooltip",
    "ltPropTooltipConfig",
    "ltPropTooltipClass",
    "ltPropAria",
    "randomId"
];

document.addEventListener('keyup', function (event) {
	var keyCode = event.keyCode, node, checked, comp;

	if (keyCode === 32) {

		node = document.activeElement;

		if (node.tagName !== 'INPUT') {
			return;
		}

		while (node.tagName !== 'LYTE-CHECKBOX'
			&& node.tagName !== 'HTML'
		) {
			node = node.parentElement;
		}

		if (node.tagName === 'LYTE-CHECKBOX') {
			// We are calling the checkbox's click because we want all the callbacks to be properly fired.
			// We'll be preventing the default behaviour of the browser in the keyup and keypress events
			node.component.eveType = 'key';
			node.click();
			node.component.eveType = '';
		}
	}
}, true);

/**
 * @syntax nonYielded
 * <lyte-checkbox lt-prop-value="1" lt-prop-label="check me"></lyte-checkbox>
 */

/**
 * @syntax yielded
 * <lyte-checkbox lt-prop-value="1" lt-prop-yield="true">
 *     <template is="registerYield" yield-name="yield">
 *         check me
 *     </template>
 * </lyte-checkbox>
 */



LyteCheckboxComponent.register("lyte-checkbox", {
    hash: "LyteCheckboxComponent_13",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});



/***/ }),

/***/ 99219004:
/*!*************************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-dropdown.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteDropdownComponent": () => (/* binding */ LyteDropdownComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_helpers_helpers_dev_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/helpers/helpers-dev.js */ 16898062);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_plugins_lyte_search_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/plugins/lyte-search.js */ 55123936);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_plugins_lyte_search_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_ui_component_plugins_lyte_search_js__WEBPACK_IMPORTED_MODULE_4__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    },

    "LyteUiComponentComponentRegistry": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry;
    }
});







window._lyteDropdownItemId = 0;
window._lyteDropdownBodyId = 0;

/**
 * Renders a dropdown
 * @component lyte-dropdown
 * @version 1.0.0
 * @utility toggle,resetPosition,open,close
 * @methods onShow,onBeforeShow,onScroll,onPositionChanged,onChange,beforeSelect,onHide,onBeforeHide,onAdd,onBeforeAdd,onRemove,onBeforeRemove,onOptionSelected
 * @dependencies lyte-tooltip
 */

// _preventSetCSS has external depedency - pk - dateselect

class LyteDropdownComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    init() {
		var type = this.getData('ltPropType'),
			sel = this.getData('ltPropSelected');
		this._close = this.closeDrop1.bind(this);

		this._transEnd = this.tranEnd.bind(this);

		if (this.getData('ltPropPreventParentScroll')) {
			this.setData('ltPropFreeze', false);
		}

		if (!this.freezeLayerCreated()) {
			this.createFreezeLayer();
		}

		this.$node.getItem = function( val ) {
			var component = this.component,
			box = this.getDropBox(),
			body = component.getDropBody( box );

			return component.getItem( component.getAllItems( body ), val );
		}

		this.$node.resetPosition = function () {
			var comp = this.component,
				shouldUseSave = comp.getData('ltPropFixPositionOnOpen');

			comp.setCss(false, shouldUseSave);
		}

		// Create toggle function
		this.$node.toggle = function (event, type) {
			var val = event ? event : undefined;
			if (this.component.getData('ltPropDisabled') || this.component.getData('ltPropReadOnly')) {
				return;
			}

			this.component.showHide(val, type, true);
		}

		this.$node.getDropBox = function () {
			var component = this.component;

			return component.getDropBox();
		}

		this.$node.open = function () {
			var component = this.component,
				isOpen = component.getData('ltPropIsOpen');

			if (!isOpen) {
				this.toggle();
			}
		}

		this.$node.close = function () {
			var component = this.component,
				isOpen = this.getData('ltPropIsOpen');

			if (isOpen) {
				this.toggle();
			}

		}

		this.$node.getInitialSelected = function (options) {
			var component = this.component;

			component.setInitialSelected(options);

			return component.getData('ltPropSelected');
		}

		this.$node.getDisplayValue = function () {
			var component = this.component,
				link = component.childComp,
				body = component.getDropBody(link),
				sel = component.getData('ltPropSelected'),
				node;

			if (sel) {
				// node = body.querySelector( '[data-value="' + window._lyteUiUtils.escape( sel ) + '"]' );
				node = component.getItem(component.getAllItems(body), sel);

				if (node) {
					return node.textContent.trim();
				}
			}

			return '';
		}

		this.$node.closeError = function () {
			var component = this.component,
				link = component.childComp,
				drophead = component.getData('drophead'),
				body = component.getDropBody(link),
				nodes = body.querySelectorAll('lyte-drop-item:not(.lyteDropdownActive):not(.lyteSearchHidden)');

			if (nodes.length !== 0) {
				component.closeError(link, drophead);
			}
		}

		this.$node.updateBoxAria = function (key, value) {
			var component = this.component,
				box = component.getDropBox();

			box.setAttribute(key, value);
		}

		this.$node.updateButtonAria = function (key, value) {
			var component = this.component,
				button = component.getAriaButton();

			button.setAttribute(key, value);
		}

		this.$node.updateBodyAria = function (key, value) {
			var component = this.component,
				body = component.getDropBody(component.childComp);

			body.setAttribute(key, value);
		}

		this.$node.setValue = function (value) {
			var component = this.component,
				input = component.getSearchBox();

			if (input && input.setValue) {
				input.setValue(value);
			}
		}

		this.$node.showNoResults = function() {
			var box = this.getDropBox(),
			errorDiv = box.querySelector( '.lyteDropdownNoResult' );

			if( errorDiv ) {
				errorDiv.style.display = 'block';
			}
		}

		this.$node.hideNoResults = function() {
			var box = this.getDropBox(),
			errorDiv = box.querySelector( '.lyteDropdownNoResult' );

			if( errorDiv ) {
				errorDiv.style.display = 'none';
			}
		}

		this.$node.scrollToSelected = function() {
			var component = this.component;

			component.scrollSel();
		}

		this.$node.resetSelected = function() {
			var component = this.component,
			selected = component.getData( 'ltPropSelected' );

			component.setData( 'ltPropSelected', '' );
			component.setData( 'ltPropSelected', selected );
		}


		if (type.indexOf('multiple') !== -1
			|| type.indexOf('multisearch') !== -1
		) {
			this.setData('multiple', true);

			if (!sel) {
				this.setData('ltPropSelected', '[]');
			}

			if (type.indexOf('multisearch') !== -1) {
				this.setData('search', true);
			}

			this.setIterator();
		}
	}

    freezeLayerCreated() {
		return document.getElementById( 'lytedropdownfreezelayer' );
	}

    createFreezeLayer() {
		var freezeLayer;

		freezeLayer = document.createElement('div');
		freezeLayer.setAttribute('id', 'lytedropdownfreezelayer');
		freezeLayer.style.display = 'none';
		freezeLayer.style.opacity = '0.01';
		freezeLayer.style.background = '#fff';

		if( window._lyteUiUtils.appendLocation === 'first' ) {
			document.body.insertBefore( freezeLayer, document.body.children[ 0 ] );
		}
		else {
			document.body.appendChild( freezeLayer );
		}
	}

    getSearchBox() {
		return this.$node.querySelector('.lyteDropdownTextField');
	}

    setIterator() {
		var userValue = this.getData('ltPropUserValue'),
			sysValue = this.getData('ltPropSystemValue');

		this.setData('userValue', userValue ? userValue : 'display');
		this.setData('sysValue', sysValue ? sysValue : 'value');
	}

    didDestroy() {
		var body = this.childComp,
			mut = this.$node.mutobserver,
			freeze = this.getData('ltPropFreeze'),
			scrollsToPrevent = this.getData('ltPropPreventScroll'),
			type = this.getData( 'ltPropType' ),
			tab = this.getElementWithTabIndex();

		window.clearTimeout(this.timeoutIdForOpen);
		window.clearTimeout(this.timeoutIdForClose);
		window.clearTimeout( this.scrollEndId );

		this.popOutOfGlobalStack( this.$node );

		if (body) {

			// If a dropdown is getting destroyed when it is open, then we hide the freeze layer set because of it
			if (!body.classList.contains('lyteDropdownHidden')
				&& freeze
				&& scrollsToPrevent === 'all'
			) {
				document.getElementById('lytedropdownfreezelayer').style.display = 'none';
			}

			if (!body.classList.contains('lyteDropdownHidden') && document.body) {
				document.body.classList.remove('lyteBodyWrapper');
			}

			delete body.origindd;
			body.remove();
		}

		if (mut) {
			mut.disconnect()
		}

		this.disableParentListeners();

		// Flush autoClosed when the autoClosed dropdown is getting destroyed
		if (window._lyteDropdown.autoClosed === this.$node) {
			window._lyteDropdown.autoClosed = null;
		}

		if (window._lyteDropdown.lastDropdownWithAPromise === this.$node) {
			window._lyteDropdown.lastDropdownWithAPromise = null;
		}

		if( type === 'multisearch' && tab ) {
			_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()( tab ).removeSearch();
		}

		delete this.childComp;
		delete this.$node.toggle;
		delete this.$node.element;

		this.$node.mutobserver = null;

		window.clearTimeout(this._FFBodyScrollOnRemove);
		window.clearTimeout(this._FFBodyScrollOnAdd);
	}

    disableParentListeners() {
		var that = this;

		if (this.scrollableParents) {
			this.scrollableParents.off('scroll', this.resetScroll);
			this.scrollableParents.off( 'wheel', this.preventDefaultBehaviour );
			this.scrollableParents.off( 'touchmove', this.preventDefaultBehaviour );
		}

		this.scrollableParents = undefined;

		if (this.lyteScrollBarParents) {

			this.lyteScrollBarParents.each(function (index, item) {

				if (item) {
					item.removeEventListener('touchmove', that.disableLyteScrollBar, true);
					item.removeEventListener('wheel', that.disableLyteScrollBar, true);
				}

			});

			this.lyteScrollBarParents = undefined;
		}

	}

    prerequisites() {
		// Not putting inside fastdom because it causes a jitter
		if (this.data.ltPropAnimate) {
			this._hgtRemoval = true
			// body.style.height = '';
		}
		this.setCss(false, true);
		this.openSlideAnimate();

		if (this.getData('call')) {
			this.childComp.removeAttribute('lyte-hidden');
		}

		this.pushIntoGlobalStack( this.$node );

		this.fireOnShow();

		if (this.shouldFocusFirstFocusableElement()) {
			this.focusFirstFocusableElement();
		}

		this.setData('call', null);
	}

    pushIntoGlobalStack(node) {
		if( window._lyteUiUtils.popupStack && window._lyteUiUtils.popupStack.globalStack ) {
			if( this.alreadyPushed( node ) ) {
				this.popOutOfGlobalStack( node );
			}

			window._lyteUiUtils.popupStack.globalStack.push( {
				childElement: this.getDropBox(),
				focusedElement: document.activeElement,
				parentElement: node
			} );
		}
	}

    alreadyPushed(node) {
		return !!~this.findIndex( node );
	}

    popOutOfGlobalStack(node) {
		if( window._lyteUiUtils.popupStack && window._lyteUiUtils.popupStack.globalStack ) {
			var items = window._lyteUiUtils.popupStack.globalStack;

			var index = this.findIndex( node );

			if( !!~index ) {
				items.splice( index, 1 );
			}
		}
	}

    findIndex(node) {
		var items = window._lyteUiUtils.popupStack.globalStack;

		for( var i = 0; i < items.length; i++ ) {
			if( items[ i ].parentElement === node ) {
				return i;
			}
		}

		return -1;
	}

    shouldFocusFirstFocusableElement() {
		return this.getData('ltPropAllowFocusableElements');
	}

    focusFirstFocusableElement() {
		var element = this.getFirstFocusableElement();

		if (element) {
			element.focus();
		}

	}

    getFirstFocusableElement() {
		var box = this.$node.getDropBox();

		return box.querySelector(window._lyteDropdown.focusableElementsSelector);
	}

    fireOnShow() {
		var ev;

		if (this.getData('call') && this.getMethods('onShow')) {
			ev = this.getData('call');
			ev = ev === true ? undefined : ev;
			this.executeMethod('onShow', ev, this);
		}

		window._lyteUiUtils.dispatchEvent('lytedropdownshow', this.$node);
	}

    // Do a dfs to find the types of dropdown
    getChildren(childs) {
		var head = this.getData('drophead'),
			body = this.getData('dropbody'),
			tag, i = 0, drop = this.$node;

		if (head === 'yield' && body === 'yield') {
			return;
		}

		for (; i < childs.length; i++) {

			tag = childs[i].tagName;
			if (tag === 'LYTE-DROPDOWN'
				|| tag === 'TEMPLATE'
			) {
				continue;
			}

			if (tag === 'LYTE-DROP-BOX') {
				this.setData('dropbody', 'yield');
				drop.querySelector('lyte-drop-box').classList.add('lyteDropdownHidden');
			}
			else if (tag === 'LYTE-DROP-BUTTON') {
				this.setData('drophead', 'yield');
				window._lyteUiUtils.appendChild(drop.querySelector('.lyteDummyEventContainer'), drop.querySelector('lyte-drop-button'))
				i--;
			}
			else {
				this.getChildren(childs[i].children);
			}
		}
	}

    setBoxClass(oldValue) {
		var cls = this.getData('ltPropBoxClass'),
			box = this.childComp || this.$node.querySelector('lyte-drop-box'),
			body = this.getData('dropbody');

		if (body === 'noyield') {
			if (oldValue) {
				_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(box).removeClass(oldValue);
			}

			if (cls) {
				_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(box).addClass(cls);
			}
		}

	}

    setButtonClass(oldValue) {
		var cls = this.getData('ltPropButtonClass'),
			button = this.$node.querySelector('lyte-drop-button');

		if (oldValue) {
			_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(button).removeClass(oldValue);
		}

		if (cls) {
			_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(button).addClass(cls);
		}
	}

    setIconClass() {
		var multiple = this.getData('multiple'),
			dropButton = this.getDropButton(),
			drophead = this.getData('drophead');

		if (!multiple) {
			return;
		}

		if (drophead === 'yield') {
			return;
		}

		if (this.hasIconClassChanged()) {
			dropButton.classList.add('ltDropdownIconNodePresent');
			this.setData('shouldDisplayIcon', true);
		}
		else {
			dropButton.classList.remove('ltDropdownIconNodePresent');
			this.setData('shouldDisplayIcon', false);
		}
	}

    getDropButton() {
		return this.$node.querySelector('lyte-drop-button');
	}

    getActiveElement() {
		var query = this.getData('ltPropActiveElement'), result;

		if (query) {
			result = this.$node.querySelector(query) || this.$node.getDropBox().querySelector(query);
		}

		result = result || this.getAriaButton();

		return result;
	}

    getAriaButton() {
		return this.$node.querySelector('[role="combobox"]');
	}

    hasIconClassChanged() {
		var iconCls = this.getData('ltPropIconClass');

		return iconCls && iconCls !== 'dropdown';
	}

    didConnect() {
		var selList = this.getData('ltPropSelectedList') || [];

		this.determineYieldContents();
		this.setClassAttributes();
		this.calculateSelected = selList.length > 0;
		this.bindEvents();
		this.addCallout();
		this.setSelectedDuringRender();
		this.toggleButtonInteractivity();
		this.toggleDropdownClass();
		// Bad way to trigger an observer
		this.setData('preventDisp', true);
		this.setData('changeItToInvoke', this.getData('changeItToInvoke') + 1);
		this.setData('preventDisp', false);
		this.setSelectedFromList(true);
		this.toggleDropdown();
		this.attachErrorDiv();
		this.showNoResultDiv();
		this.fireAfterRender();
	}

    fireAfterRender() {
		if( this.getMethods( 'onAfterRender' ) ) {
			this.executeMethod( 'onAfterRender', this.$node );
		}
	}

    attachErrorDiv() {
		var errorDiv = this.createErrorDiv(),
		body = this.getDropBody( this.getDropBox() );

		if( errorDiv ) {
			body.appendChild( errorDiv );
		}
	}

    toggleDropdown() {
		var show = this.getData( 'ltPropShow' ),
		drop = this.$node, tab = this.getElementWithTabIndex();

		if ( show ) {
			this.setData( 'ltPropShow', false );
			drop.toggle();

			_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.measure( function() {
				tab.focus();
				var pos = drop.getBoundingClientRect();

				// This doesn't work exactly it can be behind a overflow'd div and still not be visible.
				if (pos.left < 0
					|| pos.top < 0
				) {
					drop.scrollIntoView();
				}
			} );
		}
	}

    toggleButtonInteractivity() {
		var tab = this.getElementWithTabIndex(),
		disabled = this.getData( 'ltPropDisabled' ),
		dataTabIndex = this.getData( 'ltPropDataTabindex' ),
		tabIndex = this.getData( 'ltPropTabindex' );

		if (disabled) {
			this.disableClickableItem(tab);
			tab.setAttribute('tabindex', -1);
			tab.setAttribute('data-tabindex', "");
		}
		else {
			this.enableClickableItem(tab);
			tab.setAttribute('tabindex', tabIndex);
			tab.setAttribute('data-tabindex', dataTabIndex);
		}
	}

    bindEvents() {
		var hover = this.getData( 'ltPropHover' ),
		box = this.getDropBox(),
		body = this.getDropBody( box ),
		type = this.getData( 'ltPropType' ),
		tab;

		if( type === 'multisearch' ) {
			tab = this.getElementWithTabIndex();
			tab && tab.addEventListener( 'keyup', this.fireCheckKey.bind( this ) );
		}

		box.addEventListener('click', function (event) {
			this.processElements(event);
		}.bind(this));

		if (hover) {
			box.addEventListener('mouseout', function (event) {
				this.closeIt(event);
			}.bind(this));
		}

		body.addEventListener('scroll', function (event) {
			this.callOnScroll(event, this);
		}.bind(this));

		box.addEventListener( 'mousemove', this.highlightDropItemsOnHover.bind( this ) );
	}

    determineYieldContents() {
		var dropdownYield = this.$node.querySelector( 'lyte-yield' ),
		head, body;

		this.determine( dropdownYield );

		head = this.getData('drophead');
		body = this.getData('dropbody');

		if (head !== 'yield') {
			this.setData('drophead', head = 'noyield');
		}

		if (body !== 'yield') {
			this.setData('dropbody', body = 'noyield');
		}
	}

    setSelectedDuringRender() {
		var placeholder = this.getData('ltPropPlaceholder'),
		selected = this.getData('ltPropSelected'),
		options = this.getData('ltPropOptions') || [],
		body = this.getData( 'dropbody' ),
		type = this.getData( 'ltPropType' );

		this.setData('preventDisp', true);

		//We need to set the first value in the dropdown as the selected one
		if ( !placeholder && !selected && type !== 'multiple' && type !== 'multisearch' ) {
			if( options.length > 0 ) {
				this.setSelectedFromOptions();
			}
			else if( body === 'yield' ) {
				this.setSelectedFromYield();
			}
			
		}

		this.setData('preventDisp', false);
	}

    setSelectedFromOptions(options) {
		var options = options || this.getData('ltPropOptions') || [],
		firstElement = options[ 0 ],
		flag = false,
		value;

		if (firstElement.constructor == Object) {
			if (Object.keys(firstElement).length == 1) {
				value = firstElement[Object.keys(firstElement)[0]];
				if (value.constructor == Array) {
					flag = true
				}
			}
		}

		
		if (flag) {
			if (Object.prototype.toString.call(value[0]) === '[object Object]') {
				this.setData('ltPropSelected', value[0][this.getData('ltPropSystemValue')]);
			}
			else {
				this.setData('ltPropSelected', value[0]);
			}
		}
		else {
			if (Object.prototype.toString.call(firstElement) === '[object Object]') {
				this.setData('ltPropSelected', firstElement[this.getData('ltPropSystemValue')]);
			}
			else {
				this.setData('ltPropSelected', firstElement);
			}

		}
	}

    setSelectedFromYield() {
		var node = this.getFirstEnabledItem();

		if (node) {
			node.setAttribute('selected', true);
		}
	}

    highlightDropItemsOnHover(event) {
		var cur = event.target,
			curTar = event.currentTarget,
			prev = curTar.querySelector('.lyteDropdownSelection'),

			// This overrides everything
			preventNavigation = this.getData( 'ltPropPreventNavigation' );

		if( preventNavigation ) {
			return ;
		}

		cur = window._lyteDropdown.traverse(cur, ['LYTE-DROP-ITEM']);

		if (this.hasMousePositionNotChanged(event) || cur === prev) {
			return;
		}

		// This will make sure that it is removed for disabled items which have pointer-events:none
		if (prev) {
			prev.classList.remove('lyteDropdownSelection');
		}

		if (!cur || cur.tagName !== 'LYTE-DROP-ITEM') {
			return;
		}

		if (cur.getAttribute('disabled') === 'true') {
			return;
		}

		if (cur) {
			cur.classList.add('lyteDropdownSelection');
			this.getActiveElement().setAttribute('aria-activedescendant', cur.getAttribute('id'));
		}

	}

    createErrorDiv() {
		var isErrorDivYield = this.getData( 'ltPropNoResultYield' ),
		noResultText = this.getData('ltPropNoResult'),
		errorDiv;

		if( !isErrorDivYield ) {
			errorDiv = document.createElement( 'div' );
			errorDiv.setAttribute('class', 'lyteDropdownNoResult');
			errorDiv.textContent = noResultText;
			errorDiv.style.display = 'none';
		}
		
		return errorDiv;
	}

    processElements(event) {
		var elm = event.target,
			mul = this.getData('multiple'),
			search = this.getData('search');

		if (search) {
			this.focusInput();
		}

		elm = window._lyteDropdown.traverse(elm, ['HTML', 'LYTE-DROP-ITEM']);

		if (!elm || elm.tagName === 'HTML') {               //Clicking on header should not call selection code
			return;
		}

		if (elm.getAttribute('disabled') === 'true') {
			return;
		}

		if ( !mul ) {
			this.selectItem( event, elm );
		}
		else {
			this.addItem( event, elm );
		}
	}

    addItem(event, elm) {
		var numberOfItemsGettingAdded = 1, src, ret,
		oldSelected = this.getData('ltPropSelected'),
		that = this;

		if ( this.beforeAddPromiseActive ) {
			return;
		}

		if ( this.checkLimit( numberOfItemsGettingAdded ) ) {
			return;
		}

		src = elm.getAttribute('data-value');

		if (this.getMethods('onBeforeAdd')) {
			ret = this.beforeAdd(event, elm, src);
		}

		if (this.isPromise(ret)) {
			this.beforeAddPromiseActive = true;

			ret.then(function () {
				that.selectItemOfMultiSelect(event, elm, oldSelected);
				that.beforeAddPromiseActive = false;
			}).catch(function (err) {
				console.error(err);
				that.beforeAddPromiseActive = false;
			});
		}
		else {
			if (ret) {
				return;
			}

			this.selectItemOfMultiSelect(event, elm, oldSelected);
		}
	}

    selectItem(event, elm) {
		var link = this.childComp, freeze = this.getData( 'ltPropFreeze' ),
		oldSelected = this.getData( 'ltPropSelected' );

		if ( !this.beforeSelect( event, elm ) ) {
			return;
		}

		this.setData( 'ltPropSelected', elm.getAttribute('data-value') );
		this.optCall(event, this.getData('ltPropSelected'), elm);
		this.fireOnChange(oldSelected, event, elm);

		if ( this.beforeHide( link, event, freeze ) ) {
			return;
		}

		this.closeDrop(link, event, freeze);
	}

    isPromise(obj) {
		return typeof obj === 'object';
	}

    selectItemOfMultiSelect(event, elm, oldSelected) {
		var link = this.childComp,
			elements = link.querySelectorAll('lyte-drop-item'),
			src = elm.getAttribute('data-value'),
			head = this.getData('drophead'),
			type = this.getData('ltPropType'),
			search = this.getData('search'),
			input = this.$node.querySelector('lyte-search') || this.$node.querySelector('input');;

		if (search && input.setValue && !this.isInputEmpty(input)) {
			input.setValue('');
		}

		this.setHighlight(elements, elm);

		this.setData('prev', true);
		elm.setAttribute('selected', 'true');
		this.setData('prev', false);

		elm.classList.add('lyteDropdownActive');

		this.hideGroup(elm);

		// check this things position in code now.
		if (this.getMethods('onAdd')) {
			this.executeMethod('onAdd', event, src, this.getData('ltPropSelected'), this, elm);
		}

		this.showError(link, type, head);

		this.fixBoxPosition();
		this.fireOnChange(oldSelected, event, elm);
	}

    setClassAttributes() {
		this.setBoxClass();
		this.setButtonClass();
		this.setIconClass();
		this.setClassForRemoveIcon();
	}

    setClassForRemoveIcon() {
		var shouldUseRemoveIcon = this.getData('ltPropShowRemoveIcon') && this.getData('ltPropSelected');

		if (shouldUseRemoveIcon) {
			this.$node.classList.add('lyteDropdownWithDeselectIcon');
		}
		else {
			this.$node.classList.remove('lyteDropdownWithDeselectIcon');
		}
	}

    addCallout() {
		var span, box = this.getDropBox();

		span = document.createElement('span');
		span.setAttribute('class', 'lyteArrow');
		box.insertBefore(span, box.children[0]);
	}

    addTabIndexForYieldedMultisearch() {
		var type = this.getData('ltPropType'),
			drophead = this.getData('drophead'),
			tabIndexElement = this.$node.querySelector('input'),
			index = this.getData('ltPropTabindex'),
			dataIndex = this.getData('ltPropDataTabindex'),
			isDisabled = this.getData('ltPropDisabled');

		if (tabIndexElement && drophead === 'yield' && type === 'multisearch' && !isDisabled) {
			tabIndexElement.setAttribute('tabindex', index);
			tabIndexElement.setAttribute('data-tabindex', dataIndex);
		}
	}

    getElementWithTabIndex() {
		return this.$node.querySelector('[tabindex]') || this.$node.querySelector('input');
	}

    getFirstEnabledItem() {
		var body = this.getDropBody(this.childComp),
			items = body.querySelectorAll('lyte-drop-item'),
			disabledList = this.getData('ltPropDisabledList') || [];

		for (var i = 0; i < items.length; i++) {
			if (!~disabledList.indexOf(items[i].getAttribute('data-value'))) {
				return items[i];
			}
		}
	}

    hasMousePositionNotChanged(event) {
		var curClientX = event.clientX,
			curClientY = event.clientY,
			prevClientX = this.prevClientX,
			prevClientY = this.prevClientY;

		this.prevClientX = curClientX;
		this.prevClientY = curClientY;

		if (prevClientX === curClientX && prevClientY === curClientY) {
			return true;
		}

		return false;
	}

    tranEnd(evt) {
		var box = this.childComp,
			isAnimate = this.getData('ltPropAnimate'),
			body = this.data.ltPropAnimateBox ? box : this.getDropBody(box);

		window.clearTimeout(this.timeoutIdForOpen)

		if (isAnimate) {
			body.style.height = 'auto';
		}

		box.classList.remove('lyteAnimate', 'lyteDropBoxAnimate');
		box.removeEventListener('transitionend', this._transEnd)
		delete this._prevent;
		delete this._preventSetcss;
		delete this._preventMutObs;

		// Hidden method
		if (this.getMethods('onAnimationEnd')) {
			this.executeMethod('onAnimationEnd', evt, this);
		}

		var isFF = this.isFF(),
			isOpen = this.getData('ltPropIsOpen');

		if (!isOpen) {
			return;
		}

		if (isFF && this.isBodyScrollable()) {
			this.addProperScrollbar();
		}
		else if (isFF && !this.isBodyScrollable()) {
			this.removeScrollbar();
		}
	}

    openSlideAnimate() {
		if (this.getData('ltPropAnimate')) {
			if (this._preventSetcss) {
				return
			}

			if (this._preventAnimate) {
				return;
			}

			this._preventAnimate = true;
			this._preventSetcss = true
			this._preventMutObs = true
			var box = this.childComp ? this.childComp : this.$node.querySelector('lyte-drop-box'),
				isBoxAnimate = this.data.ltPropAnimateBox,
				elem = isBoxAnimate ? box : this.getDropBody(this.childComp);
			this._oriStyle = elem.style.height;
			// animation starts from zero
			elem.style.height = 0;
			// for invert animation
			if (['up', 'upLeft', 'upRight'].indexOf(this.getData('pos')) != -1) {
				box.style.top = parseInt(box.style.top) + this._hgt + 'px';
			}

			box.classList.add('lyteAnimate');
			if (isBoxAnimate) {
				box.classList.add('lyteDropBoxAnimate');
			}
			// setTimeout( function(){
			// animation class added
			// box.classList.add( 'lyteAnimate' );
			setTimeout(function () {
				// invert anime starts
				if (['up', 'upLeft', 'upRight'].indexOf(this.getData('pos')) != -1) {
					box.style.top = parseInt(box.style.top) - this._hgt + 'px';
				}
				// height animate starts
				elem.style.height = this._hgt + 'px';
				setTimeout(function () {
					box.addEventListener('transitionend', this._transEnd);

					if (!this._hgt) {
						this.tranEnd.call(this, {})
					}
					else {
						var time = this.getTransitionTime(box);

						// A fail safe incase transitionend doesn't fire
						this.timeoutIdForOpen = setTimeout(this._transEnd, time);
					}
				}.bind(this), 20)
			}.bind(this), 20)
			// }.bind(this), 20)
		}
	}

    getTransitionTime(box) {
		var tolerance = 100,
			duration = window.getComputedStyle(box).transitionDuration,
			res = tolerance;

		if (!!~duration.indexOf('ms')) {
			res += parseInt(duration);
		}
		else {
			// seconds
			res += parseFloat(duration) * 1000;
		}

		return res;
	}

    /**
	 * This is going to determine the structure of the dropdown whether it is a single or dropdown within dropdown
	 * @param {HTMLElement} yd - The yield of the dropdown
	 *
	 */

    determine(yd) {
		var children = yd.children,
			head, box, drop = this.$node, dummy, other;

		other = drop.querySelector('lyte-dropdown');
		if (other) {
			this.getChildren(children);
		}
		else {
			box = yd.querySelector('lyte-drop-box');
			head = yd.querySelector('lyte-drop-button');

			if (head) {
				dummy = drop.querySelector('.lyteDummyEventContainer');
				this.setData('drophead', 'yield');
				window._lyteUiUtils.appendChild(dummy, head);
			}

			if (box) {
				this.setData('dropbody', 'yield');
				box.classList.add('lyteDropdownHidden')
			}
		}
	}

    /**
	 * This is going to add a class to the drop-box for multiselects
	 *
	 */

    addClass() {
		var link = this.childComp;

		link.classList.add('lyteMultiSelectDropdown');
	}

    closeDrop(link, event, freeze, isScroll) {
		window._lyteDropdown.autoClosed = null;
		this.setData('ltPropIsOpen', false);

		if (this._prevent) {
			return
		}
		if (this.getData('ltPropAnimate') && !isScroll) {
			var isBoxAnimate = this.data.ltPropAnimateBox;
			this._prevent = true;
			this._preventSetcss = true;
			this._arguments = arguments;
			this.childComp.classList.add('lyteAnimate');
			if (isBoxAnimate) {
				this.childComp.classList.add('lyteDropBoxAnimate');
			}
			setTimeout(function () {
				var box = this.childComp ? this.childComp : this.$node.querySelector('lyte-drop-box'),
					elem = isBoxAnimate ? box : this.getDropBody(this.childComp);

				elem.style.height = this._hgt + 'px';

				setTimeout(function () {
					// var box = this.childComp ? this.childComp : this.$node.querySelector('lyte-drop-box'),
					// elem = isBoxAnimate ? box : this.getDropBody( this.childComp );

					// height set to zero for hide animation
					elem.style.height = 0;
					// invert animation
					if (['up', 'upLeft', 'upRight'].indexOf(this.getData('pos')) != -1) {
						box.style.top = parseInt(box.style.top) + this._hgt + 'px';
					}

					this._animationStarted = true;
					this._elem = elem;
					this._box = box;
					elem.addEventListener('transitionend', this._close);

					if (!this._hgt) {
						this.closeDrop1.call(this)
					}
					else {
						// A fail safe incase transitionend doesn't fire
						var time = this.getTransitionTime(elem);

						this.timeoutIdForClose = setTimeout(this._close, time);
					}

				}.bind(this), 20);

			}.bind(this), 20)
		} else {
			this.closeDrop1(link, event, freeze)
		}
	}

    closeDrop1(link, event, freeze) {
		var bt = this.$node.querySelector('lyte-drop-button'),
			pos = this.getData('pos'), cls, mul = this.getData('multiple'), body,
			box = this.getDropBox(),
			scrollsToPrevent = this.getData('ltPropPreventScroll'),
			preventParentScroll = this.getData('ltPropPreventParentScroll');

		window.clearTimeout(this.timeoutIdForClose);

		if (this._arguments) {
			link = this._arguments[0], event = this._arguments[1], freeze = this._arguments[2]
			this._elem.style.height = this._oriStyle;
			//animate class removal
			this._box.classList.remove('lyteAnimate', 'lyteDropBoxAnimate');
			this._elem.removeEventListener('transitionend', this._close)
			delete this._hgt; delete this._oriStyle; delete this._arguments; delete this._elem; delete this._box;
		}

		if (mul) {
			body = this.getDropBody(link);
			body.scrollTop = 0;
		}

		link.classList.add('lyteDropdownHidden');
		var freezeLayer = document.querySelector('#lytedropdownfreezelayer')
		if (freeze && freezeLayer && scrollsToPrevent === 'all') {
			document.querySelector('#lytedropdownfreezelayer').style.display = 'none'
		}

		link.style.left = '';
		link.style.top = '';
		link.style.bottom = '';
		link.style.right = '';

		if (freeze || preventParentScroll) {
			document.body.classList.remove('lyteBodyWrapper');
		}

		this.disableParentListeners();

		cls = this.removeClass(bt.classList, pos, 'lyteDropButton', true);

		if (cls) {
			bt.classList.remove(cls);
		}

		this.popOutOfGlobalStack( this.$node );

		if (this.getMethods('onHide')) {
			this.executeMethod('onHide', event, this);
		}

		this.focusButton();

		// This if statement is a bad fix. Added so that the dropdown doesn't throw an error when it is destroyed in on-option-selected and box is empty
		if (box) {
			var posClsToRemove = this.removeClass(box.classList, pos, 'lyteDropdown', true);
		}

		if (posClsToRemove) {
			box.classList.remove(posClsToRemove);
		}

		this.setData('pos', '');
		this.setData('secondaryPosition', '');
		this.setData('savedPositions', {});

		delete this._prevent; delete this._preventSetcss;
		delete this._preventAnimate;
		delete this._animationStarted;
	}

    focusButton() {
		var isSearch = this.getData('search'),
			activeElement = document.activeElement,
			focusOnClose = this.getData('ltPropFocusOnClose');

		/* Not sure about multisearchs */
		if (focusOnClose && !isSearch && !this.isFocusable(activeElement)) {
			this.preventScroll = true;
			this.setData('ltPropFocus', true);
			this.preventScroll = false;
		}
	}

    isFocusable(element) {
		var tabIndex;

		element = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(element);

		if (!window._lyteDropdown.isVisible(element.get(0)) || element.is(":disabled")) {
			return false;
		}

		tabIndex = element.attr("tabindex");
		tabIndex = isNaN(tabIndex) ? -1 : tabIndex;
		return element.is("button, input, select, textarea, a[href], area[href], iframe") || tabIndex > -1;
	}

    callOnScroll(event) {
		var comp = this;

		if (this.getMethods('onScroll')) {
			this.executeMethod('onScroll', event, this);
		}

		if( this.hasScrollEndReached( event ) && this.movingDownward( event ) ) {
			window.clearTimeout( this.scrollEndId );

			this.scrollEndId = setTimeout( function() {
				comp.fireScrollEnd( event );
			}, 50 ); 
		}
	}

    movingDownward(event) {
		var scrollingContainer = event.target,
		scrollTop = scrollingContainer.scrollTop,
		previousScrollTop = this.previousScrollTop || 0;

		this.previousScrollTop = scrollTop;

		return scrollTop - previousScrollTop > 0;
	}

    hasScrollEndReached(event) {
		var scrollingContainer = event.target,
		scrollTop = scrollingContainer.scrollTop,
		height = scrollingContainer.offsetHeight,
		scrollHeight = scrollingContainer.scrollHeight,
		tolerance = 5;

		return height + scrollTop >= ( scrollHeight - tolerance );
	}

    fireScrollEnd(event) {
		if( this.getMethods( 'onScrollEnd' ) ) {
			this.executeMethod( 'onScrollEnd', event );
		}
	}

    addDisabledClass(elements) {
		var i = 0, ele;
		for (; i < elements.length; i++) {
			ele = elements[i];
			if (ele.getAttribute('disabled') == 'true') {
				ele.classList.add('lyteDropdown-disabled');
			}
			else if (ele.classList.contains('lyteDropdown-disabled')) {
				ele.classList.remove('lyteDropdown-disabled');
			}
		}
	}

    showNoResultDiv() {
		var show = this.getData('ltPropShowEmptyMessage'),
			link = this.childComp,
			body = this.getDropBody(link),
			items = body.querySelectorAll('lyte-drop-item'),
			nores = body.querySelector('.lyteDropdownNoResult'),
			multiple = this.getData('multiple');

		if (!nores) {
			return;
		}

		if (show && !multiple) {
			if (items.length === 0) {
				nores.style.display = 'block';
			}
			else {
				nores.style.display = 'none';
			}

		}
		else if (!show && !multiple) {
			nores.style.display = 'none';
		}
	}

    /**
	 * The method is going to specify the class that needs to be removed from the classList
	 * ( Might be buggy when lt-prop-position is changed as it only removes opposites)
	 * @param {classList} arr - The classlist under question
	 * @param {string} pos - The current position of the dropdown
	 * @param {string} prefix - A prefix that is appended to the pos attribute to determine the class
	 * @param {boolean} ignore - Tells whether we must search for the opposites
	 * @param {string} suffix - A suffix added to the end of the class
	 *
	 */


    removeClass(arr, pos, prefix, ignore, suffix) {
		if (!pos) {
			return '';
		}

		suffix = suffix || '';

		var negate = {
			'up': 'Down',
			'down': 'Up',
			'left': 'Right',
			'right': 'Left'
		}, i = 0, len = arr.length,

			ngcls = prefix
				+ (ignore ?
					pos[0].toUpperCase() + pos.substring(1)
					: negate[pos]) + suffix;

		for (; i < len; i++) {
			if (arr[i] === ngcls) {
				return ngcls;
			}
		}

		return '';
	}

    /*
		Calculate left of dropdown container when it has to come below/above the select element when it exceeds window.innerWidth and there is space to the right
	*/
    setLeftExceedForDown(element, container, bcr, width, xscroll) {
		var scrolledLeft = -xscroll,
			elementBCR = this.getButton().getBoundingClientRect(),
			elementLeft = elementBCR.left,
			elementWidth = elementBCR.width,
			elementRight = elementBCR.right,
			total = scrolledLeft + (window.innerWidth - elementRight);

		return total
	}

    /*
		Calculate left of dropdown container when it has to come below/above the select element when it doesn't exceed window.innerWidth
	*/
    alignBoxToButtonLeft(element, bcr, xscroll) {
		var scrolledLeft = xscroll,
			elementBCR = this.getButton().getBoundingClientRect(),
			elementLeft = elementBCR.left,
			total = scrolledLeft + elementLeft;

		return total
	}

    /*
		Calculate top of dropdown container when it has to come above the select element
	*/
    setTopAboveForDown(element, container, bcr, containerbcr, yscroll) {
		var scrolledHeight = -yscroll,
			elementBCR = bcr,
			elementTop = elementBCR.top,
			containerBCR = containerbcr,
			containerHeight = containerBCR.height,
			total = scrolledHeight + (window.innerHeight - elementTop);

		if (this._animationStarted) {
			return scrolledHeight + (window.innerHeight - elementTop);
		}

		return total
	}

    /*
		Calculate top of dropdown container when it has to come below the select element
	*/
    alignBoxTopToButtonBottom(element, bcr, yscroll) {
		var scrolledHeight = yscroll,
			elementBCR = bcr,
			elementTop = elementBCR.top,
			elementHeight = elementBCR.height,
			total = scrolledHeight + elementTop + elementHeight;

		return total
	}

    /*
		Calculate left of dropdown container when it has to come to right of the select element
	*/
    setLeftForRight(element, bcr, xscroll) {
		var scrolledWidth = xscroll,
			elementBCR = bcr,
			elementLeft = elementBCR.left,
			elementWidth = elementBCR.width,
			total = scrolledWidth + elementLeft + elementWidth;

		return total
	}

    /*
		Calculate right of dropdown container when it has to come to left of the select element of right dropdown
	*/
    setRightForRight(element, container, bcr, width, xscroll) {
		var scrolledWidth = -xscroll,
			elementBCR = bcr,
			elementLeft = elementBCR.left,
			total = scrolledWidth + (window.innerWidth - elementLeft);

		return total
	}

    /*
		Calculate top of dropdown container when it has to come to right of dropdown and there is space below
	*/
    setTopForRight(element, bcr, yscroll) {
		var scrolledHeight = yscroll,
			elementBCR = bcr,
			elementTop = elementBCR.top,
			total = scrolledHeight + elementTop;

		return total
	}

    /*
		Calculate top of dropdown container when it has to come to right of dropdown and there is no space below
	*/
    setTopForRightAbove(element, container, bcr, elembcr, yscroll) {
		var scrolledHeight = -yscroll,
			elementBCR = bcr,
			elementTop = elementBCR.top,
			elementHeight = elementBCR.height,
			elementBottom = elementBCR.bottom,
			containerBCR = elembcr,
			containerHeight = containerBCR.height,
			total = scrolledHeight + (window.innerHeight - elementBottom);

		if (this._animationStarted) {
			return scrolledHeight + (window.innerHeight - elementBottom);
		}

		return total
	}

    /**
		Remove wrong arrow and append proper arrow
		@param string correct - the correct class
	*/
    setCorrectClass(cls) {
		var arrow = this.childComp.querySelector('.lyteArrow'),
			list = arrow.classList, i = 0;
		for (; i < list.length; i++) {
			if (list[i] == 'lyteArrow' || list[i] == cls) {
				continue;
			}
			else {
				arrow.classList.remove(list[i]);
				i--;
			}
		}

		arrow.classList.add(cls);
		arrow.classList.add('lyteArrowIcon');
	}

    /**
	 * This going to check if a class has been toggled
	 * @param {MutationRecord} rec - The mutation record
	 * @param {String} cls - The class that needs to be checked
	 *
	 */
    hasClassToggled(rec, cls) {
		var old = rec.oldValue ? rec.oldValue.trim().split(" ") : [],
			node = rec.target,
			olen = old.length,
			nlen = node.classList.length;

		if (((!!~old.indexOf(cls)
			&& !node.classList.contains(cls))
			|| (!~old.indexOf(cls)
				&& node.classList.contains(cls)
			))

			// Only 1 class changed
			&& Math.abs(olen - nlen) === 1
		) {
			return true;
		}

		return false;
	}

    /**
	 * The adjust width is going to adjust the width of the dropdown's body that is going to open
	 * @param {Element} body - The lyte-drop-box
	 * @param {Number} pwidth - The width of the parent Element
	 * @param {Number} bwidth - The width of the body Element
	 *
	 */

    adjustWidth(body, pwidth, bwidth) {
		var boxButtonWidth = this.getData('ltPropBoxButtonWidth'), newWidth;

		if (boxButtonWidth === 'min-button') {
			this.setData('widthAdjusted', 1);

			if (bwidth > pwidth) {
				this.setData('widthAdjusted', 2);
			}

			body.style.minWidth = pwidth + 'px';
		}
		else if (boxButtonWidth === 'auto') {
			this.setData('widthAdjusted', 1);
			body.style.width = 'auto';
			newWidth = body.getBoundingClientRect().width;

			if (newWidth > pwidth) {
				this.setData('widthAdjusted', 2);
			}
		}
		else {
			this.setData('widthAdjusted', 1);
			body.style.width = pwidth + 'px';
			body.style.minWidth = pwidth + 'px';
		}

		return body.getBoundingClientRect().width;

	}

    getFocusableElements() {
		var dropdown = this.$node,
			box = dropdown.getDropBox();

		return box.querySelectorAll(window._lyteDropdown.focusableElementsSelector);
	}

    /**
	 * This is going to return the proper drop-body tag of the dropdown - ( dropdown inside dropdown )
	 * @param {Element} box - The lyte-drop-box of the dropdown
	 *
	 */

    getDropBody(link) {
		var all;

		if (link) {
			all = link.querySelectorAll('lyte-drop-body');
		}
		else {
			all = this.$node.querySelectorAll('lyte-drop-body');
		}

		return all[all.length - 1];
	}

    /**
	 * This is going to remove the previous highlighted element and set a new highlighted element
	 * @param {Element} node - The element to be toggled -> should not be undefined
	 * @param {Element} body - The lyte-drop-body
	 *
	 */

    toggleCurrent(node) {
		var cls = 'lyteDropdownSelection',
			box = this.getDropBox(),
			prev = box && box.querySelector('.' + cls);

		if (prev) {
			prev.classList.remove(cls);
		}

		node.classList.add(cls);
		this.getActiveElement().setAttribute('aria-activedescendant', node.getAttribute('id'));
	}

    /**
	 * This is going to scroll the drop-body to the element above the selected element
	 * This function is also going to highlight the selected value
	 * Note this doesn't work when they are making a request and trying to set the data
	 *
	 */

    scrollSel() {

		var sel = this.getData('ltPropSelected'),
			link = this.childComp,
			body = this.getDropBody(link),
			tmp, highlightedElement,
			all_elems = this.getAllItems(body),
			node = tmp = this.getItem(all_elems, sel) /*body.querySelector( '[data-value="' + window._lyteUiUtils.escape( sel ) + '"]' )*/;

		// Not for multiselects
		if (this.getData('multiple')) {
			// tmp = body.querySelector( 'lyte-drop-item:not(.lyteDropdownActive):not(.lyteSearchHidden)' );
			tmp = all_elems.filter(function (item) {
				return !item.classList.contains('lyteDropdownActive') && !item.classList.contains('lyteSearchHidden');
			})[0];

			if (tmp && !tmp.classList.contains('lyteDropdown-disabled')) {
				this.toggleCurrent(tmp);
			}

			return;
		}

		if ((sel || '').length === 0) {
			body.scrollTop = 0;
		}

		while (node
			&& (node = node.previousElementSibling)
		) {
			if ((node.tagName === 'LYTE-DROP-ITEM'
				|| node.tagName === 'LYTE-DROP-LABEL')
				&& window._lyteDropdown.isVisible(node)
			) {
				break;
			}
		}

		// Scroll to original node if no visible node is found
		node = node ? node : tmp;

		// If we now have a node set the scrollTop
		if (node) {
			body.scrollTop = this.isFirstItem( node ) ? 0 : node.offsetTop;
		}
		else {
			body.scrollTop = 0;
		}

		if (tmp && !tmp.classList.contains('lyteDropdown-disabled')) {
			this.toggleCurrent(tmp);
		}
		else {
			highlightedElement = body.querySelector('.lyteDropdownSelection');

			if (highlightedElement) {
				highlightedElement.classList.remove('lyteDropdownSelection');
			}
		}
	}

    isFirstItem(node) {
		var parent = node.parentElement;

		return parent && parent.firstElementChild === node;
	}

    /**
	 * This is going to clone the object
	 * @param {Object} obj - the object to be clone
	 *
	 */

    clone(obj) {
		var clone = {};

		for (var key in obj) {
			clone[key] = obj[key];
		}

		return clone;
	}

    isFF() {
		var ua = window.navigator.userAgent;

		return !!~ua.indexOf('Firefox');
	}

    isBodyScrollable() {
		var link = this.childComp,
			body = this.getDropBody(link);

		return body.scrollHeight > body.offsetHeight;
	}

    addProperScrollbar() {
		var link = this.childComp,
			body = this.getDropBody(link);

		if (!body.classList.contains('lyteDropdownFFScroll')) {
			body.classList.add('lyteDropdownFFScroll');
		}

		if (body.classList.contains('lyteDropdownFFZeroScroll')) {
			body.classList.remove('lyteDropdownFFZeroScroll');
		}
	}

    removeScrollbar() {
		var link = this.childComp,
			body = this.getDropBody(link);

		if (!body.classList.contains('lyteDropdownFFZeroScroll')) {
			body.classList.add('lyteDropdownFFZeroScroll');
		}

		if (body.classList.contains('lyteDropdownFFScroll')) {
			body.classList.remove('lyteDropdownFFScroll');
		}
	}

    getButton() {
		return this.$node.element || this.$node.querySelector('lyte-drop-button');
	}

    /* 
		Disallow arrow key navigation(and enter) when there can be multiple focusable elements on the box
		and the current focused element is not the active element. Also I guess activeElement can be empty and then have a value during its lifetime
		We are adding the ltPropPreventNavigation here because this function can prevent the navigation of arrow keys
	*/
    shouldNavigate() {
		var activeElement = this.getData('ltPropActiveElement'),
			currentActiveElement = document.activeElement,
			allowFocusableElements = this.getData('ltPropAllowFocusableElements'),

			// This overrides everything
			preventNavigation = this.getData( 'ltPropPreventNavigation' );

		if( preventNavigation ) {
			return false;
		}

		if (!allowFocusableElements || !activeElement) {
			return true;
		}

		return currentActiveElement.matches(activeElement);
	}

    setVerticalCalloutPosition(width, offsets, doesBoxAndButtonLeftAlign) {
		var link = this.childComp,
		arrow = link.querySelector( '.lyteArrow' ),
		aWidth, tempMarginLeft, tempNum, tempDenom, tempPer;

		aWidth = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
		aWidth = parseFloat(aWidth ? aWidth : '0px');
		tempMarginLeft = window.getComputedStyle(arrow, ':before').marginLeft;
		tempMarginLeft = Math.abs(parseFloat(tempMarginLeft ? tempMarginLeft : '0px'));

		if( doesBoxAndButtonLeftAlign ) {
			tempNum = offsets.width / 2 - aWidth + tempMarginLeft; // We removed arrow.offsetWidth because it was giving width as 0 px
		} else {
			tempNum = width - (offsets.width / 2) - aWidth + tempMarginLeft; // We removed arrow.offsetWidth because it was giving width as 0 px
		}
		
		tempDenom = width / 100;
		tempPer = tempNum / tempDenom;

		arrow.style.left = tempPer + '%';
	}

    setHorizontalCalloutPosition(drop, offsets, doesBoxAndButtonTopAlign) {
		var link = this.childComp,
		arrow = link.querySelector( '.lyteArrow' ),
		aHeight, tempMarginTop, tempNum, tempDenom, tempPer;

		aHeight = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
		aHeight = parseFloat(aHeight ? aHeight : '0px');
		tempMarginTop = window.getComputedStyle(arrow, ':before').marginTop;
		tempMarginTop = Math.abs(parseFloat(tempMarginTop ? tempMarginTop : '0px'));

		if( doesBoxAndButtonTopAlign ) {
			tempNum = ((offsets.height / 2) - aHeight + tempMarginTop) * 100;
		} 
		else {
			tempNum = (drop.height - offsets.height / 2 - aHeight + tempMarginTop) * 100;
		}

		tempDenom = drop.height;
		tempPer = tempNum / tempDenom;
		arrow.style.top = tempPer + '%';
	}

    clearPositionValues() {
		var link = this.childComp;

		link.style.left = '';
		link.style.top = '';
		link.style.bottom = '';
		link.style.right = '';
	}

    setPositionFlags(primaryPosition, secondaryPosition) {
		this.setData( 'pos', primaryPosition );
		this.setData( 'secondaryPosition', secondaryPosition );
	}

    exceedsBottomBoundary(preferredPosition, offsets, drop, scopeBoundary) {
		if( preferredPosition !== 'right' && preferredPosition !== 'left' ) {
			return offsets.top + offsets.height + drop.height > scopeBoundary.bottom;
		}

		return offsets.top + drop.height > scopeBoundary.bottom;
		
	}

    exceedsTopBoundary(offsets, drop, scopeBoundary) {
		return offsets.top - drop.height < scopeBoundary.top;
	}

    findPrimaryVerticalPosition(preferredPosition, offsets, drop, scopeBoundary) {
		if( preferredPosition === 'down' ) {
			if( this.exceedsBottomBoundary( preferredPosition, offsets, drop, scopeBoundary ) && !this.exceedsTopBoundary( offsets, drop, scopeBoundary ) ) {
				return false
			}
			
			return true;
		}

		if( preferredPosition === 'up' ) {
			if( this.exceedsTopBoundary( offsets, drop, scopeBoundary ) && !this.exceedsBottomBoundary( preferredPosition, offsets, drop, scopeBoundary ) ) {
				return false;
			}
			
			return true;
		}
	}

    findSecondaryVerticalPosition(preferredPosition, offsets, drop, scopeBoundary) {
		if ( this.exceedsBottomBoundary( preferredPosition, offsets, drop, scopeBoundary ) ) {
			return false;
		}
		
		return true;
	}

    /**
	 * Set the CSS for your dropdown
	 * refer commit ID 583ee6ccbeaa6b3729178bf9df0139032b016d19 and previous for the previous stable setCSS function.
	 * commit ID 583ee6ccbeaa6b3729178bf9df0139032b016d19 also gives a better understanding about the hard coded values in this function.
	 */
    setCss(onlyScroll, useSave) {
		var link = this.childComp,

			// An indication that the dropdown has been opened recently and this setcss is called for the open
			isOpen = this.getData('call');

		if (!useSave) {
			this.setData('savedPositions', {});
		}

		if (!link
			|| link.classList.contains('lyteDropdownHidden')
		) {
			return;
		}

		this.clearPositionValues();
		// Get properties
		var callout = this.getData('ltPropCallout');


		// Get button
		var body = link,
			custom = this.$node.element,
			par = custom ? custom : this.$node.querySelector('lyte-drop-button');

		// Get Geometric propotions
		var save = this.getData('savedPositions'),
			drop = this.clone(body.getBoundingClientRect()),
			bodybcr = this.getDropBody(body).getBoundingClientRect(),
			x = window.pageXOffset || document.documentElement.scrollLeft,
			y = window.pageYOffset || document.documentElement.scrollTop,
			height = body.offsetHeight,
			width = body.offsetWidth,
			arrow = link.querySelector('.lyteArrow'),
			position = this.getData('ltPropPosition'),
			offsets = par.getBoundingClientRect(),
			isFF = this.isFF(),
			scopeBoundary = this.getScopeBoundary();

		if (this.data.ltPropAnimate) {
			this._hgt = this.data.ltPropAnimateBox ? drop.height : bodybcr.height;
			// this.getDropBody( body ).style.height = ( this._hgt ) + 'px';
		}


		// Adjusting width of the body is a one time thing. Atleast that is what we think.
		// Till the smoke clears around this issue we are going to hang on to onlyScroll
		// onlyScroll will probably be deprecated
		if (isOpen) {

			// Hack to prevent the mutation observer from getting fired
			// MutationObserver fired when i added a class attribute to the drop-item.
			// We have cases where it should fire when we add a class to the drop-item
			this._preventClass = true;
			this.scrollSel();

			if (!onlyScroll) {

				// Reset width for later usage
				width = this.adjustWidth(body, offsets.width, width);
				drop.width = width;

				// Set width of span.lyteArrow if there is no callout
				if (!callout) {
					arrow.style.width = offsets.width + 'px';
				}
			}
		}

		// Adding the not check here because it was causing the mutobserver to fire infinitely when resize occured.
		// When resized the dropdown would add the lyteDropBodyCallout again and this keeps happening over and over again.
		if (callout && !body.classList.contains('lyteDropBodyCallout')) {
			body.classList.add('lyteDropBodyCallout')
		}

		if (isFF && this.isBodyScrollable()) {
			this.addProperScrollbar();
		}
		else if (isFF && !this.isBodyScrollable()) {
			this.removeScrollbar();
		}

		// Intialize flags
		var downPos,
			rightPos,
			topPos,
			leftPos,
			rtl = window._lyteUiUtils.getRTL();


		// temp stores
		var tempLeft,
			aHeight,
			aWidth;

		if (position === 'down') {
			downPos = this.findPrimaryVerticalPosition( 'down', offsets, drop, scopeBoundary );

			rightPos = 0;

			// rightPos - 1 -> rtl or no space to the right -> align left
			// rightPos - 2 -> ltr or space available to the right -> align right
			// rightPos - 0/3 -> align to the right if ltr or to the left if rtl
			tempLeft = offsets.left;
			if (tempLeft + offsets.width - width > scopeBoundary.left) {
				rightPos = 1;
			}

			if (offsets.left + width <= scopeBoundary.right) {
				rightPos += 2;
			}

			if (rtl) {
				rightPos = !!(!(rightPos & 1 || !rightPos));
			}
			else {
				rightPos = !!(rightPos & 2 || !rightPos);
			}

			if (useSave && !window._lyteDropdown.isEmpty(save)) {
				rightPos = save.rightPos;
				downPos = save.downPos;
			}
			else if (useSave) {
				save.rightPos = rightPos;
				save.downPos = downPos;

				this.setData('savedPositions', save);
			}

			if (downPos) {
				if (callout) {
					this.setCorrectClass('lyteArrowTop');

					// layout thrashing happens here
					// Removing layout thrashing causes a jitter
					aHeight = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
					body.style.top = this.alignBoxTopToButtonBottom(par, offsets, y) + parseFloat(aHeight ? aHeight : '0px') + 'px';
				}
				else {
					body.style.top = this.alignBoxTopToButtonBottom(par, offsets, y) + 'px';
				}



			}
			else {

				if (callout) {
					this.setCorrectClass('lyteArrowBottom');

					// layout thrashing happens here
					// Removing layout thrashing causes a jitter
					aHeight = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
					body.style.bottom = this.setTopAboveForDown(par, body, offsets, drop, y) + parseFloat(aHeight ? aHeight : '0px') + 'px';
				}
				else {
					body.style.bottom = this.setTopAboveForDown(par, body, offsets, drop, y) + 'px';
				}


			}

			if (rightPos) {
				if (callout) {
					this.setVerticalCalloutPosition( width, offsets, true );
				}

				body.style.left = this.alignBoxToButtonLeft(par, offsets, x) + 'px';
			}
			else {
				if (callout) {
					this.setVerticalCalloutPosition( width, offsets, false );
				}

				body.style.right = this.setLeftExceedForDown(par, body, offsets, width, x) + 'px'
			}

			this.setPositionFlags( downPos ? 'down' : 'up', rightPos ? 'right' : 'left' );

		}
		else if (position === 'right') {
			rightPos = 0;
			if (offsets.left - drop.width > scopeBoundary.left) {
				rightPos = 1;

			}
			if (offsets.left + offsets.width + drop.width < scopeBoundary.right) {
				rightPos += 2;
			}

			if (rtl) {
				rightPos = !!(!(rightPos & 1 || !rightPos));
			}
			else {
				rightPos = !!(rightPos & 2 || !rightPos);
			}

			downPos = this.findSecondaryVerticalPosition( 'right', offsets, drop, scopeBoundary );

			if (useSave && !window._lyteDropdown.isEmpty(save)) {
				rightPos = save.rightPos;
				downPos = save.downPos;
			}
			else if (useSave) {
				save.rightPos = rightPos;
				save.downPos = downPos;

				this.setData('savedPositions', save);
			}

			if (rightPos) {

				if (callout) {
					this.setCorrectClass('lyteArrowLeft');

					// layout thrashing happens here
					// Removing layout thrashing causes a jitter
					aWidth = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
					aWidth = parseFloat(aWidth ? aWidth : '0px');
					body.style.left = this.setLeftForRight(par, offsets, x) + aWidth + 'px'
				}
				else {
					body.style.left = this.setLeftForRight(par, offsets, x) + 'px'
				}
			}
			else {

				if (callout) {
					this.setCorrectClass('lyteArrowRight');

					// layout thrashing happens here
					// Removing layout thrashing causes a jitter
					aWidth = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
					aWidth = parseFloat(aWidth ? aWidth : '0px');
					body.style.right = this.setRightForRight(par, body, offsets, width, x) + aWidth + 'px';
				}
				else {
					body.style.right = this.setRightForRight(par, body, offsets, width, x) + 'px';
				}
			}

			if (downPos) {
				if (callout) {
					this.setHorizontalCalloutPosition( drop, offsets, true );
				}

				body.style.top = this.setTopForRight(par, offsets, y) + 'px'
			}
			else {
				if (callout) {
					this.setHorizontalCalloutPosition( drop, offsets, false );
				}

				body.style.bottom = this.setTopForRightAbove(par, body, offsets, drop, y) + 'px'
			}

			this.setPositionFlags( rightPos ? 'right' : 'left', downPos ? 'down' : 'up' );

		}
		else if (position === 'up') {
			topPos = this.findPrimaryVerticalPosition( 'up', offsets, drop, scopeBoundary );

			rightPos = 0
			if (offsets.left + offsets.width - width > scopeBoundary.left) {
				rightPos = 1;
			}
			if (offsets.left + width <= scopeBoundary.right) {
				rightPos += 2;
			}

			if (rtl) {
				rightPos = !!(!(rightPos & 1 || !rightPos));
			}
			else {
				rightPos = !!(rightPos & 2 || !rightPos);
			}

			if (useSave && !window._lyteDropdown.isEmpty(save)) {
				rightPos = save.rightPos;
				topPos = save.topPos;
			}
			else if (useSave) {
				save.rightPos = rightPos;
				save.topPos = topPos;

				this.setData('savedPositions', save);
			}

			if (topPos) {

				if (callout) {
					this.setCorrectClass('lyteArrowBottom');

					// layout thrashing happens here
					// Removing layout thrashing causes a jitter
					aHeight = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
					aHeight = parseFloat(aHeight ? aHeight : '0px');
					body.style.bottom = this.setTopAboveForDown(par, body, offsets, drop, y) + aHeight + 'px';
				}
				else {
					body.style.bottom = this.setTopAboveForDown(par, body, offsets, drop, y) + 'px';
				}
			}
			else {

				if (callout) {
					this.setCorrectClass('lyteArrowTop');

					// layout thrashing happens here
					// Removing layout thrashing causes a jitter
					aHeight = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
					aHeight = parseFloat(aHeight ? aHeight : '0px');
					body.style.top = this.alignBoxTopToButtonBottom(par, offsets, y) + aHeight + 'px';
				}
				else {
					body.style.top = this.alignBoxTopToButtonBottom(par, offsets, y) + 'px'
				}
			}
			if (rightPos) {
				if (callout) {
					this.setVerticalCalloutPosition( width, offsets, true );
				}

				body.style.left = this.alignBoxToButtonLeft(par, offsets, x) + 'px';
			}
			else {
				if (callout) {
					this.setVerticalCalloutPosition( width, offsets, false );
				}

				body.style.right = this.setLeftExceedForDown(par, body, offsets, width, x) + 'px';
			}

			this.setPositionFlags( topPos ? 'up' : 'down', rightPos ? 'right' : 'left' );

		}
		else if (position === 'left') {
			leftPos = 0;

			if (offsets.left + offsets.width + width < scopeBoundary.right) {
				leftPos = 1;
			}
			if (offsets.left - width > scopeBoundary.left) {
				leftPos += 2;
			}

			if (rtl) {
				leftPos = !!(!(leftPos & 1 || !leftPos));
			}
			else {
				leftPos = !!(leftPos & 2 || !leftPos);
			}

			downPos = this.findSecondaryVerticalPosition( 'left', offsets, drop, scopeBoundary );

			if (useSave && !window._lyteDropdown.isEmpty(save)) {
				leftPos = save.leftPos;
				downPos = save.downPos;
			}
			else if (useSave) {
				save.leftPos = leftPos;
				save.downPos = downPos;

				this.setData('savedPositions', save);
			}

			if (leftPos) {

				if (callout) {
					this.setCorrectClass('lyteArrowRight');

					// layout thrashing happens here
					// Removing layout thrashing causes a jitter
					aWidth = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
					aWidth = parseFloat(aWidth ? aWidth : '0px');
					body.style.right = this.setRightForRight(par, body, offsets, width, x) + aWidth + 'px';
				}
				else {
					body.style.right = this.setRightForRight(par, body, offsets, width, x) + 'px';
				}
			}
			else {

				if (callout) {
					this.setCorrectClass('lyteArrowLeft');

					// layout thrashing happens here
					// Removing layout thrashing causes a jitter
					aWidth = window.getComputedStyle(arrow, ':before').getPropertyValue('border-left-width');
					aWidth = parseFloat(aWidth ? aWidth : '0px');
					body.style.left = this.setLeftForRight(par, offsets, x) + aWidth + 'px';
				}
				else {
					body.style.left = this.setLeftForRight(par, offsets, x) + 'px';
				}
			}

			if (downPos) {
				if (callout) {
					this.setHorizontalCalloutPosition( drop, offsets, true );
				}

				body.style.top = this.setTopForRight(par, offsets, y) + 'px';
			}
			else {
				if (callout) {
					this.setHorizontalCalloutPosition( drop, offsets, false );
				}

				body.style.bottom = this.setTopForRightAbove(par, body, offsets, drop, y) + 'px';
			}

			this.setPositionFlags( leftPos ? 'left' : 'right', downPos ? 'down' : 'up' );

		}

		body.__height = height;
	}

    getScopeBoundary() {
		var scope = this.getData('ltPropScope'),
			element,
			res = {
				left: 0,
				top: 0,
				right: window.innerWidth,
				bottom: window.innerHeight
			}, boundingRects;

		if (scope !== 'window') {
			element = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this.$node).closest(scope).get(0);

			if (element) {
				boundingRects = element.getBoundingClientRect();

				return {
					left: Math.max(0, boundingRects.left),
					top: Math.max(0, boundingRects.top),
					right: Math.min(window.innerWidth, boundingRects.right),
					bottom: Math.min(window.innerHeight, boundingRects.bottom)
				};
			}
		}

		return res;
	}

    setFreezeLayer() {
		var node = document.getElementById('lytedropdownfreezelayer'),
			scrollsToPrevent = this.getData('ltPropPreventScroll');

		if (scrollsToPrevent === 'all') {
			node.style.display = 'block';
			node.classList.add('lyteDropdownZIndex');
		}

		document.body.classList.add('lyteBodyWrapper');
	}

    isInView(element) {
		var body = this.getDropBody(this.childComp),
			containerScrollTop = body.scrollTop,
			containerHeight = body.offsetHeight,
			elementTop = element.offsetTop,
			elementHeight = element.offsetHeight;

		return elementTop >= containerScrollTop && elementTop + elementHeight <= containerScrollTop + containerHeight;
	}

    moveIntoView(element) {
		var body = this.getDropBody(this.childComp),
			containerScrollTop = body.scrollTop,
			elementTop = element.offsetTop;

		if (elementTop <= containerScrollTop) {
			this.moveDown(element);
		}
		else {
			this.moveUp(element);
		}
	}

    moveDown(element) {
		var body = this.getDropBody(this.childComp);

		body.scrollTop = this.isFirstItem( element ) ? 0 : element.offsetTop;
	}

    moveUp(element) {
		var body = this.getDropBody(this.childComp);

		body.scrollTop = element.offsetTop + element.offsetHeight - body.offsetHeight
	}

    scrollIntoView(element, move) {
		var parent = this.getDropBody(this.childComp),
			offsetTop = element.offsetTop,
			scrollT = parent.scrollTop,
			height = parent.getBoundingClientRect().height,
			elementHeight = element.getBoundingClientRect().height;

		if (!parent.contains(element)) {
			// There can be elements inside lyte-drop-footer. So we only scroll to elements inside the body
			return;
		}

		if (!this.isInView(element)) {
			this.moveIntoView(element);
		}
	}

    open() {
		var that = this, link,
			type = this.getData('ltPropType'),
			head = this.getData('drophead'),
			mul = this.getData('multiple'),
			freeze = this.getData('ltPropFreeze'),
			hover = this.getData('ltPropHover');

		link = this.childComp = this.$node.querySelector('lyte-drop-box');

		this.closeError(link, head);
		this.hideNodes();

		if (
			type === 'multisearch'
			&& head !== 'yield'
		) {
			_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this.$node.querySelector('.lyteDropdownTextField')).search({
				scope: link,
				trim: this.getData( 'ltPropTrimSearchText' ),
				searchDelay: undefined,
				hiddenSelector: ".lyteDropdownActive",
				search: 'lyte-drop-item',
				related: 'lyte-drop-group',
				onSearch: function (res, event, value) {
					var i = 0, lk = that.childComp,
						body = that.getDropBody(lk),
						div = body.querySelector('.lyteDropdownNoResult'),
						text = that.getData('ltPropNoResult'), ret;

					if (that.getMethods('onSearch')) {
						ret = that.executeMethod('onSearch', res, event, value, that);
					}

					if (ret === false) {
						return ret;
					}

					body.scrollTop = 0;

					for (; i < res.length; i++) {
						if (!res[i].classList.contains('lyteDropdownActive')) {
							if (div) {
								div.style.display = 'none';
							}

							that.toggleCurrent(res[i], body);

							return;
						}
					}

					if (div.style.display !== 'none') {
						return;
					}

					if (text) {
						div.style.display = 'block';
					}
				}
			});
		}

		link.origindd = this.$node;
		window._lyteUiUtils.appendChild(document.body, link);
		link.classList.remove('lyteDropdownHidden');

		this.preventParentScroll();

		if (freeze && !mul && !hover) {
			this.setFreezeLayer()
		}

	}

    preventParentScroll() {

		if (!this.getData('ltPropPreventParentScroll')) {
			return;
		}

		var parents = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this.$node).parents(), scrollableParents, lyteScrollBarParents, that = this;

		scrollableParents = parents.filter(this.isScrollable);
		lyteScrollBarParents = parents.filter(this.isLyteScrollBar);

		lyteScrollBarParents = lyteScrollBarParents.map(function (index, item) {
			return item.parentNode;
		});

		scrollableParents.each(function (index, item) {
			_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(item).data('lyte-scrollTop', item.scrollTop);
			_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(item).data('lyte-scrollLeft', item.scrollLeft);
		});

		this.scrollableParents = scrollableParents;
		this.lyteScrollBarParents = lyteScrollBarParents;

		this.scrollableParents.on('scroll', this.resetScroll);
		this.scrollableParents.on( 'wheel', this.preventDefaultBehaviour );
		this.scrollableParents.on( 'touchmove', this.preventDefaultBehaviour );


		this.lyteScrollBarParents.each(function (index, item) {
			if (item) {
				item.addEventListener('touchmove', that.disableLyteScrollBar, true);
				item.addEventListener('wheel', that.disableLyteScrollBar, true);
			}
		});

		document.body.classList.add('lyteBodyWrapper');
	}

    disableLyteScrollBar(event) {
		event.stopPropagation();
	}

    isScrollable(index, item) {
		var overflowY = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(item).css('overflow-y'),
			overflowX = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(item).css('overflow-x');

		if ((item.clientWidth < item.scrollWidth && (overflowX === 'auto' || overflowX === 'scroll')) || (item.clientHeight < item.scrollHeight && (overflowY === 'auto' || overflowY === 'scroll'))) {
			return true;
		}

		return false;
	}

    isLyteScrollBar(index, item) {
		return item.classList.contains('lyteScrollBar');
	}

    resetScroll() {
		var scrollTop = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this).data('lyte-scrollTop'),
			scrollLeft = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this).data('lyte-scrollLeft');

		this.scrollTop = scrollTop;
		this.scrollLeft = scrollLeft;
	}

    preventDefaultBehaviour(event) {
		event.preventDefault();
	}

    hideNodes() {
		var link = this.childComp, selected, i = 0, item,
			mul = this.getData('multiple'),
			type = this.getData('ltPropType'),
			head = this.getData('drophead'),
			sel = this.getData('ltPropSelected');

		// Hide the filtered items in the dropdown list
		if (mul && sel && sel.length > 2) {
			if (!link) {
				return;
			}

			try {
				selected = JSON.parse(this.getData('ltPropSelected') || '[]');
			}
			catch (err) {
				console.error('Unable to parse ltPropSelected', err);
				return;
			}

			// Hide new selected values

			var all_elems = this.getAllItems(link);

			for (; i < selected.length; i++) {
				item = this.getItem(all_elems, selected[i]);
				// item = link.querySelector('[data-value="'+ window._lyteUiUtils.escape( selected[ i ] ) +'"]');
				if (item) {
					item.classList.add('lyteDropdownActive');
					this.hideGroup(item);
					this.setData('preventSel', true);
					item.setAttribute('selected', true);
					this.setData('preventSel', false);
				}
			}
		}

		this.showError(link, type, head);
	}

    showNodes(change) {
		var i = 0, j, olen, elm, res,
			link = this.childComp,
			body = this.getDropBody(link),
			mul = this.getData('multiple'),
			type = this.getData('ltPropType'),
			head = this.getData('drophead'),
			all = this.getData('ltPropSelectedList') || [],
			sysValue = this.getData('sysValue'),
			nv = change.newValue,
			ov = change.oldValue;

		if (!mul) {
			return;
		}

		// if link doesn't make sense here: TODO
		if (link) {
			res = body.querySelector('.lyteDropdownNoResult');
		}

		try {
			// Convert to string for obvious reasons
			nv = JSON.parse(nv || '[]').map(function (val) {
				return '' + val;
			});

			// Convert to string for obvious reasons
			ov = JSON.parse(ov || '[]').map(function (val) {
				return '' + val;
			});
		}
		catch (err) {
			console.error('Unable to parse ltPropSelected', err);
			return;
		}

		olen = ov.length;

		var all_elems = this.getAllItems(link);

		for (; i < olen; i++) {
			if (nv.indexOf(ov[i]) === -1) {
				if (link) {
					// elm = link.querySelector( '[data-value="' + window._lyteUiUtils.escape( ov[ i ] ) + '"]' );
					elm = this.getItem(all_elems, ov[i]);

					// show items in dropbox
					if (elm) {
						elm.classList.remove('lyteDropdownActive');
						this.showGroup(elm);
						this.setData('preventSel', true);
						elm.removeAttribute('selected');
						this.setData('preventSel', false);

					}
				}


				// remove items from head
				this.setData('preventSelListObs', true);

				for (j = 0; j < all.length; j++) {
					if (('' + all[j][sysValue]) === ov[i]) {
						this.$addon.arrayUtils(all, 'removeAt', j, 1);
						break;
					}
				}

				this.setData('preventSelListObs', false);

				// May need to add a check to see if the dropdown is open
				if (res
					&& ((type === 'multisearch' && head !== 'yield')
						|| type === 'multiple')
				) {
					res.style.display = 'none';
				}
			}
		}
	}

    toggleDropdownClass() {
		var node = this.$node,
			sel = this.getData('ltPropSelected') || '[]',
			isMultiple = this.getData('multiple');

		if (!isMultiple) {
			return;
		}

		sel = JSON.parse(sel);

		if (sel.length > 0) {
			node.classList.remove('lyteDropNoOptSelected')
		}
		else {
			node.classList.add('lyteDropNoOptSelected');
		}
	}

    first() {
		var type = this.getData('ltPropType');

		this.setData('ltPropShow', true);
		this.setData('ltPropIsOpen', true);
		this.open();

		if (type === 'multisearch') {
			this.focusInput();
		}

		this.setBoxStyles();
	}

    subsequent(link, freeze, mul, hover) {
		var type = this.getData('ltPropType'),
			head = this.getData('drophead');

		this.setData('ltPropIsOpen', true);
		link.classList.remove('lyteDropdownHidden');

		this.preventParentScroll();

		if (freeze && !mul && !hover) {
			this.setFreezeLayer()
		}

		if (type === 'multisearch') {
			this.focusInput();
		}

		this.closeError(link, head);
		this.showError(link, type, head);

		this.setBoxStyles();
	}

    setBoxStyles() {
		var manual = this.getData('ltPropSetPos'),
			dropbox = this.getDropBox();

		if (manual
			|| !dropbox || dropbox.classList.contains('lyteDropdownHidden')
		) {
			return;
		}

		this.prerequisites();
	}

    /**
	 * This invokes the beforeShow method but with a twist
	 * You can now return promises which open the dropdown only when they are resolved
	 * @param {Event} event - The event
	 * @param {boolean} fromTg - Whether it is from the toggle function
	 *
	 *
	 */

    beforeShow(event, fromTg, first) {
		var res, that = this, link = this.getDropBox(),
			freeze = this.getData('ltPropFreeze'),
			mul = this.getData('multiple'),
			hover = this.getData('ltPropHover');

		res = this.executeMethod('onBeforeShow', event, this);

		if (res && res.then) {

			window._lyteDropdown.lastDropdownWithAPromise = this.$node;
			this.setData('blockShowHide', true);

			res
				.then(function (arg) {
					that.setData('blockShowHide', false);

					if (that.isNotLastDropdownWithPromise()) {
						return;
					}

					that.setData('call', fromTg ? true : event);

					if (first) {
						that.first();
					}
					else {
						that.subsequent(link, freeze, mul, hover);
					}
				})
				.catch(function (err) {
					that.setData('blockShowHide', false);
					link.removeAttribute('lyte-hidden');
					console.error(err);
				});
		}
		else if (res !== false) {
			that.setData('call', fromTg ? true : event);
			if (first) {
				that.first();
			}
			else {
				that.subsequent(link, freeze, mul, hover);
			}
		}
		else if (res === false) {
			link.removeAttribute('lyte-hidden');
		}
	}

    // Don't change this fn name because thangagiri/anantha(in lyte-tags) is using it to get the dropbox in one of his components.
    getDropBox() {
		var box = this.childComp;

		if (!box) {
			box = this.$node.querySelector('lyte-drop-box');
		}

		return box;
	}

    isNotLastDropdownWithPromise() {
		var lastDropdown = window._lyteDropdown.lastDropdownWithAPromise;

		return this.$node !== lastDropdown;
	}

    /**
	 * Show the error div when one of the elements get removed
	 * @param link - the drop box
	 * @param head -  the dropdown's head
	 *
	 */

    closeError(link, head) {
		var body = this.getDropBody(link),
			result = body.querySelector('.lyteDropdownNoResult'),
			type = this.getData('ltPropType');

		if (
			result
			&& ((head !== 'yield' && type === 'multisearch')
				|| (type === 'multiple'))

		) {
			result.style.display = 'none';
		}
	}

    /**
	 * Check if the number of selected items has crossed the limit
	 * @param {Number} extra - The extra items to be added to the selected list
	 * @returns {Boolean} - true if it does
	 *
	 */

    checkLimit(extra) {
		var type = this.getData('ltPropType'),
			max = this.getData('ltPropMaxCount'),
			sel = this.getData('ltPropSelected'),
			arr, count;

		if (type !== 'multiple'
			&& type !== 'multisearch'
		) {
			return;
		}

		arr = JSON.parse(sel || '[]'),
			count = arr.length + extra;

		if (max > 0 && count > max) {
			return true;
		}
	}

    /**
	 * Find the data-values of nodes that are going to be removed
	 * @param {sel} - The current selected
	 * @param {Array} nodes - An array of HTMLElements that are going to be removed
	 * @return {Object} - Object containing two keys => removed representing the nodes that are getting removed and selected which represents the current selected
	 *
	 */

    findMarked(sel, nodes) {
		var i, ind, removed = [],
			len = nodes.length;

		try {
			sel = JSON.parse(sel || '[]').map(function (val) {
				return '' + val;
			});
		}
		catch (er) {
			console.error('Unable to parse ltPropSelected', er);
		}

		// Unfortunately sortable can change the order of selected values
		for (i = 0; i < len; i++) {
			ind = sel.indexOf(nodes[i].getAttribute('data-value'));
			removed = removed.concat(sel.splice(ind, 1));
		}

		return {
			removed: removed,
			selected: sel
		};
	}

    /**
	 * Remove the marked values
	 * @param sel - The current selected
	 * @param nodes - nodes that are going to be removed
	 * @param head - whether the content was yielded or not
	 *
	 */

    removeMarked(sel, nodes, head, link) {
		var len = nodes.length,
			i, j, all = this.getData('ltPropSelectedList') || [],
			sysValue = this.getData('sysValue'),
			body, node;

		this.setData('preventSelListObs', true);

		for (i = 0; i < len; i++) {
			for (j = 0; j < all.length; j++) {
				if (('' + all[j][sysValue]) == nodes[i].getAttribute('data-value')) {
					this.$addon.arrayUtils(all, 'removeAt', j);
					break;
				}
			}
		}

		this.setData('preventSelListObs', false);

		body = this.getDropBody(link);

		var all_elems = this.getAllItems(body);

		for (i = 0; i < nodes.length; i++) {
			// node = body.querySelector( '[data-value="'+ window._lyteUiUtils.escape( nodes[ i ].getAttribute( 'data-value' ) ) +'"]' );
			node = this.getItem(all_elems, nodes[i].getAttribute('data-value'));
			if (node) {
				node.classList.remove('lyteDropdownActive');
				node.classList.remove('lyteSearchHidden');
				this.showGroup(node);
				node.removeAttribute('selected');
			}
		}

		this.fixSearchResults();

		this.setData('prev', true);
		this.setData('ltPropSelected', JSON.stringify(sel));
		this.setData('prev', false);

	}

    fixSearchResults() {
		var input = this.$node.querySelector('lyte-search') || this.$node.querySelector('input');

		if (input && input.setValue) {
			input.setValue(input.value || '');
		}
	}

    removeAll(event) {
		var drop = this.$node,
			link = this.childComp,
			head = this.getData('drophead'),
			button = drop.querySelector('lyte-drop-button'),
			nodes = button.querySelectorAll('.lyteDropMark'),
			oldSelected = this.getData('ltPropSelected'),
			sel = this.getData('ltPropSelected'),
			proper, changeObj, ret;

		if (this.getData('ltPropReadOnly')) {
			return;
		}

		changeObj = this.findMarked(sel, nodes);

		proper = this.getData('isKeyDown') ? 'keydown' : 'click';

		// Intentionally sending false because we are already passing in an array
		ret = this.beforeRemove(event, changeObj.removed, proper, nodes);

		if (ret) {
			// Don't know why exactly this is here
			// event.stopPropagation();
			return;
		}

		this.removeMarked(changeObj.selected, nodes, head, link);

		this.closeError(link, head);

		if (this.getMethods('onRemove')) {
			this.executeMethod('onRemove', event, changeObj.removed, this.getData('ltPropSelected'), this, proper, nodes);
		}

		this.fixBoxPosition();

		this.fireOnChange(oldSelected, event, nodes);

		// Don't know why exactly this is here
		// event.stopPropagation();
	}

    /**
	 * Returns true when current clicked node and previous selected node( only 1 ) are same or one of the previous selected nodes is behind. Else returns false
	 *
	 * @param cur - currently selected node
	 */

    relativePosition(cur, prev) {
		var iterator = cur;

		// When the current selected element and the previous selected element is the same
		if (prev.length === 1 && prev[0] === cur) {
			return true;
		}

		// Loop through previous elements to check if it is present
		while ((iterator = iterator.previousElementSibling)) {
			if (iterator.getAttribute('lyte-last')) {
				return true;
			}
		}

		return false;
	}

    shade(node) {
		var front, iterator,
			// There can be dropdowns within dropdown - this guarantees the first button is selected
			present = this.$node
				.querySelector('lyte-drop-button')
				.querySelectorAll('.lyteDropMark');

		// Don't process when a there are more than 1 selected items and the user clicks on one of the selected items
		if (present.length > 1 && node.classList.contains('lyteDropMark')) {
			return;
		}

		iterator = (present.length === 0 || this.relativePosition(node, present)) ? 'previousElementSibling' :
			'nextElementSibling';

		do {
			node.classList.add('lyteDropMark');
		} while ((node = node[iterator])
			&& !node.getAttribute('lyte-last'));
	}

    fireCheckKey() {
		var node = this.$node;

		node.component.checkKey(window.event);
	}

    fireOnChange(oldValue, event, item) {
		var newValue = this.getData('ltPropSelected');

		if (this.hasValueChanged(oldValue) && this.getMethods('onChange')) {
			this.executeMethod('onChange', event, newValue, this, item);
		}
	}

    hasValueChanged(oldValue) {
		var newValue = this.getData('ltPropSelected'),
			isMultiSelects = this.getData('multiple');

		if (isMultiSelects) {
			oldValue = this.stringifyALS(oldValue);
			newValue = this.stringifyALS(newValue);

			// differently ordered selected values are considered different.
			return oldValue !== newValue;
		}
		else {
			return oldValue !== newValue;
		}
	}

    stringifyALS(arrayLikeString) {
		arrayLikeString = arrayLikeString || '[]';

		arrayLikeString = JSON.parse(arrayLikeString).map(function (item) {
			return '' + item;
		});

		return JSON.stringify(arrayLikeString);
	}

    mark(node, shift, single) {



		// When shift is pressed
		if (shift) {
			window._lyteDropdown.unmark(this);
			this.shade(node);
		}
		// When command or control is pressed
		else if (single) {
			window._lyteDropdown.unmark(this);
			node.classList.add('lyteDropMark');
		}
		// When none of the modifier keys are pressed
		else {
			window._lyteDropdown.unmark();
			node.classList.add('lyteDropMark');
		}

		this.setLast(node);
	}

    beforeSelect(event, item) {
		var selected = this.getData('ltPropSelected'), ret = true,
			value = item.getAttribute('data-value');

		if (this.getMethods('beforeSelect')) {
			ret = this.executeMethod('beforeSelect', event, selected, this, item, value);
			ret = ret === false ? false : true;
		}

		return ret;
	}

    /**
	 * This function is going to focus the input in the dropdown when
	 * an item is selected from the multiselect list
	 * an item is removed from the selected list
	 *
	 */

    focusInput() {
		var inp;

		// People have search inside the drop-box in multisearch
		if (!window._lyteUiUtils.isMobile) {
			_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.measure(function () {

				if (!this.$node) {
					return;
				}

				var inp = this.$node.querySelector('input');

				if (inp) {
					inp.focus();
				}
			}, this);
		}
		else {
			inp = this.$node.querySelector('input');

			if (inp) {
				inp.focus();
			}
		}
	}

    /**
	 * This is going to show the no result div
	 * @param {Element} link - The drop-box element
	 * @param {String} type - The dropdown type
	 * @param {String} head - Whether the head is an yield or not
	 *
	 */

    showError(link, type, head) {
		var body = this.getDropBody(link),
			nodes = body.querySelectorAll('lyte-drop-item:not(.lyteDropdownActive):not(.lyteSearchHidden)'),
			res, text = this.getData('ltPropNoResult');

		if (
			text
			&& nodes.length === 0
			&& (res = body.querySelector('.lyteDropdownNoResult'))
			&& ((type === 'multisearch' && head !== 'yield') || (type === 'multiple'))
		) {
			res.style.display = 'block';
		}
	}

    /**
	 * This is going to decide whether to remove or to not remove the current item from the multiselect
	 * @param {Event} event - The event object
	 * @param {String/Array} src - An array or the single data-value getting removed
	 * @param {String} proper - The event which triggered the remove function
	 * @param {Element/Array} node - An array or the single item getting removed
	 * @returns {Boolean} - true to prevent it from getting removed
	 *
	 */

    beforeRemove(event, src, proper, node) {
		var ret;

		if (this.getMethods('onBeforeRemove')) {
			ret = this.executeMethod('onBeforeRemove', event, src, this.getData('ltPropSelected'), this, proper, node);

			ret = ret != false ? false : true;
		}

		return ret;
	}

    /**
	 * This invokes a method which is going to decide whether to add the item into the multiselect or not
	 * @param {Event} event - The event object
	 * @param {Element} elm - The element that was selected
	 * @param {String} src - Its data-value
	 * @returns {Boolean/Object} - returning prevents the element from being selected
	 *
	 */

    beforeAdd(event, elm, src) {
		var preventAddition;

		if (this.getMethods('onBeforeAdd')) {
			preventAddition = this.executeMethod('onBeforeAdd', event, src, this.getData('ltPropSelected'), this, elm);
		}

		if (this.isPromise(preventAddition)) {
			return preventAddition;
		}

		preventAddition = preventAddition != false ? false : true;

		return preventAddition;
	}

    /**
	 * This is going to invoke the beforeHide callback and tell us whether the dropbody should be hidden or not
	 * @param {Event} event - The invoked event object
	 *
	 *
	 */

    beforeHide(link, event, freeze) {
		var res = false;

		if (this.getMethods('onBeforeHide')) {
			res = this.executeMethod('onBeforeHide', event, this);
			if (res && res.then) {
				res
					.then(function () {
						this.closeDrop(link, event, freeze);
					}.bind(this, link, event, freeze))
					.catch(function (err) {
						console.error(err);
					});

				return true;
			}
			res = res != false ? false : true;
		}

		return res;
	}

    // Hidden Method
    beforeScrollClose(event) {
		if (this.getMethods('onBeforeScrollClose')) {
			this.executeMethod('onBeforeScrollClose', event);
		}
	}

    // Hidden Method
    beforeScrollOpen(event) {
		if (this.getMethods('onBeforeScrollOpen')) {
			this.executeMethod('onBeforeScrollOpen', event);
		}
	}

    /**
	 * This is going to set the highlight element of the dropdown
	 * @param {NodeList} elems - All the lyte-drop-items to be traversed
	 * @param {Element} node - Current selected drop-item
	 *
	 */

    setHighlight(elems, node) {
		var i = 0, j, k;

		for (; i < elems.length; i++) {
			if (elems[i].classList.contains('lyteDropdownSelection')) {
				break;
			}
		}

		if (elems[i] && elems[i] === node) {

			k = j = i;
			i = window._lyteDropdown.find(elems, i + 1, true);



			if (i != elems.length) {
				elems[i].classList.add('lyteDropdownSelection');
				this.getActiveElement().setAttribute('aria-activedescendant', elems[i].getAttribute('id'));
			}
			else {
				j = window._lyteDropdown.find(elems, j - 1, false);

				if (j != -1) {
					elems[j].classList.add('lyteDropdownSelection');
					this.getActiveElement().setAttribute('aria-activedescendant', elems[j].getAttribute('id'));
				}
			}

			elems[k].classList.remove('lyteDropdownSelection');
		}

	}

    /**
	 * Sets the current node as the last selected node
	 * so that subsequent selections can proceed from this node ( Also removes the previous last)
	 *
	 * @param node - the node which is going to be the last node that is getting set
	 */

    setLast(node) {
		var prev = document.querySelector('[lyte-last="true"]');

		if (prev) {
			prev.removeAttribute('lyte-last');
		}

		node.setAttribute('lyte-last', true);
	}

    /**
	 * This is going to invoke the onOptionSelected callback
	 * @param {Event} event - The event object
	 * @param {string} sel - The current selected value
	 * @param {Element} elm - The lyte-drop-item that was selected
	 *
	 */

    optCall(event, sel, elm) {
		if (this.getMethods('onOptionSelected')) {
			this.executeMethod('onOptionSelected', event, sel, this, elm);
		}
	}

    /**
	 * Function to set the first value as lt-prop-selected
	 *
	 */

    setInitialSelected(options) {
		this.setSelectedFromOptions( options );
	}

    setSelectedList() {
		var sel = this.getData('ltPropSelected'),
			selected, selectedList;

		if (!sel) {
			return;
		}

		try {
			selected = JSON.parse(sel || '[]').map(function (val) {
				return '' + val;
			});
		}
		catch (err) {
			console.error('Could not parse ltPropSelected', err);
			return;
		}

		this.buildList(selected);
	}

    buildList(selected) {
		this.setData('preventSelListObs', true);

		for (var i = 0; i < selected.length; i++) {
			if (this.isPresentInList(selected[i])) {
				continue;
			}

			if (this.isOptionsGiven()) {
				this.buildWithOptions(selected[i]);
			}
			else {
				this.buildManually(selected[i]);
			}
		}

		this.setData('preventSelListObs', false);
	}

    isPresentInList(sel) {
		var list = this.getData('ltPropSelectedList') || [],
			sysValue = this.getData('sysValue');

		for (var i = 0; i < list.length; i++) {
			if (('' + list[i][sysValue]) === sel) {
				return true;
			}
		}

		return false;
	}

    isOptionsGiven() {
		var userValue = this.getData('ltPropUserValue'),
			sysValue = this.getData('ltPropSystemValue')

		return userValue || sysValue;
	}

    buildWithOptions(selected) {
		var options = this.getData('ltPropOptions') || [],
			sysValue = this.getData('sysValue'), selectedObj, i = 0;

		while (i < options.length && !selectedObj) {
			if (this.isOptGroup(options[i])) {
				selectedObj = this.getSelectedFromGroup(options[i], selected);
			}
			else if (('' + options[i][sysValue]) === selected) {
				// TODO: Check if same object needs to be pushed or a cloned object needs to be pushed.
				selectedObj = options[i];
			}

			i++;
		}

		if (selectedObj) {
			this.$addon.arrayUtils(this.getData('ltPropSelectedList'), 'push', selectedObj);
		}
	}

    isOptGroup(option) {
		var keys = Object.keys(option),
			length = keys.length;

		return keys.length === 1 && Array.isArray(option[keys[0]]);
	}

    getSelectedFromGroup(group, selected) {
		var key = Object.keys(group)[0],
			sysValue = this.getData('sysValue');

		group = group[key] || [];

		for (var i = 0; i < group.length; i++) {
			if (('' + group[i][sysValue]) === selected) {
				return group[i];
			}
		}
	}

    buildManually(selected) {
		var link = this.childComp,
			parent = link ? link : this.$node.querySelector('lyte-drop-box'),
			element = this.getItem(this.getAllItems(parent), selected),
			// element = parent.querySelector( '[data-value="' + window._lyteUiUtils.escape( selected ) + '"]' ),
			obj = {
				value: selected,
				display: (element || {}).textContent
			};

		if (!obj.display) {
			return;
		}

		this.$addon.arrayUtils(this.getData('ltPropSelectedList'), 'push', obj);
	}

    disableClickableItem(tab) {
		var type = this.getData('ltPropType');

		if (type === 'multisearch') {
			tab = this.getClickableItem(tab);
		}

		if (tab && tab.classList) {
			tab.classList.add('lyteDropdown-disabled');
		}

		this.$node.classList.add('lyteDropdownDisabled');
	}

    enableClickableItem(tab) {
		var type = this.getData('ltPropType');

		if (type === 'multisearch') {
			tab = this.getClickableItem(tab);
		}

		if (tab && tab.classList) {
			tab.classList.remove('lyteDropdown-disabled');
		}

		this.$node.classList.remove('lyteDropdownDisabled');
	}

    getClickableItem(tab) {
		var head = this.getData('drophead');

		if (head === 'noyield') {
			return window._lyteDropdown.traverse(tab, ['HTML', 'LYTE-DROP-BUTTON']);
		}
		else {
			return this.$node.querySelector('.lyteDummyEventContainer');
		}


	}

    hideGroup(item) {
		var group = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(item).parent(), visibleItems;

		if (!group.get(0) || group.get(0).tagName !== 'LYTE-DROP-GROUP') {
			return;
		}

		visibleItems = this.getVisibleItems(group);

		if (visibleItems.length === 0) {
			group.addClass('lyteDropdownHideGroup');
		}
	}

    showGroup(item) {
		var group = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(item).parent(), visibleItems;

		if (!group.get(0) || group.get(0).tagName !== 'LYTE-DROP-GROUP') {
			return;
		}

		visibleItems = this.getVisibleItems(group);

		if (visibleItems.length > 0) {
			group.removeClass('lyteDropdownHideGroup');
		}
	}

    getVisibleItems(group) {
		return group.find('lyte-drop-item:not(.lyteDropdownActive):not(.lyteSearchHidden)');
	}

    setSelectedFromList(isDidConnect) {
		var isMultiple = this.getData('multiple'),
			list, selected, sysValue = this.getData('sysValue'),
			selstr = this.getData('ltPropSelected');

		if (!isMultiple) {
			return;
		}

		list = this.getData('ltPropSelectedList') || [];

		if (isDidConnect
			&& !this.calculateSelected
		) {
			return;
		}

		selected = [];

		for (var i = 0; i < list.length; i++) {
			selected.push('' + list[i][sysValue]);
		}

		this.prevSelectedList = true;
		this.setData('ltPropSelected', JSON.stringify(selected));
		this.prevSelectedList = false;
		this.toggleDropdownClass();
	}

    executeKeyNavigationCallback(item) {
		// Hiding this for now because we don't know it will be useful for anyone outside UI components
		if (this.getMethods('onKeyNavigation')) {
			this.executeMethod('onKeyNavigation', this, item);
		}
	}

    isInputEmpty(input) {
		if (input.tagName === 'LYTE-SEARCH') {
			input = input.querySelector('input');
		}

		if (input && input.value === '') {
			return true;
		}

		return false;
	}

    fixBoxPosition() {
		var shouldUseSave = this.getData('ltPropFixPositionOnOpen');

		this.setCss(true, shouldUseSave);
	}

    showHide(event, eventtype, fromTg) {
		var link = this.childComp,
			freeze = this.getData('ltPropFreeze'),
			mul = this.getData('multiple'),
			type = this.getData('ltPropType'),
			hover = this.getData('ltPropHover'),
			rm = this.getData('ltPropRemoveMultiple'),
			show = this.getData('ltPropShow'), res, cur,
			blockShowHide = this.getData('blockShowHide'),
			isReadOnly = this.getData('ltPropReadOnly'),
			isDisabled = this.getData('ltPropDisabled');

		if (isReadOnly || isDisabled) {
			return;
		}

		if (blockShowHide) {
			return;
		}

		/* Doesn't matter if the onBeforeOpen returns false
		 * trying to open another dropdown when autoClosed is set will flush it
		 * showHide is called from toggle as well
		 */

		window._lyteDropdown.autoClosed = null;

		// Exists to remove multiple selected values from a multiselect using either the meta key or the control key
		if (rm && event && mul) {
			cur = event.target;
			while (cur && cur.tagName !== 'LYTE-DROPDOWN' && !cur.getAttribute('data-value')) {
				cur = cur.parentNode;
			}

			// Node with data-value is clicked so you need to process it
			if (cur && cur.getAttribute('data-value')) {
				this.mark(cur, event.shiftKey, event.ctrlKey || event.metaKey);
				return;
			}
			// The node with data-value is not clicked so this is going to unmark everything
			else {
				_lyteDropdown.unmark();
			}
		}
		// When you click another dropdown whose rm is false
		else {
			_lyteDropdown.unmark();
		}

		// For some unknow reason the dropdown closes when you hover over the select box to prevent this we are doing this and same for the opposite
		if (eventtype == 'enter') {
			if (
				link
				&& !link.classList.contains('lyteDropdownHidden')
			) {
				return;
			}

			this.$node.querySelector('[tabindex]').focus()
		}

		if (eventtype == 'leave') {
			if (
				link
				&& link.classList.contains('lyteDropdownHidden')
			) {
				return;
			}
		}

		this.showNoResultDiv();

		if (!show) {
			if (!link) {
				this.childComp = this.$node.querySelector('lyte-drop-box');
			}

			if (this.childComp) {
				this.childComp.setAttribute('lyte-hidden', '');
			}

			window._lyteUiUtils.dispatchEvent('beforeshow', this.$node, { originalEvent: event });

			if (this.getMethods('onBeforeShow')) {
				this.beforeShow(event, fromTg, true);
			}
			else {
				this.setData('call', fromTg ? true : event);
				this.first();
			}

			if (mul) {
				this.addClass();
			}
		}
		else if (link && link.classList.contains('lyteDropdownHidden')) {
			link.setAttribute('lyte-hidden', '');

			window._lyteUiUtils.dispatchEvent('beforeshow', this.$node, { originalEvent: event });

			if (this.getMethods('onBeforeShow')) {
				this.beforeShow(event, fromTg, false);
			}
			else {
				this.setData('call', fromTg ? true : event);
				this.subsequent(link, freeze, mul, hover);
			}
		}
		else if (link && (fromTg || !mul)) {
			if (this.beforeHide.call(this, link, event, freeze)) {
				return;
			}

			this.closeDrop(link, event, freeze);
		}
		else if (link && type === 'multisearch') {
			this.focusInput();
		}
	}

    checkKey(event) {
		var type = this.getData('ltPropType');
		if (event.keyCode == 9) {
			this.$node.component.showHide(event, event.type);

			if (type == 'multisearch') {
				this.focusInput();
			}
		}
	}

    closeIt(event) {
		var mx = event.clientX,
			my = event.clientY,
			dp = this.$node.querySelector('lyte-drop-button'),
			dpt = dp.getBoundingClientRect().top,
			dph = dp.getBoundingClientRect().height,
			dpl = dp.getBoundingClientRect().left,
			dpw = dp.getBoundingClientRect().width,
			dc = this.childComp,
			dct = dc.getBoundingClientRect().top,
			dch = dc.getBoundingClientRect().height,
			dcl = dc.getBoundingClientRect().left,
			dcw = dc.getBoundingClientRect().width;

		if ((mx > Math.floor(dpl)
			&& mx < Math.floor(dpl + dpw)
			&& my > Math.floor(dpt)
			&& my < Math.floor(dpt + dph))
			|| (mx > Math.floor(dcl)
				&& mx < Math.floor(dcl + dcw)
				&& my > Math.floor(dct)
				&& my < Math.floor(dct + dch)
			)
		) {
			return;
		}

		this.$node.toggle(event, "leave")
	}

    closeFun(event) {
		var link = this.childComp,
			head = this.getData('drophead'),
			rm = this.getData('ltPropRemoveMultiple'),
			oldSelected = this.getData('ltPropSelected'),
			node = event.target, src, sel = this.getData('ltPropSelected'), i = 0,
			res = [], body, end, proper, hide, ret, changeObj;

		while (
			!node.getAttribute('data-value')
			&& node
		) {
			node = node.parentElement
		}

		if (!node) {
			return;
		}

		src = node.getAttribute('data-value')

		proper = this.getData('isKeyDown') ? 'keydown' : 'click';

		ret = this.beforeRemove(event, rm ? [src] : src, proper, rm ? [node] : node);

		if (ret) {
			// Don't know why this is here
			// event.stopPropagation();
			return;
		}

		// This is for inbuilt error display
		this.closeError(link, head);

		changeObj = this.findMarked(sel, [node]);

		this.removeMarked(changeObj.selected, [node], head, link);

		if (this.getMethods('onRemove')) {
			// Return an array of removed values in case of removeMultiple
			// else return a singular value
			this.executeMethod('onRemove', event, rm ? [src] : src, this.getData('ltPropSelected'), this, proper, rm ? [node] : node);
		}

		this.fixBoxPosition();

		this.fireOnChange(oldSelected, event, rm ? [node] : node);

		// Don't know why this is here
		// event.stopPropagation();

	}

    data(arg1) {
		return Object.assign(super.data({
			'shouldDisplayIcon': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),
			'changeItToInvoke': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("number", { "default": 1 }),
			'dummy1': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": true }),
			'dummy2': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": false }),
			'savedPositions': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', { 'default': {} }),

			/**
			 * @componentProperty {boolean} ltPropRemoveMultiple
			 * @default false
			 * @version 1.0.2
			 *
			 */

			'ltPropRemoveMultiple': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'removeMultiple', false) }),
			'ltPropYield': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": false }),

			/**
			 * @componentProperty {default|multiple|multisearch} ltPropType
			 * @default default
			 */

			'ltPropType': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": 'default' }),

			/**
			 * @componentProperty {number} ltPropTabindex
			 * @default 0
			 */

			'ltPropTabindex': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("number", { "default": 0 }),

			/**
			 * @componentProperty {boolean} ltPropShow
			 * @default false
			 *
			 */

			'ltPropShow': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": false }),

			/**
			 * @componentProperty {boolean} ltPropFreeze
			 * @default true
			 *
			 */

			'ltPropFreeze': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'freeze', true) }),

			/**
			 * @componentProperty {array} ltPropOptions
			 * @default []
			 */

			'ltPropOptions': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("array", { "default": [] }),

			/**
			 * @componentProperty {string} ltPropUserValue
			 */

			'ltPropUserValue': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": undefined }),

			/**
			 * @componentProperty {string} ltPropSystemValue
			 */

			'ltPropSystemValue': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": undefined }),

			/**
			 * @componentProperty {up|down|left|right} ltPropPosition
			 * @default down
			 */

			'ltPropPosition': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'position', 'down') }),

			/**
			 * @componentProperty {string} ltPropIconClass
			 * @default dropdown
			 */

			'ltPropIconClass': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'iconClass', 'dropdown') }),

			/**
			 * @componentProperty {string} ltPropSelected
			 * @default ''
			 */

			'ltPropSelected': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": '' }),

			/**
			 * @componentProperty {boolean} ltPropCallout
			 * @default false
			 *
			 */

			'ltPropCallout': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'callout', false) }),

			/**
			 * @componentProperty {string} ltPropPlaceholder
			 * @version 1.0.4
			 */

			'ltPropPlaceholder': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'placeholder', '') }),

			/**
			 * @componentProperty {boolean} ltPropDisabled
			 * @default false
			 *
			 */

			'ltPropDisabled': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": false }),

			/**
			 * @componentProperty {boolean} ltPropHover
			 * @default false
			 *
			 */

			'ltPropHover': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": false }),

			/**
			 * @componentProperty {string} ltPropNoResult
			 * @default No Results Found
			 * @version 2.0.0
			 */

			'ltPropNoResult': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'noResult', window._lyteUiUtils.i18n('no.results.found')) }),

			/**
			 * @componentProperty {number} ltPropMaxCount
			 * @default 0
			 * @version 2.1.0
			 */

			'ltPropMaxCount': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('number', { 'default': 0 }),

			'ltPropInputClass': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": 'lyteSearch' }),

			/**
			 * @typedef {object} boundary
			 * @property {number} left
			 * @property {number} right
			 * @property {number} top
			 * @property {number} bottom
			 */
			/**
			 * @componentProperty {boundary} ltPropBoundary
			 * @default {}
			 */

			'ltPropBoundary': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("object", { "default": {} }),
			'pos': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": '' }),
			'secondaryPosition': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": '' }),
			'firePos': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("number", { "default": 1 }),
			'ltPropAjaxRequest': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("object", { "default": {} }),
			'firstRequest': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": true }),
			'userValue': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string'),
			'sysValue': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string'),

			/**
			 * @componentProperty {string} ltPropDisplayValue
			 * @version 1.0.1
			 */

			'ltPropDisplayValue': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": "", hideAttr: true }),

			/**
			 * @componentProperty {array} ltPropDisabledList
			 * @version 1.0.3
			 * @default []
			 */

			'ltPropDisabledList': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('array', { "default": [] }),

			/**
			 * @componentProperty {boolean} ltPropAnimate
			 * @default false
			 *
			 */

			ltPropAnimate: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default: window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'animate', false) }),
			'ltPropSetPos': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),


			/**
			 * @componentProperty {tooltipConfig} ltPropTooltip
		 * @default { "position" : "bottom", "appearance" : "box","margin" : 5, "keeptooltip" : true}
			 * @version 2.0.0
			 * @component lyte-tooltip ltPropTooltipConfig
			 */

			'ltPropTooltip': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', {
				'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'tooltip', {
					'position': 'bottom',
					'appearance': 'box',
					'margin': 5,
					'keeptooltip': true
				})

			}),
			// 'ltPropContainerClass':Lyte.attr("string",{"default":''}),
			// 'ltPropSlide':Lyte.attr("boolean",{"default": false}),

			/**
			 * @componentProperty {string} ltPropBoxClass
			 * @version 2.2.8
			 */

			'ltPropBoxClass': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'boxClass', '') }),

			/**
			 * @componentProperty {boolean} ltPropIsOpen
			 * @default false
			 *
			 * @version 2.2.8
			 */

			'ltPropIsOpen': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),

			'ltPropFocus': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),

			/**
			 * @componentProperty {boolean} ltPropFixPositionOnOpen
			 * @default false
			 *
			 * @version 2.2.12
			 */

			'ltPropFixPositionOnOpen': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'fixPositionOnOpen', false) }),

			'ltPropForcePlaceholder': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'forcePlaceholder', false) }),

			'ltPropShowEmptyMessage': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),

			'ltPropBoxButtonWidth': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'boxButtonWidth', 'min-button') }),

			'ltPropPreventScroll': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': 'all' }),

			'ltPropScope': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': 'window' }),

			ltPropAnimateBox: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default: window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'animateBox', false) }),

			'ltPropTooltipClass': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'tooltipClass', '') }),

			'ltPropDisplayList': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('array', { 'default': [] }),

			'ltPropSelectedList': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('array', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'selectedList', []) }),

			'ltPropItemSearchType': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': 'contains' }),	//@options contains, startsWith

			'ltPropFocusOnClose': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'focusOnClose', true) }),

			'ltPropButtonClass': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': window._lyteUiUtils.resolveDefaultValue('lyte-dropdown', 'buttonClass', '') }),

			'ltPropDisableItemTooltip': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),

			'ltPropPreventParentScroll': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),

			'ltPropShowRemoveIcon': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),

			'ltPropAriaButton': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', { 'default': {}, watch: true }),

			// Keeping this property hidden for now because we don't know if we need it.
			'ltPropAriaBox': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', { 'default': {}, watch: true }),

			'ltPropAriaBody': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', { 'default': {}, watch: true }),

			'ltPropReadOnly': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),

			// The element that should receive focus when the dropdown is opened. It can be in the button or the body
			'ltPropActiveElement': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': '' }),

			// This is used to allow focusable elements in the body and focustrap them. Also this will be hidden
			'ltPropAllowFocusableElements': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': false }),
			'ltPropDataTabindex': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': "" }),

			/* This is a special property that is used to handle a stupid case(territory dropdown in list view) where they have submenus inside dropdown.
			They have submenus inside dropdown which needs to be opened and navigated through the keyboard. So we prevent our arrow key navigations
			This property should not be revealed to the outside world */
			'ltPropPreventNavigation': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropTrimSearchText': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': true } ),

			// Experimental for now
			'ltPropNoResultYield': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } )

		}), arg1);
	}

    getAllItems(link, __arr) {
		var arr = __arr || [],
			__nodes = link ? link.children : [],
			__len = __nodes.length;

		for (var i = 0; i < __len; i++) {
			var __cur_item = __nodes[i];

			if (/lyte-drop-item/i.test(__cur_item.tagName || "")) {
				arr.push(__cur_item);
			} else {
				this.getAllItems(__cur_item, arr);
			}

		}

		return arr;
	}

    getItem(list, value) {
		var __len = list.length,
			conv = value;

		for (var i = 0; i < __len; i++) {
			var cur = list[i];

			if (cur.getAttribute('data-value') == conv) {
				return cur;
			}
		}

		return null;
	}

    static actions(arg1) {
        return Object.assign(super.actions({
            addFocusClass: function (event) {
                this.getDropButton().classList.add('lyteMultiSearchDropButtonFocused');
            },

            removeFocusClass: function (event) {
                this.getDropButton().classList.remove('lyteMultiSearchDropButtonFocused');
            },

            toolTipConfig: function (button, propName) {
                var width = button.offsetWidth,
                    scrollWidth = button.scrollWidth,
                    config = this.getData('ltPropTooltip');

                propName = propName || 'showToolTip';

                this.setData(propName, (width < scrollWidth) && !window._lyteDropdown.isEmpty(config));
            },

            preventDefault: function (event) {
                if (event.keyCode === 13) {
                    event.preventDefault();
                }
            },

            closeIt: function (event) {
                this.closeIt(event);
            },

            processElements: function (event) {
                this.processElements(event)
            },

            closeFun: function (event) {
                this.closeFun(event);
            },

            checkKey: function (event) {
                this.checkKey(event);
            },

            showHide: function ( event, eventtype, fromTg ) {
                this.showHide( event, eventtype, fromTg );
            }
        }), arg1);
    }

    static observers(arg1) {
        return Object.assign(super.observers({
            iconClassChanged: function () {
                this.setIconClass();
            }.observes('ltPropIconClass'),

            setClassForRemoveIconObs: function () {
                this.setClassForRemoveIcon();
            }.observes('ltPropShowRemoveIcon', 'ltPropSelected'),

            addDataTabindex: function () {
                var drophead = this.getData('drophead'),
                    isDisabled = this.getData('ltPropDisabled'),
                    dataIndex = this.getData('ltPropDataTabindex'),
                    tabIndexElement = this.$node.querySelector('input');
                if (tabIndexElement && drophead === 'yield' && !isDisabled) {
                    tabIndexElement.setAttribute('data-tabindex', dataIndex);
                }
            }.observes('ltPropDataTabIndex'),

            addTabIndex: function () {
                this.addTabIndexForYieldedMultisearch();
            }.observes('ltPropTabindex'),

            changeBoxClass: function (change) {
                var oldValue = change.oldValue;

                this.setBoxClass(oldValue);

            }.observes('ltPropBoxClass'),

            changeButtonClass: function (change) {
                var oldValue = change.oldValue;

                this.setButtonClass(oldValue);

            }.observes('ltPropButtonClass'),

            noResultChanged: function () {
                var link = this.childComp,
                    type = this.getData('ltPropType'),
                    head = this.getData('drophead'),
                    body = this.getDropBody(link),
                    nores = body.querySelector('.lyteDropdownNoResult'),
                    text = this.getData('ltPropNoResult'),
                    link = this.childComp;

                nores.textContent = text;

                if (!text) {
                    nores.style.display = 'none';
                }

                // Hide the no result div if text is empty
                if (link) {
                    this.showError(link, type, head);
                }

            }.observes('ltPropNoResult'),

            // TODO: Fix this
            onChangeInDisabledList: function () {
                var elements = this.childComp ? this.childComp.querySelectorAll('lyte-drop-item') : this.$node.querySelectorAll('lyte-drop-item'),
                    isItemDisabled;

                for (var i = 0; i < elements.length; i++) {
                    isItemDisabled = this.$component.registeredHelpers.lyteUiCheckDisabled(this.getData('ltPropDisabledList') || [], elements[i].dataset.value);

                    if (isItemDisabled === 'true') {
                        elements[i].classList.remove('lyteDropdownSelection');
                        elements[i].setAttribute('disabled', isItemDisabled);
                    }

                    if (isItemDisabled === 'false' && elements[i].hasAttribute('disabled')) {
                        elements[i].removeAttribute('disabled');
                    }
                }
                this.addDisabledClass(elements);

            }.observes('ltPropDisabledList.[]', 'ltPropOptions.[]' ).on('didConnect'),

            /**
             * Fires the position callback and adds and removes classes for the drop-box according to the direction
             *
             */

            firePosCallBack: function () {
                var pos = this.getData('pos'),
                    needCv = this.getData('widthAdjusted');

                if (pos !== '') {
                    // Fast dom removed here because it is causing a bug in ie
                    // $L.fastdom.mutate( function() {
                    var body = this.childComp,
                        bt = this.$node.querySelector('lyte-drop-button'),
                        ngcls = this.removeClass(body.classList, pos, 'lyteDropdown');

                    /* Removing and adding class of the lyte-drop-box */

                    if (ngcls) {
                        this._preventClass = true;
                        body.classList.remove(ngcls);
                    }

                    body.classList.add('lyteDropdown' + pos[0].toUpperCase() + pos.substring(1));

                    /* End */

                    /* Removing and adding class of lyte-drop-button */

                    ngcls = this.removeClass(bt.classList, pos, 'lyteDropButton');

                    if (ngcls) {
                        this._preventClass = true;
                        bt.classList.remove(ngcls);
                    }

                    bt.classList.add('lyteDropButton' + pos[0].toUpperCase() + pos.substring(1));

                    /* End */

                    if (needCv === 2) {
                        body.classList.add('lyteDropdownCurve');
                    }

                    if (this.getMethods('onPositionChanged')) {
                        this.executeMethod('onPositionChanged', pos, this);
                    }
                    // }, this );

                }

            }.observes(
                'pos',
                'firePos'
            ),

            secondaryPositionObserver: function () {
                var pos = this.getData('secondaryPosition') || '';

                if (pos !== '') {
                    var box = this.childComp,
                        classToRemove = this.removeClass(box.classList, pos, 'lyteDropbox', false, 'AlignToButton');

                    if (classToRemove) {
                        box.classList.remove(classToRemove);
                    }

                    this._preventClass = true;  // This preventClass will take care of the classToRemove mut observer fire
                    box.classList.add('lyteDropbox' + pos[0].toUpperCase() + pos.substring(1) + 'AlignToButton');
                }
            }.observes('secondaryPosition'),

            selObs: function (change) {
                var old = change.oldValue;

                if (this.getData('prev')) {
                    return;
                }

                // TODO:
                // When limit crosses we reset the ltPropSelected which causes the other lt-prop-selected to fire
                // That observer fires twice overall but doesn't change the state of the dropdown but we need to cutdown
                // the processing
                if (this.checkLimit(0)) {
                    this.setData('prev', true);
                    this.setData('ltPropSelected', old);
                    this.setData('prev', false);

                    return;
                }

                this.hideNodes();
                this.showNodes(change);
            }.observes('ltPropSelected'),

            /**
             * Function to set an initial value to the dropdown when lt-prop-options is pushed later
             * into the dropdown. When lt-prop-options is empty and new items are pushed in
             * @param change - Old value and new values
             *
             */

            contentChange: function (change) {
                var oldValue = change.oldValue,
                    newValue = change.newValue,
                    sel = this.getData('ltPropSelected'),
                    ph = this.getData('ltPropPlaceholder'),
                    disp = this.getData('ltPropDisplayValue'),
                    body = this.getData('dropbody') === 'yield',

                    // Old value of lt-prop-options should be empty and the new value should be filled
                    initial = (
                        (oldValue && oldValue.length === 0)
                        || !oldValue
                    ) && newValue && newValue.length > 0;

                if (initial && !sel && !ph && !body) {
                    this.setInitialSelected();
                }

                this.showNoResultDiv();
            }.observes('ltPropOptions'),

            // This is going to only process the child nodes
            hideOptionsBasedOnSelected: function () {
                // This is for multiselect
                var link = this.childComp,
                    head = this.getData('drophead'),
                    multiple = this.getData('multiple'),
                    type = this.getData('ltPropType');

                if (link && multiple) {
                    this.hideNodes();

                    // close error will always close the error
                    this.closeError(link, head);

                    // So there is no error div showing now and show error will decide to show it or not based on the displayed items
                    this.showError(link, type, head);
                }
            }.observes('ltPropOptions'),

            selChange: function () {
                var mul = this.getData('multiple'),
                    head = this.getData('drophead'),
                    link = this.childComp,
                    sel = this.getData('ltPropSelected'),
                    disp = this.getData('ltPropDisplayValue'),
                    preventDisp = this.getData('preventDisp'),
                    sels, parent = link ? link : this.$node.querySelector('lyte-drop-box'),
                    body = this.getDropBody(parent),
                    node, i = 0;

                if (this.prevSelectedList) {
                    return;
                }

                if (
                    mul
                ) {
                    this.setSelectedList();
                }
                else if (!mul) {
                    var all_elems = this.getAllItems(parent);

                    // node = parent.querySelector( '[data-value="' + window._lyteUiUtils.escape( sel ) + '"]' );
                    node = this.getItem(all_elems, sel);

                    if (node) {
                        this.toggleCurrent(node);
                    }

                    // Don't remove previous selected=true attribute when it is a multiselect should only remove it when the element is removed from the selected list.
                    sels = parent.querySelectorAll('[selected]');

                    for (; i < sels.length; i++) {
                        if (sels[i].getAttribute('data-value') != sel) {
                            sels[i].removeAttribute('selected');
                        }
                    }

                    if (head !== 'yield') {
                        if (node) {
                            var innerText = node.textContent;

                            if ((disp && !preventDisp) || !disp) {

                                // don't really need the or over here but w.e
                                this.setData('ltPropDisplayValue', (innerText || '').trim());
                            }
                        }
                        else if (!sel && !preventDisp) {
                            this.setData('ltPropDisplayValue', '');
                        }
                    }

                }

                // To set selected to true to the ltPropSelected node
                if (node) {
                    node.setAttribute('selected', 'true');
                }

                this.toggleDropdownClass();

            }.observes(
                'ltPropOptions',
                'ltPropSelected',
                'changeItToInvoke'
            ),

            tabIndexChange: function () {
                this.toggleButtonInteractivity();
            }.observes('ltPropDisabled'),

            focusDropdown: function () {
                var focusableElement = this.getElementWithTabIndex(),
                    shouldFocus = this.getData('ltPropFocus'),
                    isSearch = this.getData('search');

                if (shouldFocus) {
                    if (!isSearch && focusableElement) {
                        focusableElement.focus( { preventScroll: this.preventScroll } );
                    }
                    else if (isSearch) {
                        this.$node.open();
                    }
                }

                this.data.ltPropFocus = false;
            }.observes('ltPropFocus').on('didConnect'),

            showHideEmptyMessage: function () {
                this.showNoResultDiv();
            }.observes('ltPropShowEmptyMessage'),

            setSelectedFromListObs: function () {
                if (this.getData('preventSelListObs')) {
                    return;
                }

                this.setSelectedFromList();
            }.observes('ltPropSelectedList.[]'),

            ariaObserver: function () {
                // TODO: Need to fix the setAttribute oldAria argument passed here
                window._lyteUiUtils.setAttribute(this.getDropBox(), this.getData('ltPropAriaBox') || {}, {});
                window._lyteUiUtils.setAttribute(this.getDropBody(this.childComp), this.getData('ltPropAriaBody') || {}, {});
                window._lyteUiUtils.setAttribute(this.getAriaButton(), this.getData('ltPropAriaButton') || {}, {});
            }.observes('ltPropAriaButton', 'ltPropAriaButton.{}', 'ltPropAriaBox', 'ltPropAriaBox.{}', 'ltPropAriaBody', 'ltPropAriaBody.{}' ).on('didConnect')
        }), arg1);
    }

    _() {
        _;
    }
}

LyteDropdownComponent._template = "<template tag-name=\"lyte-dropdown\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropHover,'==',true)}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(multiple,'==',true)}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(search,'==',true)}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(drophead,'==','noyield')}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-button role=\"combobox\" aria-expanded=\"{{if(ltPropIsOpen,'true','false')}}\" aria-haspopup=\"listbox\"> <div class=\"lyteMultiselect\"> <ul class=\"lyteMultipleSelect\"> <template items=\"{{ltPropSelectedList}}\" item=\"item\" index=\"indexVal\" is=\"for\" _new=\"true\"> <li data-value=\"{{lyteUiReturnValueBy(item,sysValue)}}\"> <span class=\"lyteDropdownVisible\" onmouseenter=\"{{action('toolTipConfig',this,'selToolTip')}}\" lt-prop-title=\"{{if(selToolTip,lyteUiReturnValueBy(item,userValue),'')}}\" lt-prop-tooltip-config=\"{{ltPropTooltip}}\" lt-prop-tooltip-class=\"{{ltPropTooltipClass}}\">{{lyteUiReturnValueBy(item,userValue)}}</span> <lyte-drop-remove class=\"lyteCloseIcon\"></lyte-drop-remove> </li> </template> <li class=\"lyteMultiselectInput\"> <input disabled=\"{{ltPropDisabled}}\" readonly=\"{{ltPropReadOnly}}\" onkeydown=\"{{action('preventDefault',event)}}\" type=\"text\" placeholder=\"{{ltPropPlaceholder}}\" class=\"lyteDropdownTextField\" autocomplete=\"off\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" onclick=\"{{action('showHide',event)}}\" onfocus=\"{{action('addFocusClass',event)}}\" onblur=\"{{action('removeFocusClass',event)}}\"> </li> </ul> </div> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{shouldDisplayIcon}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-icon class=\"{{ltPropIconClass}}\"></lyte-icon> </template></template> </lyte-drop-button> </template><template default=\"\"> </template></template> </template><template default=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(drophead,'==',&quot;noyield&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <div class=\"lyteDummyEventContainer\" role=\"combobox\" aria-haspopup=\"listbox\" aria-expanded=\"{{if(ltPropIsOpen,'true','false')}}\" onclick=\"{{action('showHide',event)}}\" onkeyup=\"{{action('checkKey',event)}}\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\"> <lyte-drop-button> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(expHandlers(ltPropSelectedList.length,'==',0),'&amp;&amp;',expHandlers(ltPropForcePlaceholder,'!'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteDropPlaceholderMultiple\">{{ltPropPlaceholder}}</span> </template></template> <ul class=\"lyteMultipleSelect\"> <template items=\"{{ltPropSelectedList}}\" item=\"item\" index=\"indexVal\" is=\"for\" _new=\"true\"> <li data-value=\"{{lyteUiReturnValueBy(item,sysValue)}}\"> <span class=\"lyteDropdownVisible\" onmouseenter=\"{{action('toolTipConfig',this,'selToolTip')}}\" lt-prop-title=\"{{if(selToolTip,lyteUiReturnValueBy(item,userValue),'')}}\" lt-prop-tooltip-config=\"{{ltPropTooltip}}\" lt-prop-tooltip-class=\"{{ltPropTooltipClass}}\">{{lyteUiReturnValueBy(item,userValue)}}</span> <lyte-drop-remove class=\"lyteCloseIcon\"></lyte-drop-remove> </li> </template> </ul> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropForcePlaceholder}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteDropPlaceholderMultiple\">{{ltPropPlaceholder}}</span> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{shouldDisplayIcon}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-icon class=\"{{ltPropIconClass}}\"></lyte-icon> </template></template> </lyte-drop-button> </div> </template><template default=\"\"> </template></template> </template></template> </template><template default=\"\"> <div onmouseenter=\"{{action('showHide',event,'enter')}}\" role=\"combobox\" aria-haspopup=\"listbox\" aria-expanded=\"{{if(ltPropIsOpen,'true','false')}}\" onmouseleave=\"{{action('closeIt',event)}}\" class=\"lyteDummyEventContainer\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" style=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(drophead,'==',&quot;noyield&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-button> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropDisplayValue}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteMarginRight lyteDropdownLabel\" onmouseenter=\"{{action('toolTipConfig',this,'showToolTip')}}\" lt-prop-title=\"{{if(showToolTip,ltPropDisplayValue,'')}}\" lt-prop-tooltip-config=\"{{ltPropTooltip}}\" lt-prop-tooltip-class=\"{{ltPropTooltipClass}}\">{{ltPropDisplayValue}}</span> </template><template case=\"{{expHandlers(expHandlers(ltPropSelected,'!'),'&amp;&amp;',expHandlers(ltPropDisplayValue,'!'))}}\" is=\"case\" lc-id=\"lc_id_1\"> <span class=\"lyteDropPlaceholderNormal\">{{ltPropPlaceholder}}</span> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropSelected,'&amp;&amp;',ltPropShowRemoveIcon)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-remove class=\"lyteDropdownDeselectIcon\"></lyte-drop-remove> </template></template> <lyte-icon class=\"{{ltPropIconClass}}\"></lyte-icon> </lyte-drop-button> </template><template case=\"{{expHandlers(drophead,'==',&quot;yield&quot;)}}\" is=\"case\" lc-id=\"lc_id_1\"> </template></template> </div> </template></template> </template><template default=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(multiple,'==',true)}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(search,'==',true)}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(drophead,'==','noyield')}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-button onclick=\"{{action('showHide',event)}}\" role=\"combobox\" aria-haspopup=\"listbox\" aria-expanded=\"{{if(ltPropIsOpen,'true','false')}}\"> <div class=\"lyteMultiselect\"> <ul class=\"lyteMultipleSelect\"> <template items=\"{{ltPropSelectedList}}\" item=\"item\" index=\"indexVal\" is=\"for\" _new=\"true\"> <li data-value=\"{{lyteUiReturnValueBy(item,sysValue)}}\"> <span class=\"lyteDropdownVisible\" onmouseenter=\"{{action('toolTipConfig',this,'selToolTip')}}\" lt-prop-title=\"{{if(selToolTip,lyteUiReturnValueBy(item,userValue),'')}}\" lt-prop-tooltip-config=\"{{ltPropTooltip}}\" lt-prop-tooltip-class=\"{{ltPropTooltipClass}}\">{{lyteUiReturnValueBy(item,userValue)}}</span> <lyte-drop-remove class=\"lyteCloseIcon\"></lyte-drop-remove> </li> </template> <li class=\"lyteMultiselectInput\"> <input disabled=\"{{ltPropDisabled}}\" readonly=\"{{ltPropReadOnly}}\" onkeydown=\"{{action('preventDefault',event)}}\" type=\"text\" placeholder=\"{{ltPropPlaceholder}}\" class=\"lyteDropdownTextField\" autocomplete=\"off\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" onfocus=\"{{action('addFocusClass',event)}}\" onblur=\"{{action('removeFocusClass',event)}}\"> </li> </ul> </div> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{shouldDisplayIcon}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-icon class=\"{{ltPropIconClass}}\"></lyte-icon> </template></template> </lyte-drop-button> </template><template default=\"\"> <div class=\"lyteDummyEventContainer\" style=\"\" onclick=\"{{action('showHide',event)}}\" role=\"combobox\" aria-haspopup=\"listbox\" aria-expanded=\"{{if(ltPropIsOpen,'true','false')}}\"> </div> </template></template> </template><template default=\"\"> <div class=\"lyteDummyEventContainer\" onclick=\"{{action('showHide',event)}}\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" role=\"combobox\" aria-haspopup=\"listbox\" aria-expanded=\"{{if(ltPropIsOpen,'true','false')}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(drophead,'==',&quot;noyield&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-button> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(expHandlers(ltPropSelectedList.length,'==',0),'&amp;&amp;',expHandlers(ltPropForcePlaceholder,'!'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteDropPlaceholderMultiple\">{{ltPropPlaceholder}}</span> </template></template> <ul class=\"lyteMultipleSelect\"> <template items=\"{{ltPropSelectedList}}\" item=\"item\" index=\"indexVal\" is=\"for\" _new=\"true\"> <li data-value=\"{{lyteUiReturnValueBy(item,sysValue)}}\"> <span class=\"lyteDropdownVisible\" onmouseenter=\"{{action('toolTipConfig',this,'selToolTip')}}\" lt-prop-title=\"{{if(selToolTip,lyteUiReturnValueBy(item,userValue),'')}}\" lt-prop-tooltip-config=\"{{ltPropTooltip}}\" lt-prop-tooltip-class=\"{{ltPropTooltipClass}}\">{{lyteUiReturnValueBy(item,userValue)}}</span> <lyte-drop-remove class=\"lyteCloseIcon\"></lyte-drop-remove> </li> </template> </ul> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropForcePlaceholder}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteDropPlaceholderMultiple\">{{ltPropPlaceholder}}</span> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{shouldDisplayIcon}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-icon class=\"{{ltPropIconClass}}\"></lyte-icon> </template></template> </lyte-drop-button> </template><template default=\"\"> </template></template> </div> </template></template> </template><template default=\"\"> <div onclick=\"{{action('showHide',event)}}\" class=\"lyteDummyEventContainer\" tabindex=\"{{ltPropTabindex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" style=\"\" role=\"combobox\" aria-haspopup=\"listbox\" aria-expanded=\"{{if(ltPropIsOpen,'true','false')}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(drophead,'==',&quot;noyield&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-button> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropDisplayValue}}\" is=\"case\" lc-id=\"lc_id_0\"> <span onmouseenter=\"{{action('toolTipConfig',this,'showToolTip')}}\" lt-prop-tooltip-config=\"{{ltPropTooltip}}\" lt-prop-tooltip-class=\"{{ltPropTooltipClass}}\" lt-prop-title=\"{{if(showToolTip,ltPropDisplayValue,'')}}\" class=\"lyteMarginRight lyteDropdownLabel\">{{ltPropDisplayValue}}</span> </template><template case=\"{{expHandlers(expHandlers(ltPropSelected,'!'),'&amp;&amp;',expHandlers(ltPropDisplayValue,'!'))}}\" is=\"case\" lc-id=\"lc_id_1\"> <span class=\"lyteDropPlaceholderNormal\">{{ltPropPlaceholder}}</span> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropSelected,'&amp;&amp;',ltPropShowRemoveIcon)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-remove class=\"lyteDropdownDeselectIcon\"></lyte-drop-remove> </template></template> <lyte-icon class=\"{{ltPropIconClass}}\"></lyte-icon> </lyte-drop-button> </template><template case=\"{{expHandlers(drophead,'==',&quot;yield&quot;)}}\" is=\"case\" lc-id=\"lc_id_1\"> </template></template> </div> </template></template> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropHover,'==',false)}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(dropbody,'==',&quot;noyield&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-box class=\"lyteDropdownHidden\"> <lyte-drop-body> <template items=\"{{ltPropOptions}}\" item=\"item\" index=\"indexVal\" is=\"for\" _new=\"true\"><template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{lyteUiOptGroupCheck(item)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-group> <lyte-drop-label>{{lyteUiReturnOnlyKey(item)}}</lyte-drop-label> <template items=\"{{lyteUiReturnValueBy(item,lyteUiReturnOnlyKey(item))}}\" item=\"subitem\" index=\"indexval\" is=\"for\" _new=\"true\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{lyteUiIsObject(subitem)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-item data-value=\"{{subitem[ltPropSystemValue]}}\" disabled=\"{{lyteUiCheckDisabled(ltPropDisabledList,subitem[ltPropSystemValue])}}\">{{subitem[ltPropUserValue]}}</lyte-drop-item> </template><template default=\"\"> <lyte-drop-item data-value=\"{{subitem}}\" disabled=\"{{lyteUiCheckDisabled(ltPropDisabledList,subitem)}}\">{{subitem}}</lyte-drop-item> </template></template> </template> </lyte-drop-group> </template><template default=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{lyteUiIsObject(item)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-item data-value=\"{{item[ltPropSystemValue]}}\" disabled=\"{{lyteUiCheckDisabled(ltPropDisabledList,item[ltPropSystemValue])}}\">{{item[ltPropUserValue]}}</lyte-drop-item> </template><template default=\"\"> <lyte-drop-item data-value=\"{{item}}\" disabled=\"{{lyteUiCheckDisabled(ltPropDisabledList,item)}}\">{{item}}</lyte-drop-item> </template></template> </template></template> </template> </lyte-drop-body> </lyte-drop-box> </template><template default=\"\"> </template></template> <div class=\"lyteLoadMsg\" style=\"display:none;\">Loading</div> </template><template default=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(dropbody,'==',&quot;noyield&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-box class=\"lyteDropdownHidden\"> <lyte-drop-body> <template items=\"{{ltPropOptions}}\" item=\"item\" index=\"indexVal\" is=\"for\" _new=\"true\"><template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{lyteUiOptGroupCheck(item)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-group> <lyte-drop-label>lyteUiReturnOnlyKey(item)</lyte-drop-label> <template items=\"{{lyteUiReturnValueBy(item,lyteReturnOnlyKey(item))}}\" item=\"subitem\" index=\"indexval\" is=\"for\" _new=\"true\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{lyteUiIsObject(subitem)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-item data-value=\"{{subitem[ltPropSystemValue]}}\" disabled=\"{{lyteUiCheckDisabled(ltPropDisabledList,subitem[ltPropSystemValue])}}\">{{subitem[ltPropUserValue]}}</lyte-drop-item> </template><template default=\"\"> <lyte-drop-item data-value=\"{{subitem}}\" disabled=\"{{lyteUiCheckDisabled(ltPropDisabledList,subitem)}}\">{{subitem}}</lyte-drop-item> </template></template> </template> </lyte-drop-group> </template><template default=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{lyteUiIsObject(item)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-item data-value=\"{{item[ltPropSystemValue]}}\" disabled=\"{{lyteUiCheckDisabled(ltPropDisabledList,item[ltPropSystemValue])}}\">{{item[ltPropUserValue]}}</lyte-drop-item> </template><template default=\"\"> <lyte-drop-item data-value=\"{{item}}\" disabled=\"{{lyteUiCheckDisabled(ltPropDisabledList,item)}}\">{{item}}</lyte-drop-item> </template></template> </template></template> </template> </lyte-drop-body> </lyte-drop-box> </template><template default=\"\"> </template></template> <div class=\"lyteLoadMsg\" style=\"display:none;\">Loading</div> </template></template> <lyte-yield yield-name=\"yield\" style=\"display: none;\" lyte-options=\"{{ltPropOptions}}\"></lyte-yield> </template>";;
LyteDropdownComponent._dynamicNodes = [{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"a","p":[1,1,1,1],"cn":"lc_id_0"},{"t":"f","p":[1,1,1,1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"tX","p":[1,1,0]},{"t":"cD","p":[1,3],"in":0}],"dc":[0],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"a","p":[1,1,1,3,1],"cn":"lc_id_0"},{"t":"s","p":[1,3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[]},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"s","p":[1,1,1],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":4,"sibl":[3],"cn":"lc_id_0"},{"t":"a","p":[1,1,3,1],"cn":"lc_id_0"},{"t":"f","p":[1,1,3,1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"tX","p":[1,1,0]},{"t":"cD","p":[1,3],"in":0}],"dc":[0],"hc":true,"trans":true,"in":3,"sibl":[2],"cn":"lc_id_0"},{"t":"s","p":[1,1,5],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"s","p":[1,1,7],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1,1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[]},"dc":{"lc_id_0":{"dc":[3,1,0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{},"dc":{"lc_id_0":{},"lc_id_1":{}},"hd":true,"co":["lc_id_0","lc_id_1"],"in":3,"sibl":[2],"cn":"lc_id_0"},{"t":"s","p":[1,3],"c":{"lc_id_0":{"dN":[{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"a","p":[1,5],"cn":"lc_id_0"},{"t":"cD","p":[1,5],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"lc_id_1":{}},"hd":true,"co":["lc_id_0","lc_id_1"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"a","p":[1,1,1,1],"cn":"lc_id_0"},{"t":"f","p":[1,1,1,1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"tX","p":[1,1,0]},{"t":"cD","p":[1,3],"in":0}],"dc":[0],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"a","p":[1,1,1,3,1],"cn":"lc_id_0"},{"t":"s","p":[1,3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"}]},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":4,"sibl":[3],"cn":"lc_id_0"},{"t":"a","p":[1,3,1],"cn":"lc_id_0"},{"t":"f","p":[1,3,1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"tX","p":[1,1,0]},{"t":"cD","p":[1,3],"in":0}],"dc":[0],"hc":true,"trans":true,"in":3,"sibl":[2],"cn":"lc_id_0"},{"t":"s","p":[1,5],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"s","p":[1,7],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[]},"dc":{"lc_id_0":{"dc":[3,1,0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{},"dc":{"lc_id_0":{},"lc_id_1":{}},"hd":true,"co":["lc_id_0","lc_id_1"],"in":3,"sibl":[2],"cn":"lc_id_0"},{"t":"s","p":[1,3],"c":{"lc_id_0":{"dN":[{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"a","p":[1,5],"cn":"lc_id_0"},{"t":"cD","p":[1,5],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"lc_id_1":{}},"hd":true,"co":["lc_id_0","lc_id_1"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"s","p":[3],"c":{"lc_id_0":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1,1,1],"cn":"lc_id_0"},{"t":"f","p":[1,1,1],"dN":[{"t":"s","p":[0],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,1,0],"cn":"lc_id_0"},{"t":"cD","p":[1,1],"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"a","p":[1,3],"cn":"lc_id_0"},{"t":"f","p":[1,3],"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"tX","p":[1,0],"cn":"default"},{"t":"cD","p":[1],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0}],"dc":[0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"tX","p":[1,0],"cn":"default"},{"t":"cD","p":[1],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0}],"dc":[0],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"cD","p":[1,1],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[]},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1,1,1],"cn":"lc_id_0"},{"t":"f","p":[1,1,1],"dN":[{"t":"s","p":[0],"c":{"lc_id_0":{"dN":[{"t":"cD","p":[1,1],"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"a","p":[1,3],"cn":"lc_id_0"},{"t":"f","p":[1,3],"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"tX","p":[1,0],"cn":"default"},{"t":"cD","p":[1],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0}],"dc":[0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"tX","p":[1,0],"cn":"default"},{"t":"cD","p":[1],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0}],"dc":[0],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"cD","p":[1,1],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[]},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true},"default":{}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0]},{"t":"a","p":[5]},{"t":"i","p":[5],"in":0},{"type":"dc","trans":true,"hc":true,"p":[2,1,0]}];;

LyteDropdownComponent._observedAttributes = [
    "shouldDisplayIcon",
    "changeItToInvoke",
    "dummy1",
    "dummy2",
    "savedPositions",
    "ltPropRemoveMultiple",
    "ltPropYield",
    "ltPropType",
    "ltPropTabindex",
    "ltPropShow",
    "ltPropFreeze",
    "ltPropOptions",
    "ltPropUserValue",
    "ltPropSystemValue",
    "ltPropPosition",
    "ltPropIconClass",
    "ltPropSelected",
    "ltPropCallout",
    "ltPropPlaceholder",
    "ltPropDisabled",
    "ltPropHover",
    "ltPropNoResult",
    "ltPropMaxCount",
    "ltPropInputClass",
    "ltPropBoundary",
    "pos",
    "secondaryPosition",
    "firePos",
    "ltPropAjaxRequest",
    "firstRequest",
    "userValue",
    "sysValue",
    "ltPropDisplayValue",
    "ltPropDisabledList",
    "ltPropAnimate",
    "ltPropSetPos",
    "ltPropTooltip",
    "ltPropBoxClass",
    "ltPropIsOpen",
    "ltPropFocus",
    "ltPropFixPositionOnOpen",
    "ltPropForcePlaceholder",
    "ltPropShowEmptyMessage",
    "ltPropBoxButtonWidth",
    "ltPropPreventScroll",
    "ltPropScope",
    "ltPropAnimateBox",
    "ltPropTooltipClass",
    "ltPropDisplayList",
    "ltPropSelectedList",
    "ltPropItemSearchType",
    "ltPropFocusOnClose",
    "ltPropButtonClass",
    "ltPropDisableItemTooltip",
    "ltPropPreventParentScroll",
    "ltPropShowRemoveIcon",
    "ltPropAriaButton",
    "ltPropAriaBox",
    "ltPropAriaBody",
    "ltPropReadOnly",
    "ltPropActiveElement",
    "ltPropAllowFocusableElements",
    "ltPropDataTabindex",
    "ltPropPreventNavigation",
    "ltPropTrimSearchText",
    "ltPropNoResultYield"
];

window.addEventListener('scroll', function (event) {
	_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.measure(function () {
		var elm = window._lyteDropdown.getVisibleDropbox(),
			tempele = elm,
			isAnimate,
			cur = event.target, shouldUseSave,
			drop, component, boundary, offsets, link, bounds;

		if (!elm) {
			window._lyteDropdown.openAutoClosedDropdown(cur, event);
			return;
		}

		// if( cur.nodeName == "#document" ) {     //This probably happens because scrollIntoView is used to focus the dropdown which is open at the start so the event.target is #document(CODE HELP)
		// 	return ;
		// }

		while (cur != document && cur.tagName !== 'LYTE-DROP-BOX' && cur.tagName !== 'HTML') {
			cur = cur.parentElement;
		}

		if (cur.tagName === 'LYTE-DROP-BOX') {
			return;
		}

		drop = elm.origindd;

		// People could just render the lyte-drop-box without any dropdown and that guy is scrolling
		if (!drop) {
			window._lyteDropdown.openAutoClosedDropdown(cur, event);
			return;
		}

		component = drop.component;
		link = component.childComp;


		// Dropdowns crossing their boundaries are closed automatically
		bounds = window._lyteDropdown.buildBounds(component);
		offsets = drop.getBoundingClientRect();

		if ((offsets.top < bounds.top
			|| offsets.left < bounds.left
			|| offsets.right > bounds.right
			|| offsets.bottom > bounds.bottom)
		) {

			component.beforeScrollClose(event);
			if (component.beforeHide.call(component, link, event, component.getData('ltPropFreeze'))) {
				return;
			}

			component.closeDrop.call(component, link, event, component.getData('ltPropFreeze'), true);
			isAnimate = component.getData('ltPropAnimate');

			/* While closeDrop does set autoClosed to null
			 * This sets it to its proper value thereby making the dropdown properly close/open when
			 * it either moves out or comes into bounds
			 */


			if (!isAnimate) {
				window._lyteDropdown.autoClosed = drop;
			}

		}

		// Set CSS of the dropdown on scrolling
		if (!drop.component._preventSetcss) {
			shouldUseSave = drop.component.getData('ltPropFixPositionOnOpen');

			drop.component.setCss(true, shouldUseSave);
		}
	});
}, true);

document.addEventListener('click', function (event) {
	var ele = event.target,
		target = event.target,
		cur, all, i = 0, j = 0, type,
		open, temp, component, res, freeze, link, drp, item, active, container, head, input;

	// Performing an user action such as click whether it is on the same dropdown
	// or another dropdown or anywhere will flush autoClosed
	// Browser defined scrollbars don't trigger a click but lyte-scrollbar does
	if (!window._lyteDropdown.isScrollBar(target)) {
		window._lyteDropdown.autoClosed = null;
	}

	ele = window._lyteDropdown.traverse(ele, ['LYTE-DROPDOWN', 'HTML', 'LYTE-DROP-BOX', 'LYTE-DROP-REMOVE']);

	if (window._lyteDropdown.focusOut) {

		// If container is html, then the click event in the dropdown will close it.
		window._lyteDropdown.preventClose = ele && ele.tagName !== 'HTML' ? true : false;
	}

	// return when there is no element
	if (!ele) {
		return;
	}

	if (ele.tagName == 'HTML') {

		window._lyteDropdown.unmark();
		open = document.querySelectorAll('lyte-drop-box:not(.lyteDropdownHidden)');

		for (; j < open.length; j++) {
			temp = open[j];
			if (temp) {
				component = temp.origindd.component;

				if (component.beforeHide.call(component, temp, event, component.getData('ltPropFreeze'))) {
					continue;
				}

				freeze = document.getElementById('lytedropdownfreezelayer');
				component.closeDrop.call(component, temp, event, freeze);
			}
		}

		active = document.activeElement;

		// Looks like activeElements can be undefined - LOL IE
		if (active && active.tagName === 'INPUT' && (container = window._lyteDropdown.traverse(active, ['LYTE-DROPDOWN']))) {
			active.blur();
		}
	}
	else if (ele.tagName === 'LYTE-DROPDOWN') {
		cur = ele;
		all = document.querySelectorAll('lyte-drop-box:not(.lyteDropdownHidden)')
		for (; i < all.length; i++) {
			if (all[i].origindd == cur) {
				continue;
			}
			else {
				drp = all[i].origindd;
				component = drp.component;
				window._lyteDropdown.unmark();

				if (component.beforeHide.call(component, component.childComp, event, component.getData('ltPropFreeze'))) {
					continue;
				}

				component.closeDrop.call(component, component.childComp, event, component.getData('ltPropFreeze'));
			}
		}
	}
	else if (ele.tagName === 'LYTE-DROP-REMOVE') {
		drp = ele;
		while (drp.tagName != 'LYTE-DROPDOWN') {
			if (drp.getAttribute('data-value')) {
				item = drp;
			}
			drp = drp.parentElement;
		}

		type = drp.ltProp('type');
		head = drp.component.getData('drophead');

		window._lyteDropdown.closeOtherDropdowns(drp);

		if (drp.ltProp('readOnly')) {
			return;
		}

		if (type === 'default') {
			drp.ltProp('selected', '');
		}
		else {
			if (type === 'multisearch') {
				drp.component.focusInput();
				input = drp.querySelector('lyte-search') || drp.querySelector('input');

				if (input && input.setValue) {
					input.setValue('');
				}
			}

			if (item.classList.contains('lyteDropMark')) {
				drp.component.removeAll(event);
			}
			else {
				window._lyteDropdown.unmark();
				drp.component.closeFun(event);
			}
		}

	}
}, true);

if (window._lyteUiUtils.isIos) {
	document.addEventListener('focusout', function (event) {
		// need to check for multiple dropdown
		var target = event.target,
			open, drop, comp, freeze;

		// test for normal input in dom
		if ((drop = window._lyteDropdown.traverse(target, 'LYTE-DROPDOWN'))
			&& event.target.tagName === 'INPUT'
		) {
			comp = drop.component;
			open = comp.childComp;
			freeze = comp.getData('ltPropFreeze');

			window._lyteDropdown.focusOut = true;

			setTimeout(function () {

				if (_lyteDropdown.preventClose) {
					_lyteDropdown.preventClose = _lyteDropdown.focusOut = false;
					return;
				}

				if (open
					&& !open.classList.contains('lyteDropdownHidden')
				) {
					if (comp.beforeHide(open, event, freeze)) {
						return;
					}

					comp.closeDrop(open, event, freeze);
				}

				_lyteDropdown.focusOut = false;
			}, 0);
		}
	}, true);
}

document.addEventListener('keydown', function (event) {  //This is to take care of the tabbing problems in a dropdown and traversing(CODE HELP)
	var kc = event.keyCode,
		active, acomp, abutton, anodes, activeDrop,
		open = document.querySelector('lyte-drop-box:not(.lyteDropdownHidden)'),
		type, res, drp, component, src, last, l = 0, cur, elem, elems, i = 0, j, all, k, curActive;


	if (window._lyteDropdown.openFocusedDropdown(kc)) {
		return;
	}

	if (kc === 32 || kc === 40) {
		curActive = activeDrop = document.activeElement;
		activeDrop = window._lyteDropdown.traverse(activeDrop, ['LYTE-DROPDOWN', 'HTML']);

		// active elements can be null - LOL IE
		if (activeDrop) {
			if (activeDrop.tagName === 'LYTE-DROPDOWN' && curActive.tagName !== 'INPUT' && curActive.tagName !== 'TEXTAREA') {
				event.preventDefault();
			}

			if (activeDrop.tagName === 'LYTE-DROPDOWN'
				&& !activeDrop.ltProp( 'isOpen' )
			) {
				activeDrop.component.showHide(event, event.type);

				// End this here
				return;
			}
		}
	}

	// UP, DOWN, ENTER
	if (
		(
			kc == 38
			|| kc == 40
			|| kc == 13
		)
		&& open
	) {

		if (kc == 38
			|| kc == 40
		) {
			event.preventDefault()
		}

		// Get the current highlighted element
		drp = open.origindd;
		component = drp.component;
		type = component.getData('ltPropType');
		open = component.getDropBox();
		cur = open.querySelector('.lyteDropdownSelection');

		var shouldNavigate = component.shouldNavigate();

		if (!shouldNavigate) {
			return;
		}

		// No current Highlighted Element or the current highlighted element is hidden
		// It just sets the first visible element as highlighted and returns
		// Only for multiselects
		if (
			!cur
			|| (cur && !window._lyteDropdown.isVisible(cur))
		) {

			// This one is a yikes
			elems = open.querySelectorAll('lyte-drop-item:not(.lyteSearchHidden):not(.lyteDropdownActive)') //wrong

			for (; i < elems.length; i++) {
				if (window._lyteDropdown.isVisible(elems[i])
					&& elems[i].getAttribute('disabled') !== "true"
				) {
					elem = elems[i];
					break;
				}
			}

			if (cur) {
				cur.classList.remove('lyteDropdownSelection');
			}

			if (elem) {
				elem.classList.add('lyteDropdownSelection');
				component.getActiveElement().setAttribute('aria-activedescendant', elem.getAttribute('id'));
				return;
			}
		}

		kc = event.keyCode;
		elems = open.querySelectorAll('lyte-drop-item');
		for (i = 0; i < elems.length; i++) {
			if (elems[i].classList.contains('lyteDropdownSelection')) {
				break;
			}
		}

		// A highlighted element was present and enter is pressed
		if (kc == 13) {
			if (component.getData('multiple')) {
				if (!elems[i]) {
					return;
				}

				elems[i].click();
			}
			else {

				// Just a safety check.
				// lyteDropdownSelection is most likely present
				if (elems[i]) {
					elems[i].click();
				}
			}
		}
		// Key up was pressed
		else if (
			kc == 38
			&& i != 0
		) {
			j = i;
			i = window._lyteDropdown.find(elems, i - 1, false);

			if (i != -1) {
				component.scrollIntoView(elems[i], 'up');
				elems[j].classList.remove('lyteDropdownSelection');
				elems[i].classList.add('lyteDropdownSelection');
				component.getActiveElement().setAttribute('aria-activedescendant', elems[i].getAttribute('id'));
				component.executeKeyNavigationCallback(elems[i]);
			}
		}

		// Key down was pressed
		else if (
			kc == 40
			&& i != elems.length - 1
		) {
			j = i;
			i = window._lyteDropdown.find(elems, i + 1, true);

			if (i < elems.length) {  // Added this because it was breaking in CRM
				component.scrollIntoView(elems[i], 'down');
				elems[j].classList.remove('lyteDropdownSelection');
				elems[i].classList.add('lyteDropdownSelection');
				component.getActiveElement().setAttribute('aria-activedescendant', elems[i].getAttribute('id'));
				component.executeKeyNavigationCallback(elems[i]);
			}
		}

	}

	// Backspace was pressed
	else if (kc === 8) {
		active = window._lyteDropdown.getActive();

		if (active) {
			acomp = active.component;
			abutton = active.querySelector('lyte-drop-button');
			anodes = abutton.querySelector('.lyteDropMark');
		}

		drp = window._lyteDropdown.getDropdownWithFocusedInput();

		if (!drp) {
			return;
		}

		component = drp && drp.component;
		type = component && component.getData('ltPropType');

		if (anodes) {
			event.preventDefault();
			acomp.setData('isKeyDown', true);
			acomp.removeAll(event);
			acomp.setData('isKeyDown', false);
		}
		else if (drp && type === 'multisearch' && window._lyteDropdown.isInput(event)) {
			last = drp.querySelectorAll('lyte-drop-remove')
			if (last.length > 0) {
				drp.component.setData('isKeyDown', true);
				last[last.length - 1].click();
				drp.component.setData('isKeyDown', false);
			}
		}
	}


	else if (
		kc === 27
		|| kc === 9
	) {
		// Escape
		// Close the current opened dropdown
		if (open) {

			open = window._lyteDropdown.traverse(open, ['LYTE-DROP-BOX']);

			if (!open) {
				return;
			}

			component = open.origindd.component;

			if (kc === 9 && window._lyteDropdown.shouldTrapFocus(component)) {
				window._lyteDropdown.loopIfBoundaryElements(component, event);
			}
			else {
				if (component.beforeHide.call(component, component.childComp, event, component.getData('ltPropFreeze'))) {
					return;
				}

				// open.classList.add('lyteDropdownHidden')
				component.closeDrop.call(component, component.childComp, event, component.getData('ltPropFreeze'));
			}
		}
	}
});

document.addEventListener('keypress', function (event) { //It searches the dropdown items matching the pressed charactes when the dropdown is open
	var kc = event.which || event.keyCode, i = 0, children, pos,
		open = document.querySelectorAll('lyte-drop-box:not(.lyteDropdownHidden)'), drp, searchMethod;

	var isMatchFound = function (itemValue, searchKey, method) {
		if (method === 'contains') {
			if (itemValue.trim().toLowerCase().indexOf(searchKey.toLowerCase()) != -1) {
				return true;
			}
		}
		else if (method === 'startsWith') {
			if (itemValue.trim().substring(0, searchKey.length).toLowerCase() === searchKey.toLowerCase()) {
				return true;
			}
		}

		return false;
	};

	if (
		open.length > 0
		&& ((kc >= 65 && kc <= 90)
			|| (kc >= 97 && kc <= 122)
			|| (kc >= 48 && kc <= 57))
	) {
		window._lyteDropdown.pressedCharacter = _lyteDropdown.pressedCharacter ? _lyteDropdown.pressedCharacter += String.fromCharCode(kc) : String.fromCharCode(kc);
		if (_lyteDropdown.checkDDtimeoutId) {
			clearTimeout(_lyteDropdown.checkDDtimeoutId);
		}

		_lyteDropdown.checkDDtimeoutId = setTimeout(function () {
			_lyteDropdown.pressedCharacter = null;
		}, 500);

		// activeElements can be null - LOL IE
		drp = (document.activeElement || {}).parentElement;
		drp = (drp || {}).tagName == "LYTE-DROPDOWN" ? drp : null;
		if (open.length > 0 && drp) {
			for (var i = 0; i < open.length; i++) {
				// breaking change
				if (open[i].origindd == drp) {
					break;
				}
			}

			open = open[i];
			drp = open.origindd;
			children = open.querySelectorAll('lyte-drop-item');
			searchMethod = drp.getData('ltPropItemSearchType');

			if (
				_lyteDropdown.cachePreviousVal.char
				&& _lyteDropdown.cachePreviousVal.char == _lyteDropdown.pressedCharacter
				&& (_lyteDropdown.cachePreviousVal.pos + 1) < children.length
				&& isMatchFound(children[_lyteDropdown.cachePreviousVal.pos + 1].textContent, _lyteDropdown.pressedCharacter, searchMethod)/* children[ _lyteDropdown.cachePreviousVal.pos + 1 ].textContent.trim().substring( 0, _lyteDropdown.pressedCharacter.length ).toLowerCase() === _lyteDropdown.pressedCharacter.toLowerCase()*/
			) {
				pos = _lyteDropdown.cachePreviousVal.pos + 1;
			}
			else {
				for (i = 0; i < children.length; i++) {
					if (isMatchFound(children[i].textContent, _lyteDropdown.pressedCharacter, searchMethod) /*children[ i ].textContent.trim().substring( 0, _lyteDropdown.pressedCharacter.length ).toLowerCase() === _lyteDropdown.pressedCharacter.toLowerCase()*/) {
						pos = i;
						break;
					}
				}
			}

			if (pos != undefined) {
				var selected = open.querySelectorAll('.lyteDropdownSelection');
				for (var j = 0; j < selected.length; j++) {
					selected[j].classList.remove('lyteDropdownSelection');
				}
				children[pos].classList.add('lyteDropdownSelection');
				drp.component.getActiveElement().setAttribute('aria-activedescendant', children[pos].getAttribute('id'));
				var scrollDiv = open.querySelector('lyte-drop-body');

				if (scrollDiv.contains(children[pos])) {
					// footers can have lyte-drop-items. So no scrolling there.
					scrollDiv.scrollTop += parseInt(children[pos].getBoundingClientRect().top - scrollDiv.getBoundingClientRect().top);
				}

			}

			_lyteDropdown.cachePreviousVal.char = _lyteDropdown.pressedCharacter;
			_lyteDropdown.cachePreviousVal.pos = pos;
		}

	}

});

if (!window._lyteUiUtils.isMobile) {
	window.addEventListener('resize', function (event) {
		delete this._hgt;

		// Resizing is counted as an user action which flushes the autoClosed property
		window._lyteDropdown.autoClosed = null;

		var open = document.querySelector('lyte-drop-box:not(.lyteDropdownHidden)'),
			shouldUseSave;

		if (open && !open.origindd.component._preventSetcss) {
			shouldUseSave = open.origindd.component.getData('ltPropFixPositionOnOpen');

			open.origindd.component.setCss(true, shouldUseSave);
		}
	});
}

if (!window._lyteUiUtils.registeredCustomElements['lyte-drop-body']) {
    window._lyteUiUtils.registeredCustomElements['lyte-drop-body'] = true;

    /**
	   * @customElement lyte-drop-box
	   */

    class LyteDropBodyCustomElements extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry.CustomElements {
        lookups() {
            return [{
                component: _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return [];
        }

        connectedCallback() {
            var lyteNode = this.$node;

            if (!lyteNode._attributesSet) {
				var cur = window._lyteDropdown.traverse(lyteNode, ['LYTE-DROPDOWN', 'BODY']), dropdown, component, ariaButton;

				if (cur.tagName === 'BODY') {
					cur = lyteNode.origindd;
				}

				if (!cur || cur.tagName !== 'LYTE-DROPDOWN') {
					return;
				}

				dropdown = cur;
				component = dropdown.component;

				// if( component.getData( 'ltPropType' ) === 'multisearch' || component.getData( 'ltPropType' ) === 'multiple' ) {
				// 	this.setAttribute( 'aria-multiselectable', 'true' );
				// }
				// else {
				// 	this.setAttribute( 'aria-multiselectable', 'false' );
				// }
				lyteNode._attributesSet = true;

				lyteNode.setAttribute('role', 'listbox');
				if (!lyteNode.getAttribute('id')) {
					lyteNode.setAttribute('id', 'Lyte_Drop_Body_' + window._lyteDropdownBodyId++);
				}

				ariaButton = component.getAriaButton();

				if (ariaButton) {
					ariaButton.setAttribute('aria-controls', lyteNode.getAttribute('id'));
				}

			}
        }

        _() {
            _;
        }
    }

    LyteDropBodyCustomElements.options = {clone : {allCallbacks : false}};

    LyteDropBodyCustomElements.register("lyte-drop-body");
}

if (!window._lyteUiUtils.registeredCustomElements['lyte-drop-item']) {
    window._lyteUiUtils.registeredCustomElements['lyte-drop-item'] = true;

    /**
	 * @customElement lyte-drop-item
	 */

    class LyteDropItemCustomElements extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry.CustomElements {
        lookups() {
            return [{
                component: _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return ['selected'];
        }

        connectedCallback() {
            var lyteNode = this.$node;


            if (!lyteNode._eventRegistered) {

				lyteNode._eventRegistered = true;

				lyteNode.setAttribute('aria-selected', 'false');
				lyteNode.setAttribute('role', 'option');

				if (!lyteNode.getAttribute('id')) {
					lyteNode.setAttribute('id', 'Lyte_Drop_Item_' + window._lyteDropdownItemId++);
				}

				// this.setAttribute( 'tabindex', '-1' );


				lyteNode.addEventListener('mouseenter', function () {
					var title = lyteNode.getAttribute('data-title'),
						showCustomTooltip = lyteNode.getAttribute( 'data-custom-tooltip' ),
						width = lyteNode.offsetWidth,
						scrollWidth = lyteNode.scrollWidth,
						component = window._lyteDropdown.getDropdownFromItem(lyteNode), tooltipConfig, cls, showToolTip;

					if (!component) {
						return;
					}

					if (component.getData('ltPropDisableItemTooltip') || showCustomTooltip === "true" ) {
						return;
					}

					tooltipConfig = component.getData('ltPropTooltip');
					cls = component.getData('ltPropTooltipClass');

					title = title || lyteNode.innerText.trim();

					showToolTip = (width < scrollWidth && !window._lyteDropdown.isEmpty(tooltipConfig));
					lyteNode.setAttribute('lt-prop-title', showToolTip ? title : '');

					if (showToolTip) {
						lyteNode.setAttribute('lt-prop-tooltip-config', JSON.stringify(tooltipConfig));
						lyteNode.setAttribute('lt-prop-tooltip-class', cls);
					}

				});
			}

            var component = window._lyteDropdown.getDropdownFromItem(lyteNode);
            lyteNode._dropdownComponent = component;

            window.clearTimeout(component._FFBodyScrollOnAdd);

            component._FFBodyScrollOnAdd = window.setTimeout(function () {
				var isFF = component.isFF(),
					isOpen = component.getData('ltPropIsOpen');

				if (!isOpen) {
					return;
				}

				if (isFF && component.isBodyScrollable()) {
					component.addProperScrollbar();
				}
			}, 0);
        }

        disconnectedCallback() {
            var lyteNode = this.$node;
            var component = lyteNode._dropdownComponent;

            if (!component) {
				return;
			}

            window.clearTimeout(component._FFBodyScrollOnRemove);

            component._FFBodyScrollOnRemove = window.setTimeout(function () {
				var isFF = component.isFF(),
					isOpen = component.getData('ltPropIsOpen');

				if (!isOpen) {
					return;
				}

				if (isFF && !component.isBodyScrollable()) {
					component.removeScrollbar();
				}
			}, 0);
        }

        attributeChangedCallback(attr, oldValue, newValue, namespace) {
            var lyteNode = this.$node;
            var cur = lyteNode, drp, component, type, sel, res,
				src = lyteNode.getAttribute('data-value'),
				attributeChanged;

            if (oldValue === null && newValue !== null || oldValue !== null && newValue === null) {
				attributeChanged = true;
			}

            if (!attributeChanged) {
				return;
			}

            if (attr == 'selected') {
				if (lyteNode.hasAttribute('selected')) {

					lyteNode.setAttribute('aria-selected', 'true');

					cur = window._lyteDropdown.traverse(cur, ['LYTE-DROP-BOX', 'BODY']);

					if (!cur || cur.tagName == 'BODY') {
						return;
					}

					drp = cur.origindd;
					if (!drp) {
						cur = window._lyteDropdown.traverse(cur, ['LYTE-DROPDOWN', 'BODY']);
						drp = cur;
					}

					component = drp.component;

					if (!component) {
						return;
					}

					if (component.getData('preventSel')) {
						return;
					}

					type = component.getData('ltPropType');

					if (type == 'multiple'
						|| type == 'multisearch'
					) {
						sel = component.getData('ltPropSelected');
						if ((sel && sel.length == 2) || !sel) {
							sel = JSON.stringify([src]);
							// not setting prev to true here
							component.setData('ltPropSelected', sel);
						}
						else {
							res = JSON.parse(sel);
							res.push(src);
							// not setting prev to true here
							component.setData('ltPropSelected', JSON.stringify(res));
						}
					}
					else {
						component.setData('ltPropSelected', src);
					}
				}
				else {
					lyteNode.setAttribute('aria-selected', 'false');
				}
			}
        }

        _() {
            _;
        }
    }

    LyteDropItemCustomElements.options = {clone : {allCallbacks : false}};

    LyteDropItemCustomElements.register('lyte-drop-item');
}



window._lyteDropdown = {
	// When multiple dropdowns have multiple callbacks returning a promise, store the last dropdown
	lastDropdownWithAPromise: null,

	// Whether the dropdown should not be closed when the input is focused out
	preventClose: false,

	// Current dropdown that was autoClosed
	autoClosed: null,

	// Whether a focus happened
	focusOut: false,

	focusableElementsSelector: 'input:not(:disabled), button:not(:disabled), [tabindex]:not([tabindex="-1"]), textarea:not(:disabled), select:not(:disabled), a',

	shouldTrapFocus: function (comp) {
		var dropdown = comp.$node,
			box = dropdown.getDropBox(),
			focusableElements = comp.getFocusableElements(),
			shouldTrapFocus = comp.getData('ltPropAllowFocusableElements') && focusableElements.length > 1;

		return shouldTrapFocus;
	},

	loopIfBoundaryElements: function (comp, event) {
		var focusableElements = comp.getFocusableElements(),
			length = focusableElements.length,
			dropdown = comp.$node,
			activeElement = document.activeElement;

		if (event.shiftKey && focusableElements[0] === activeElement) {
			event.preventDefault();
			focusableElements[length - 1].focus();
		}

		if (!event.shiftKey && focusableElements[length - 1] === activeElement) {
			event.preventDefault();
			focusableElements[0].focus();
		}

	},

	closeOtherDropdowns: function (currentDropdown) {
		var openDropdowns = window._lyteUiUtils.getVisibleDropdowns() || [];

		for (var i = 0; i < openDropdowns.length; i++) {
			if (openDropdowns[i] !== currentDropdown) {
				openDropdowns[i].close();
			}
		}
	},

	openFocusedDropdown: function (keyCode) {
		var dropdown = window._lyteDropdown.getDropdownWithFocusedInput(),
			type, BACKSPACE = 8;

		if (keyCode == 27 || keyCode == 9 || !dropdown) {
			return;
		}

		type = (dropdown.ltProp('type') || '').toLowerCase();

		if (type === 'multisearch' && !dropdown.ltProp('isOpen')) {
			dropdown.open();

			if (keyCode === BACKSPACE) {
				return false;
			}

			return true;
		}
	},

	getDropdownFromItem: function (cur) {
		cur = window._lyteDropdown.traverse(cur, ['LYTE-DROP-BOX', 'BODY']);

		if (!cur || cur.tagName == 'BODY') {
			return;
		}

		var drp = cur.origindd;

		if (!drp) {
			cur = window._lyteDropdown.traverse(cur, ['LYTE-DROPDOWN', 'BODY']);
			drp = cur;
		}

		var component = drp.component;

		return component;
	},

	getDropdownWithFocusedInput: function () {
		var activeElement = document.activeElement, dropdown;

		if (activeElement
			&& activeElement.nodeName.toLowerCase() === 'input'
		) {
			dropdown = window._lyteDropdown.traverse(activeElement, ['HTML', 'LYTE-DROPDOWN']);
		}

		if (dropdown && dropdown.nodeName.toLowerCase() === 'lyte-dropdown') {
			return dropdown;
		}

	},

	/**
	 * Gets the current visible dropbox from the body
	 * This was added to fix a performance problem in CRM - kural's subform feature
	 *
	 *
	 */

	getVisibleDropbox: function () {
		var childs = (document.body || {}).children || [],
			i = 0;

		for (; i < childs.length; i++) {
			if (
				childs[i].tagName === 'LYTE-DROP-BOX'
				&& window._lyteDropdown.isVisible(childs[i])
			) {
				return childs[i];
			}
		}
	},

	/**
	 * Check if the element is a scrollbar
	 * @param {HTMLElement} element - the clicked element
	 *
	 */

	isScrollBar: function (element) {
		return element
			&& (element.classList.contains('lyteScrollContainer') || element.classList.contains('lyteScrollDiv'));
	},

	/**
	 * Checks if the dropdown is within the visible bounds
	 * @param {Object} visibleBound - The visible bound of the scrollable element
	 * @param {Object} dropBound - The dropdown's boundaries
	 *
	 */

	isInBounds: function (visibleBound, dropBound) {
		return visibleBound.top < dropBound.top
			&& visibleBound.bottom > dropBound.bottom
			&& visibleBound.left < dropBound.left
			&& visibleBound.right > dropBound.right;
	},

	/**
	 * This is going to construct the visible bound of the scrolling container
	 * @param {object} - getBoundingClientRect of the element
	 * @param {boolean} - If it is a boolean or not
	 * @param {HTMLElement} - The current scrollable div
	 *
	 */

	buildVisibleBounds: function (rect, isDoc, cur) {
		var top = isDoc ? 0 : Math.max(rect.top, 0),
			left = isDoc ? 0 : Math.max(rect.left, 0),
			right = isDoc ? window.innerWidth : Math.min(window.innerWidth, rect.left + cur.offsetWidth),
			bottom = isDoc ? window.innerHeight : Math.min(window.innerHeight, rect.top + cur.offsetHeight);

		return {
			top: top,
			left: left,
			right: right,
			bottom: bottom
		};
	},

	/**
	 * This is used to find the current auto closed dropdown
	 * @param {HTMLElement} cur - The cur scrolled element
	 *
	 */

	openAutoClosedDropdown: function (cur, event) {
		var isDocument = cur === document,
			scrollRect, visibleBound,
			drop = window._lyteDropdown.autoClosed, comp, link;

		if (!drop) {
			return;
		}

		scrollRect = isDocument ? {} : cur.getBoundingClientRect();
		visibleBound = window._lyteDropdown.buildVisibleBounds(scrollRect, isDocument, cur)

		comp = drop.component,
			link = comp.childComp;

		if (drop
			&& cur.contains(drop)
			&& window._lyteDropdown.isInBounds(visibleBound, drop.getBoundingClientRect())

			// safety
			&& link.classList.contains('lyteDropdownHidden')
		) {
			comp.beforeScrollOpen(event);
			drop.toggle();
			window._lyteDropdown.autoClosed = null;
		}
	},

	/**
	 * This is used to determine whether an object is empty or not
	 * @param {Object} obj - The object to be checked
	 *
	 */

	isEmpty: function (obj) {
		for (var key in obj) {
			return false;
		}

		return true;
	},

	/**
	 * This is going to build the boundary parameter for a particular dropdown instance
	 * @param {Component} comp - The lyte-dropdown component object
	 *
	 */

	buildBounds: function (comp) {
		var bound = comp.getData('ltPropBoundary') || {},
			scope = comp.getData('ltPropScope'), parent, boundingRects;

		if (scope !== 'window') {
			parent = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(comp.$node).closest(scope).get(0);

			if (parent) {
				boundingRects = parent.getBoundingClientRect();

				return {
					left: Math.max(0, boundingRects.left),
					top: Math.max(0, boundingRects.top),
					right: Math.min(window.innerWidth, boundingRects.right),
					bottom: Math.min(window.innerHeight, boundingRects.bottom)
				};
			}
		}

		return {
			left: bound.left || 0,
			right: bound.right || window.innerWidth,
			top: bound.top || 0,
			bottom: bound.bottom || window.innerHeight
		}
	},

	/**
	 * This is going to traverse up the dom to check if the required tagNames are present
	 * @param {Element} node - The element whose parents need to be traversed
	 * @param {Array} arr - The set of tag names to check against
	 *
	 */

	traverse: function (node, arr) {
		while (node && !~arr.indexOf(node.tagName)) {
			node = node.parentNode;
		}

		return node;
	},

	/**
	 * Find the next/previous element which is visible
	 * @param {NodeList} elems - The set of all elements to test against
	 * @param {integer} i - index from which we need to search
	 * @param {boolean} forward - whether to move forward or backward
	 *
	 *
	 */

	find: function (elems, i, forward) {
		var inc = forward ? 1 : -1,
			len = elems.length;

		for (
			;
			forward ?
				i < len
				: i > -1;

			i = i + inc
		) {
			if (window._lyteDropdown.isVisible(elems[i])
				&& elems[i].getAttribute('disabled') !== "true"
			) {
				return i;
			}
		}

		return forward ? len : -1;
	},

	/**
	 * This is going to check if the element is visible or not
	 * @param {Element} item - The item to check against
	 *
	 */

	isVisible: function (item) {
		return !!(item.offsetWidth || item.offsetHeight || item.getClientRects().length);
	},

	/**
	 * Checks if the current target is an input within the dropdown and with no value
	 * @param event - the keydown event
	 *
	 */

	// Initialize variables
	pressedCharacter: null,

	checkDDtimeoutId: null,

	cachePreviousVal: {},

	isInput: function (event) {
		// There maybe a case when a dropdown might be opened on pressing on an input with toggle. When backspace is pressed
		// on that input the global event handler for keydown might misbehave by trying to remove the last item
		// Fix is to check if the input is present inside the open dropdown
		var open = event.target;

		open = window._lyteDropdown.traverse(open, ['LYTE-DROPDOWN']);

		if (open
			&& event.target.tagName === 'INPUT'
			&& event.target.type === 'text'
			&& !event.target.value
		) {
			return true;
		}

		return false;
	},

	/**
	 * Unmark all nodes except the current components nodes
	 *
	 */

	unmark: function (comp) {
		var nodes = document.querySelectorAll('.lyteDropMark'),
			i = 0, len = nodes.length, par;

		for (; i < len; i++) {
			// This is stupid. Change it later.
			//nodes[ i ].classList.remove( 'lyteDropMark' );
			par = comp ? window._lyteDropdown.findParent(nodes[i]) : undefined;
			par && par == comp.$node ? undefined : nodes[i].classList.remove('lyteDropMark');
		}
	},

	findParent: function (node) {
		node = window._lyteDropdown.traverse(node, ['LYTE-DROPDOWN'])

		return node;
	},

	getActive: function () {
		var node = document.querySelector('.lyteDropMark');

		return window._lyteDropdown.findParent(node);
	}
}

if (!window._lyteUiUtils.registeredCustomElements['lyte-drop-group']) {
    window._lyteUiUtils.registeredCustomElements['lyte-drop-group'] = true;

    /**
	 * @customElement lyte-drop-group
	 */

    class LyteDropGroupCustomElements extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry.CustomElements {
        lookups() {
            return [{
                component: _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return ['label'];
        }

        attributeChangedCallback(attr, oldValue, newValue, namespace) {
            var lyteNode = this.$node;
            var node, value;

            if (attr == 'label') {
				node = lyteNode.querySelector('lyte-drop-label');
				value = lyteNode.getAttribute('label');
				if (node) {
					node.textContent = value;
				}
				else {
					node = document.createElement('lyte-drop-label');
					node.textContent = value;
					lyteNode.insertBefore(node, lyteNode.children[0]);
				}
			}
        }

        _() {
            _;
        }
    }

    LyteDropGroupCustomElements.options = {clone : {allCallbacks : false}};

    LyteDropGroupCustomElements.register("lyte-drop-group");
}

/**
 * @syntax nonYielded
 * <lyte-dropdown lt-prop-options='[{"name": "Option 1", "value": "1"}, {"name": "Option 2", "value": "2"}]' lt-prop-user-value="name" lt-prop-system-value="value"></lyte-dropdown>
 */

/**
 * @syntax yielded
 * <lyte-dropdown>
 *     <template is="registerYield" yield-name="yield">
 *         <lyte-drop-button>
 *             Option 1
 *         </lyte-drop-button>
 *         <lyte-drop-box>
 *             <lyte-drop-body>
 *                 <lyte-drop-item data-value="1">Option 1</lyte-drop-item>
 *                 <lyte-drop-item data-value="2">Option 2</lyte-drop-item>
 *             </lyte-drop-body>
 *         </lyte-drop-box>
 *      </template>
 * </lyte-dropdown>
 */

/**
 * @syntax
 * @attribute ltPropType=multiple
 * <lyte-dropdown lt-prop-selected='["1"]' lt-prop-type="multiple">
 *     <template is="registerYield" yield-name="yield">
 *         <lyte-drop-box>
 *             <lyte-drop-body>
 *                 <lyte-drop-item data-value="1">Option 1</lyte-drop-item>
 *                 <lyte-drop-item data-value="2">Option 2</lyte-drop-item>
 *             </lyte-drop-body>
 *         </lyte-drop-box>
 *      </template>
 * </lyte-dropdown>
 */

/**
 * @syntax
 * @attribute ltPropType=multisearch
 * <lyte-dropdown lt-prop-selected='["1"]' lt-prop-type="multisearch">
 *     <template is="registerYield" yield-name="yield">
 *         <lyte-drop-box class="bodyContainer">
 *             <lyte-drop-body>
 *                 <lyte-drop-item data-value="1">Option 1</lyte-drop-item>
 *                 <lyte-drop-item data-value="2">Option 2</lyte-drop-item>
 *             </lyte-drop-body>
 *         </lyte-drop-box>
 *      </template>
 * </lyte-dropdown>
 */









LyteDropdownComponent.register("lyte-dropdown", {
    hash: "LyteDropdownComponent_9",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});






/***/ }),

/***/ 34960392:
/*!**********************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-input.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteInputComponent": () => (/* binding */ LyteInputComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_calendar_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-calendar.js */ 70273897);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_wormhole_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-wormhole.js */ 66898968);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_dropdown_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-dropdown.js */ 99219004);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    }
});








// import "../../plugins/lyte-trapFocus.js";

window._lyteInput = function(evt) {
    // var inputs = document.body.getElementsByTagName( 'lyte-input' );
    var dateIp = window._lyteUiUtils.input, inputs = Object.keys( dateIp || {} )
    for( var i = 0; i < inputs.length; i++ ){
        // if( /date/i.test( inputs[ i ].ltProp( 'type' ) ) ){
            var comp = dateIp[ inputs[ i ] ].component;
            if( evt.type == "click" ){
                comp.calenderClickHide.call( comp, evt );
            } else {
                comp.scrollFunc.call( comp, evt );
            }
        // }
    }
};

/**
 * This component is used to get responses from user
 * @component lyte-input
 * @version 1.0.0
 * @dependency lyte-calendar
 *  /components/lyte-calendar.js
 *  /theme/compiledCSS/default/ltr/lyte-ui-calendar.css 
 *  /plugins/lyte-moment.js
 * @dependency lyte-dropdown
 *  /components/lyte-dropdown.js
 *  /theme/compiledCSS/default/ltr/lyte-ui-dropdown.css
 * @dependency lyte-wormhole
 *  /components/lyte-wormhole.js
 * @utility focus,blur,click,select
 * @import lyte-dropdown
 * @condition ltPropType time,datetime
 * @ignoreMethods
 * @ignoreUtils
 * @ignoreProperties ltPropRemoveMultiple,ltPropYield,ltPropOptions,ltPropUserValue,ltPropSystemValue,ltPropIconClass,ltPropPlaceholder,ltPropNoResult,ltPropMaxCount,ltPropAjaxRequest,ltPropDisplayValue,ltPropDisabledList,ltPropTooltip,ltPropBoxClass,ltPropIsOpen,ltPropFixPositionOnOpen
 * @import lyte-calendar
 * @condition ltPropType date,datetime
 * @ignoreMethods
 * @ignoreUtils
 */

class LyteInputComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    init(frm_obs) { 
        var data = this.data, type = data.ltPropType;
          if( type == 'time' || type == "datetime" ){
            this._prevent = true
            this.timeInValChange();
            this.startEndTimeObs();
            delete this._prevent;
            if( type.indexOf( 'time' ) != -1 && data.ltPropDropdown ){
                this.dropdownConstruct();
                if( type == "time" ) {
                    // data.ltPropDefaultTime = data.ltPropDefaultTime || data.ltPropValue;
                    this.setData( 'ltPropDefaultTime', data.ltPropDefaultTime || data.ltPropValue );
                }
            }
          } 
          if( type == 'date' || type == "datetime" ){
            if( type == 'date' ) {
                // data.ltPropCurrentDate = data.ltPropCurrentDate || data.ltPropValue; 
                this.setData( 'ltPropCurrentDate', data.ltPropCurrentDate || data.ltPropValue );
            } 

            if( data.ltPropAria ){
                this.setData( 'randomId', "lyteInput_" + parseInt( Math.random() * 1e6 ) );
                this.$addon.objectUtils( data.ltPropCalendarProperties, 'add', 'disableNavigation', false );
            }

            this.dateRegexFind();
          }

          if( !frm_obs ){
            this.$node.classList.add('lyteInput');
            this.$node.classList.add('horizontal');
          }

          if( this.getMethods( 'beforeRender' ) ) {
           /**
            * @method beforeRender
            * @version 1.0.1
            */
                this.executeMethod( 'beforeRender', this.$node );
            }
    }

    englishDate() {
        if( (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment) && this.data ){
            var format = this.data.ltPropFormat,
            date = this.data.ltPropCurrentDate,
            final = '';

            if( date ){
                final = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( date, format, { i18n : true } ).format( format );
            } 
            this.setData( 'ltPropConvertedDate', final );
        }
    }

    englishTime() {
        if( (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment) && this.data ){
            var final = this.data.ltPropDefaultTime;

            if( this.data.ltPropTimeFormat == 12 ){
                var format = 'hh:mm A';
                final = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( final, format, { i18n : true } ).format( format );
            }
            this.setData( 'ltPropConvertedTime', final );
        }
    }

    didConnect() {
           var type = this.data.ltPropType/*, divIdInput= this.$node, lyteLabelDiv= this.$node.querySelector( '.lyteLabel' ),lyteFieldDiv= this.$node.querySelector( '.lyteField' )*/; 
           if( type == 'date' || type == "datetime" )
                { 
                    window._lyteUiUtils.input = window._lyteUiUtils.input || {};
                    this.$node._random = 'LyteInput' + Date.now();
                    window._lyteUiUtils.input[ this.$node._random ] = this.$node;
                    this.englishDate();
                }   
            if(type == 'time' || type == "datetime" ){
                if(this.getData('ltPropDropdown')){
                    var drop = this.dropdown = this.$node.querySelector( 'lyte-dropdown' );
                    this.dropbox =  drop.component.childComp ? drop.component.childComp : drop.querySelector( 'lyte-drop-box' );
                    drop.element = this.$node.querySelectorAll( 'input' )[ type == 'datetime' ? 1 : 0 ];

                    if( this.data.ltPropDropdownShow ){
                        drop.resetPosition();
                    }

                }
                this.englishTime();
            }
            if(type == 'time' || type == 'date' || type == "datetime"){
                if(this.getData('ltPropWheel')){
                    var func = this.handleWheel.bind(this);
                    this.setData('eventListeners.timeWheel', func);
                    this.$node.addEventListener('wheel', func);
                }
                this._manualset = true
                if( type == "time" ){
                    this.setData( 'ltPropValue', this.data.ltPropDefaultTime );
                } else if( type == "date" ) {
                    this.setData( 'ltPropValue', this.data.ltPropCurrentDate );
                } 
                delete this._manualset;
            }  
            type = type == "textarea" ? "textarea" : 'input';  
              [ 'focus', 'blur', 'click', 'select' ].forEach( function( item ){
                    this.$node[ item ] = function( arg ){
                      this.$node.querySelector( type )[item]( arg );
                    }.bind( this )      
              }.bind( this ) )                      
            if(this.getMethods('afterRender')){
               /**
                * @method afterRender
                * @version 1.0.1
                */                
                this.executeMethod('afterRender', this.$node);
            }
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.measure( function(){
                this._dir = window._lyteUiUtils.getRTL();
                if( this._dir ) {
                    _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.mutate( function(){
                        this.$node.classList.add( 'lyteRTL' );
                        if( this.$node.calendarDiv ) {
                            this.$node.calendarDiv.classList.add( 'lyteRTL' );
                        }
                    }.bind( this ) )
                }   
            }.bind( this ) );
    }

    didDestroy(frm_obs) {
        if( !frm_obs && this.$node.calendarComp ){
            this.$node.calendarComp.remove();
            delete this.$node.calendarComp; 
            delete this.$node.calendarDiv;
            delete this._assCalendar;
            delete this.$node.revertToSelected;
        }
        var evt = this.getData('eventListeners'), type = this.getData('ltPropType');
        // if(type == 'date' || type == "datetime" ){
            var __input = window._lyteUiUtils.input || {};
            delete __input[ this.$node._random ];
        // }
        // if(type == 'time' || type == "datetime" ){
            delete this.dropdown; delete this.dropbox;
        // }
        if(evt.hasOwnProperty('mouseup')){
            document.removeEventListener('mouseup', evt.mouseup);
        }   
    }

    rtlfunc(lft, bcr, ww) {
        if( this._dir ) {
            if( bcr ) {
                if( lft == 'left' ) {
                    return ww - bcr.right;
                } else if( lft == 'clientX' ) {
                    return ww - bcr.clientX
                } else if( lft == 'offsetLeft' ) {
                    return ww - bcr.width - bcr.offsetLeft;
                }
                return ww - bcr.left;
            } else if( lft == 'left' ) {
                return 'right';
            } 
        }
        return bcr ? bcr[ lft ] : 'left';
    }

    calenderClickHide(event) {
        if( !this.data.ltPropBindToBody ){
            return
        }
        var calendarComp = this.$node.calendarDiv, tgt = event.target.correspondingElement || event.target;
        if( calendarComp.classList.contains( 'lyteCalendarHidden' ) ){
            return;
        }
        if( tgt && [ "LYTE-DROP-BOX", "LYTE-DROP-ITEM", "LYTE-DROP-BODY" ].indexOf( tgt.tagName ) != -1 ) {
            while( tgt.tagName != "LYTE-DROP-BOX" && tgt.tagName != "BODY" ) {
                tgt = tgt.parentNode;
            }
            if( tgt.tagName == "LYTE-DROP-BOX" ) {
                tgt = tgt.origindd
            }
        }

        var is_contains_target = this.data.ltPropAria ? _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( tgt ).hasClass( 'lyteInputCalendarIcon' ) : this.$node.contains( tgt ),
        is_target_is_calendar = calendarComp.contains( tgt );

        if( !is_contains_target && !is_target_is_calendar ) {         
            this._hideCalendar();
        } else if( tgt && /*!tgt.classList.contains( 'lyteCalDateSpan' ) && !tgt.classList.contains( 'lyteCalCdate' ) &&*/ calendarComp.contains( tgt ) ) {
            this._byManual = true;
            this.$node.focus();
            delete this._byManual;
        }
    }

    scrollFunc(event) {
        if( event && event.type == 'resize' && window._lyteUiUtils.isMobile ) {
            return;
        }
        var thisCalendar = this.$node.calendarDiv;
         _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.mutate(function(){
            event && event.type == "orientationchange" ? setTimeout( this.setCss.bind( this ), 500 ) : this.setCss();
             _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.measure(function(){
                var boundary = this.data.ltPropBoundary, input = this.$node.getBoundingClientRect(), wwidth = window.innerWidth;
                if(thisCalendar && event && event.type == 'scroll' && !thisCalendar.classList.contains('lyteCalendarHidden')){
                    if((boundary.hasOwnProperty('left') ? ( this.rtlfunc.call( this, 'left', input, wwidth ) < boundary.left) : false) || (boundary.hasOwnProperty('right') ? ( this.rtlfunc.call( this, 'right', input, wwidth ) > boundary.right) : false)  || (boundary.hasOwnProperty('top') ? (input.top < boundary.top) : false)  || (boundary.hasOwnProperty('bottom') ? (input.bottom > boundary.bottom) : false))      
                        {  

                            this._hideCalendar( true );                        }
                 } else if( this._closedbyscrl ){
                    if( ( boundary.left != undefined ? ( this.rtlfunc.call( this, 'left', input, wwidth ) >= boundary.left ) : true ) && ( boundary.right != undefined ? ( this.rtlfunc.call( this, 'right', input, wwidth ) <= boundary.right ) : true )  && ( boundary.top != undefined ? (input.top >= boundary.top) : true )  && (boundary.bottom != undefined ? ( input.bottom <= boundary.bottom ) : true ) ){
                        this._byManual = true;
                        this.$node.focus();
                        delete this._byManual;
                        this.showCalendar( {}, this.$node.querySelector( 'input' ) );
                        delete this._closedbyscrl;
                    }    
                 }
             }.bind(this))  
         }.bind(this))
    }

    rsizefun(evt) {
        var isTch = evt.touches,
        ev = evt,
        cb = "onResizeStart",
        __this = this,
        __data = __this.data,
        $node = __this.$node;

        if( isTch && isTch.length > 1 ){
            return;
        } else if( isTch ){
            ev = isTch[ 0 ];
        }

        if( __this.getMethods( cb ) && __this.executeMethod( cb, evt, $node ) == false ){
            return;
        }

        var tagName = 'getElementsByTagName',
        textarea = $node[ tagName ]( 'textarea' )[ 0 ],
        resize = __data.ltPropTextAreaResize || {},
        __doc = document,
        __add = 'addEventListener',
        label = $node[ tagName ]( 'label' )[ 0 ],
        gbcr = "getBoundingClientRect",
        label_bcr = label ? label[ gbcr ]() : {},
        bcr = textarea[ gbcr ](),
        this_bcr = $node[ gbcr ](),
        comp_style = window.getComputedStyle( textarea ),
        paddingLeft = parseFloat( comp_style.paddingLeft ),
        fn = function( __min, prop ){
            var __value = comp_style[ __min ];

            if( /%$/.test( __value ) ){
                return this_bcr[ prop ] * parseFloat( __value ) / 100;
            } else {
                return parseFloat( __value );
            }

        },
        __obj = {},
        __obj1 = {},
        __obj2 = {},
        __obj3 = {};

        if( resize.horizontal ){
            __this.__minwidth = fn( "minWidth", 'width' );
            __this.__maxwidth = fn( "maxWidth", 'width' );

            __obj.width = this_bcr.width;
            __obj1.width = bcr.width;
            __obj2.width = __obj2.minWidth = label_bcr.width;
            __obj3.width = __obj3.minWidth = "auto";
        }

        if( resize.vertical ){
            __this.__minheight = fn( "minHeight", 'height' );
            __this.__maxheight = fn( "maxHeight", 'height' );

            __obj.height = this_bcr.height;
            __obj1.height = bcr.height;
            __obj2.height = label_bcr.height;
            __obj3.height = "auto";
        }


        __this.__clientX = ev.clientX;
        __this.__clientY = ev.clientY;

        __doc[ __add ]( isTch ? 'touchmove' : "mousemove", __this.__rmove = __this.textareaResize.bind( __this ), true );
        __doc[ __add ]( isTch ? 'touchend' : 'mouseup', __this.__rend = __this.mouseup.bind( __this ), true );

        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( $node ).addClass( 'resizeStart' ).css( __obj );
        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( textarea ).css( __obj1 ).parent().css( __obj3 );
        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( label ).css( __obj2 );

        evt.preventDefault();
        return false;
     }

    mouseup(evt) {
       var __doc = document,
       __remove = "removeEventListener",
       isTch = evt.type == "touchend",
       cb = "onResizeEnd",
       __this = this,
       $node = __this.$node;

        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( $node ).removeClass( 'resizeStart' );

       __doc[ __remove ]( isTch ? "touchmove" : "mousemove", __this.__rmove, true );
       __doc[ __remove ]( isTch ? "touchend" : "mouseup", __this.__rend, true );

       __this.getMethods( cb ) && __this.executeMethod( cb, evt, __this._resize_move, $node );

       [ '__minwidth', '__minheight', '__maxheight', '__maxwidth', '__clientY', '__clientX', '_resize_move', '__remove', '__rend' ].forEach( function( item ){
           delete __this[ item ];
       });
    }

    textareaResize(evt) {
       var __this = this,
       __data = __this.data,
       isTch = evt.touches,
       ev = evt;

       if( isTch && isTch.length > 1 ){
           return;
       } else if( isTch ){
           ev = isTch[ 0 ];
           evt.preventDefault();
       }

       __this._resize_move = true;

       var xInc = -( __this.__clientX - ( __this.__clientX = ev.clientX ) ) * ( this._dir ? -1 : 1 ) ,
       yInc = -( __this.__clientY - ( __this.__clientY = ev.clientY ) ),
       __obj = {},
       __obj1 = {},
       __setData = {},
       resize = __data.ltPropTextAreaResize || {},
       textarea = __this.$node.getElementsByTagName( 'textarea' )[ 0 ],
       $node = __this.$node,
       fn = function( prop, __min, __max, inc ){
           var current = parseFloat( textarea.style[ prop ] ),
           __new = current + inc;

           if( !isNaN( __min ) ){
               if( __min > __new ){
                   inc = __min - current;
                   __new = current + inc;
               }
           }

           if( !isNaN( __max ) ){
               if( __max < __new ){
                   inc = __max - current;
               }
           }

           __obj[ prop ] = current + inc;
           __obj1[ prop ] = parseFloat( $node.style[ prop ] ) + inc;
       };

       if( resize.horizontal ){
          fn( 'width', __this.__minwidth, __this.__maxwidth, xInc );
          __setData.ltPropWidth = __obj1.width + 'px';
       }

       if( resize.vertical ){
          fn( 'height', __this.__minheight, __this.__maxheight, yInc );
          __setData.ltPropHeight = __obj.height + 'px';
       }

       _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( $node ).css( __obj1 );
       _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( textarea ).css( __obj );

       __this._prevent = true;
       __this.setData( __setData );
       delete __this._prevent;

    }

    heightFunc() {
        if( !this._prevent ){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( 'input,textarea', this.$node ).eq( 0 ).css( 'height', this.getData( 'ltPropHeight' ) ); 
        }
     }

    widthfun() {
        if( !this._prevent ){
            this.$node.style.width = this.getData( 'ltPropWidth' );
        }
    }

    appearanceFun() {
        var type = this.data.ltPropType, 
        $node = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node );

        if( this.getData( 'ltPropAppearance' ) == 'box' ) {
            if(type =='search') {
                $node.find( '.lyteField' ).addClass( 'lyteInputBoxSearch' );
            }

            $node.addClass( 'lyteInputBox' ).removeClass( 'lyteInput' );
        } else {
            if(type =='search') {
                $node.find( '.lyteField' ).removeClass( 'lyteInputBoxSearch' );
            }

            $node.addClass( 'lyteInput' ).removeClass( 'lyteInputBox' );
        }       
    }

    directionfun() {
        var $node = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node );

        if( this.data.ltPropDirection == 'vertical' ){
            $node.addClass( 'vertical' ).removeClass( 'horizontal' );
        } else {
            $node.removeClass( 'vertical' ).addClass( 'horizontal' );
        }
    }

    data(arg1) {

        var default_values = window._lyteUiUtils.getDefault( 'lyte-input' ),
        __boolean = "boolean",
        __string = "string",
        __number = "number",
        __object = "object",
        __array = "array",
        __value;

        return Object.assign(super.data({
           /**
            * @componentProperty {boolean} ltPropDisabled=false
            * @version 1.0.0
            */            
            ltPropDisabled : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false }),
           /**
            * @componentProperty {boolean} ltPropAutofocus=false
            * @version 1.0.0
            */            
            ltPropAutofocus : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false }),
           /**
            * @componentProperty {on | off} ltPropAutocomplete=off
            * @version 1.0.0
            */            
            ltPropAutocomplete : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.autocomplete || 'off' }),
           /**
            * @componentProperty {number} ltPropMaxlength
            * @version 1.0.0
            */            
            ltPropMaxlength : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : default_values.maxlength }),
           /**
            * @componentProperty {string} ltPropName=''
            * @version 1.0.0
            */            
            ltPropName : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
           /**
            * @componentProperty {string} ltPropPlaceholder=''
            * @version 1.0.0
            */            
            ltPropPlaceholder : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
           /**
            * @componentProperty {boolean} ltPropReadonly=false
            * @version 1.0.0
            */            
            ltPropReadonly : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false }),
           /**
            * @componentProperty {string} ltPropValue=''
            * @version 1.0.0
            */            
            ltPropValue : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
           /**
            * @componentProperty {string} ltPropWidth=''
            * @version 1.0.0
            */            
            ltPropWidth : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.width || '' }),
           /**
            * @componentProperty {string} ltPropTabIndex=0
            * @version 1.0.0
            */            
            ltPropTabIndex : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.tabIndex || '0' }),
           /**
            * @componentProperty {text | number | password | date | time | textarea | datetime} ltPropType=text
            * @version 1.0.0
            */            
            ltPropType : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
           /**
            * @componentProperty {flat | box} ltPropAppearance=flat
            * @version 1.0.0
            */            
            ltPropAppearance : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.appearance || '' }),
           /**
            * @componentProperty {vertical | horizontal} ltPropDirection=vertical
            * @version 1.0.0
            */            
            ltPropDirection : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.direction || 'vertical' }),
           /**
            * @componentProperty {string} ltPropLabel=''
            * @version 1.0.0
            */            
            ltPropLabel : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
           /**
            * @componentProperty {string} ltPropId=''
            * @version 1.0.0
            */            
            ltPropId : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
           /**
            * @componentProperty {string} ltPropClass=''
            * @version 1.0.0
            */            
            ltPropClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.class || '' }),
           /**
            * @componentProperty {string} ltPropStyle=''
            * @version 1.0.0
            */            
            ltPropStyle : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.style || '' }),
           /**
            * @componentProperty {string} ltPropWrapperStyle=''
            * @version 1.0.0
            */            
            ltPropWrapperStyle : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.wrapperStyle || '' }),
           /**
            * @componentProperty {string} ltPropHeight=''
            * @version 1.0.0
            */            
            ltPropHeight : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.height || '' }),
           /**
            * @componentProperty {string} ltPropPattern='.+'
            * @version 1.0.2
            */            
            ltPropPattern : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.pattern || '.+' }),
           /**
            * @componentProperty {string} ltPropInputTitle=''
            * @version 1.0.2
            */            
            ltPropInputTitle : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),

            // data for textarea
           /**
            * @componentProperty {number} ltPropRows
            * @version 1.0.0
            * @condition ltPropType textarea
            */            
            ltPropRows : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : void 0 }),
           /**
            * @componentProperty {number} ltPropCols
            * @version 1.0.0
            * @condition ltPropType textarea
            */            
            ltPropCols : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : void 0 }),
            /**
             * @typedef {object} inputResize
             * @property {boolean} vertical=true
             * @property {boolean} horizontal=true
             */

            /**
             * @componentProperty {inputResize} ltPropTextAreaResize
             * @version 1.0.0
             * @condition ltPropType textarea
             */            
            ltPropTextAreaResize : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : default_values.textAreaResize || { vertical : true, horizontal : true } }),

            // data for number
           /**
            * @componentProperty {number} ltPropMax
            * @version 1.0.0
            * @condition ltPropType number
            */            
            ltPropMax : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : void 0 }),  
           /**
            * @componentProperty {number} ltPropMin
            * @version 1.0.0
            * @condition ltPropType number
            */                      
            ltPropMin : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : void 0 }),
           /**
            * @componentProperty {number} ltPropStep=1
            * @version 1.0.0
            * @condition ltPropType number
            */                        
            ltPropStep : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number ,{ default : default_values.step || 1 }),

            // data for time
           /**
            * @componentProperty {12 | 24} ltPropTimeFormat=12
            * @version 1.0.0
            * @condition ltPropType number
            */            
            ltPropTimeFormat : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : default_values.timeFormat || 12 }),
           /**
            * @componentProperty {number} ltPropHourInterval=1
            * @version 1.0.0
            * @condition ltPropType time,datetime
            */            
            ltPropHourInterval : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : default_values.hourInterval || 1 }),
           /**
            * @componentProperty {string} ltPropDefaultTime=''
            * @version 1.0.0
            * @condition ltPropType time,datetime
            */            
            ltPropDefaultTime : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
           /**
            * @componentProperty {number} ltPropMinuteInterval=30
            * @version 1.0.0
            * @condition ltPropType time,datetime
            */            
            ltPropMinuteInterval : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : default_values.minuteInterval || 30 }),
           /**
            * @componentProperty {boolean} ltPropDropdown=false
            * @version 1.0.0
            * @condition ltPropType time,datetime
            */            
            ltPropDropdown : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.dropdown || false }),
           /**
            * @componentProperty {boolean} ltPropShowInterval=false
            * @version 1.0.0
            * @condition ltPropType time,datetime
            */            
             ltPropShowInterval : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.showInterval || false }),
           /**
            * @componentProperty {string} ltPropStartTime=''
            * @version 1.0.0
            * @condition ltPropType time,datetime
            */
            ltPropStartTime : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.startTime || '' }),
           /**
            * @componentProperty {string} ltPropEndTime=''
            * @version 1.0.0
            * @condition ltPropType time,datetime
            */
            ltPropEndTime : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.endTime || '' }),
             /**
            * @componentProperty {boolean} ltPropConvertToNearest=false
            * @version 2.2.14
            * @condition ltPropType time,datetime
            */
            ltPropConvertToNearest : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.convertToNearest || false }),
             /**
            * @componentProperty {boolean} ltPropValidateOnBlur=false
            * @version 2.2.14
            * @condition ltPropType time,datetime
            */
            ltPropValidateOnBlur : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.validateOnBlur || false }),

            // data for calendar
            ltPropFillRows : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : ( __value = default_values.fillRows ) == void 0 ? true : default_values }),
            ltPropNumberOfRows : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : default_values.numberOfRows || 6 }),
            ltPropMinDate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : "" }),
            ltPropMaxDate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : "" }),
            ltPropStartWeekDay : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : default_values.startWeekDay || 1 } ),
            ltPropMonthHeaderFormat : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default: default_values.monthHeaderFormat || 'MMMM YYYY' } ),
            daysOfWeek : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __array, { default : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat' ] } ),
            ltPropYear : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : ( __value = default_values.year ) == void 0 ? true : __value } ),
            ltPropFormat : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.format || "MM/DD/YYYY" }),
            viewDate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : {} }),
            ltPropStartDate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
            ltPropEndDate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : ''}),
            ltPropCurrentDate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : ''}),
            /**
            * @componentProperty {boolean} ltPropBindToBody=true
            * @version 2.1.0
            * @condition ltPropType time,date,datetime
            */
            ltPropBindToBody : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : ( __value = default_values.bindToBody ) == void 0 ? true : __value }),
           /**
            * @componentProperty {string} ltPropCalendarClass=''
            * @version 2.1.0
            * @condition ltPropType date,datetime
            */
            ltPropCalendarClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.calendarClass || "" }),
            ltPropHeaderType : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.headerType || "default" }),

            // data for dropdown
           /**
            * @componentProperty {boolean} ltPropDropdownDisabled=false
            * @version 1.0.2
            * @condition ltPropType time,datetime
            */
            ltPropDropdownDisabled : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false}),
           /**
            * @componentProperty {boolean} ltPropDropdownShow=false
            * @version 1.0.2
            * @condition ltPropType time,datetime
            */
            ltPropDropdownShow : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false}),
           /**
            * @componentProperty {boolean} ltPropDropdownCallout=false
            * @version 2.0.0
            * @condition ltPropType time,datetime
            */
            ltPropDropdownCallout : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false }),
           /**
            * @componentProperty {boolean} ltPropDropdownFreeze=false
            * @version 1.0.2
            * @condition ltPropType time,datetime
            */
            ltPropDropdownFreeze : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : ( __value = default_values.dropdownFreeze ) == void 0 ? false : __value }),
           /**
            * @componentProperty {string} ltPropDropdownId=''
            * @version 2.2.2
            * @condition ltPropType time,datetime
            */
            ltPropDropdownId : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
           /**
            * @componentProperty {string} ltPropDropdownClass=''
            * @version 2.2.2
            * @condition ltPropType time,datetime
            */
            ltPropDropdownClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.dropdownClass || '' }),

            // for dropdown and calendar
            ltPropPosition : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.position || 'down'}),
            ltPropBoundary : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : default_values.boundary || {} }),

            // for date and time
            /**
            * @componentProperty {boolean} ltPropWheel=false
            * @version 2.0.0
            * @condition ltPropType time,datetime,date
            */
            ltPropWheel : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.wheel || false } ),
           /**
            * @componentProperty {boolean} ltPropYield=false
            * @version 1.0.2
            * @condition ltPropType time,datetime,date
            */
            ltPropYield : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.yield || false}),
            ltPropAnimate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.animate || false }),
           /**
            * @componentProperty {boolean} ltPropPreventSelection=false
            * @version 2.2.9
            * @condition ltPropType date
            */
            ltPropPreventSelection : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.preventSelection || false }),
           /**
            * @componentProperty {boolean} ltPropPreventKeys=false
            * @version 2.2.11
            * @condition ltPropType date
            */
            ltPropPreventKeys : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.preventKeys || false }),
           /**
            * @componentProperty {number} ltPropUpdateDelay=250
            * @version 2.0.0
            */
            ltPropUpdateDelay : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : default_values.hasOwnProperty( 'updateDelay' ) ? default_values.updateDelay : 250 }),
           /**
            * @componentProperty {boolean} ltPropAutoUpdate=true
            * @version 1.0.2
            * @default true
            */
            ltPropAutoUpdate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : ( __value = default_values.autoUpdate ) == void 0 ? true : __value }),
           /**
            * @componentProperty {number} ltPropCallbackDelay=0
            * @version 2.2.8
            */
            ltPropCallbackDelay : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number, { default : default_values.hasOwnProperty( 'callbackDelay' ) ? default_values.callbackDelay : 0 }),
           /**
            * @componentProperty {boolean} ltPropCloseIcon=false
            * @version 2.0.0
            * @condition ltPropType date,text,password,number
            */
            ltPropCloseIcon : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.closeIcon || false }),

            // datetime type
            /**
             * @experimental ltPropTimePlaceholder
             */
            ltPropTimePlaceholder : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { default : "" }),

            ltPropCommonPlaceholder : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { default : '' }),
            /**
             * @experimental ltPropTimeClass
             */
            ltPropTimeClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.timeClass || "" }),

            // aria
           /**
            * @componentProperty {boolean} ltPropAria=false
            * @version 3.1.0
            */
            ltPropAria : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.aria || false }),
           /**
            * @componentProperty {object} ltPropAriaAttributes
            * @version 3.1.0
            * @default {}
            */
            ltPropAriaAttributes : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : default_values.ariaAttributes || {}, watch : true }),

            ltPropTimeAriaAttributes : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : default_values.timeAriaAttributes || {}, watch : true } ),
           /**
            * @componentProperty {boolean} ltPropFocus=false
            * @version 3.2.0
            */
            ltPropFocus : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false }),
           /**
            * @componentProperty {object} ltPropCalendarProperties
            * @version 2.2.20
            * @default {}
            * @component lyte-calendar
            * @condition ltPropType date,datetime
            */

            ltPropCalendarProperties : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : default_values.calendarProperties || { disableNavigation : true } }),
           /**
            * @componentProperty {object} ltPropDropdownProperties
            * @version 2.2.20
            * @default {}
            * @component lyte-dropdown
            * @condition ltPropType time,datetime
            */

            ltPropDropdownProperties : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : default_values.dropdownProperties || {} }),

           /**
            * @componentProperty {string} ltPropScope=''
            * @version 2.2.20
            * @condition ltPropType date,datetime
            */

            ltPropScope : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.scope || "" }),

           /**
            * @componentProperty {boolean} ltPropHeaderYield=false
            * @version 3.20.0
            * @condition ltPropType date,datetime
            */

            ltPropHeaderYield : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.headerYield || false }),

           /**
            * @componentProperty {string} ltPropConvertedDate=''
            * @version 3.20.0
            * @condition ltPropType date,datetime
            */

            ltPropConvertedDate : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),

           /**
            * @componentProperty {string} ltPropConvertedTime=''
            * @version 3.20.0
            * @condition ltPropType date,datetime
            */

            ltPropConvertedTime : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),

            /**
            * @componentProperty {boolean} ltPropPreventDropdownNavigation=false
            * @version 3.28.0
            * @condition ltPropType date,datetime
            */

            ltPropPreventDropdownNavigation : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.preventDropdownNavigation || false }),

            /**
            * @componentProperty {string} ltPropInputWrapperClass=""
            * @version 3.30.0
            */
            ltPropInputWrapperClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.inputWrapperClass || '' }),

            /**
            * @componentProperty {string} ltPropWrapperClass=""
            * @version 3.32.0
            */
            ltPropWrapperClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : default_values.wrapperClass || "" }),

            ltPropTimezoneHandling : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : default_values.timezoneHandling || false }),

           /**
            * @componentProperty {boolean} ltPropFocusAtEnd=false
            * @version 3.86.0
            */
            ltPropFocusAtEnd : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false } ),

            /**
            * @componentProperty {boolean} ltPropPasswordIcon=false
            * @version 3.91.0
            * @condition ltPropType password
            */
            ltPropPasswordIcon : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false } ),
            /**
            * @componentProperty {boolean} ltPropPasswordVisibility=false
            * @version 3.91.0
            * @condition ltPropType password
            */
            ltPropPasswordVisibility : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false } ),
            /**
             * @typedef {object} passwordTooltip
             * @property {string} show="Show password"
             * @property {string} hide="Hide password"
             */

            /**
            * @componentProperty {passwordTooltip} ltPropPasswordTooltip=false
            * @version 3.91.0
            * @condition ltPropType password
            */
            ltPropPasswordTooltip : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : {
                show : "Show password",
                hide : "Hide password"
            } } ),
            /**
            * @componentProperty {string} ltPropTooltipConfig='{"position" : "bottom"}'
            * @version 3.91.0
            * @condition ltPropType password
            */
            ltPropTooltipConfig : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '{"position" : "bottom"}' } ),
            /**
             * @typedef {object} ariaLabel
             * @property {string} modal="Choose date"
             * @property {string} button="Change date"
             */

            /**
            * @componentProperty {ariaLabel} ltPropAriaLabel
            * @version 3.91.0
            */
            ltPropAriaLabel : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : { modal : "Choose date", button : "Change date" } } ), 
           /**
            * @componentProperty {string} ltPropDataTabindex = 0
            * @version 3.91.0
            */
            ltPropDataTabindex : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : "0" } ),
            /**
             * @componentProperty {string} ltPropLabelClass=""
             * @version 3.98.0
             */
            ltPropLabelClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : "" } ),

            // system data

            eventListeners : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, {default : {}}),
            selectedField : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : {}}),
            endMinute : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number ),
            startMinute : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __number ),
            dropdownData : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __array, { default : []}),
            originalData : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __array, { default : []}),
            dateRange : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : { day : [], month : [], year : []}}),
            // Dont change this property name. Already some people from crm using this for passing their custom translations
            meridian : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __object, { default : {AM : (window._lyteUiUtils ? window._lyteUiUtils.i18n('AM') : 'AM'), PM : (window._lyteUiUtils ? window._lyteUiUtils.i18n('PM') : 'PM')}}),
            hour : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : window._lyteUiUtils.i18n('hour')}),
            min : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : window._lyteUiUtils.i18n('min')}),
            selectedDateField : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : ""}),
            preventObs : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : true}),
            resize : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : true}),
            resizeClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : "lyteTextareaResize" } ),
            pos : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : ""}),
            isSearch : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false }),
            isBox : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : '' }),
            dateOrder : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __array, { default : [] }),
            showPlaceholder : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false }),

            lyteUnbound : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false }),

            randomId : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : "" } ),

            navigation : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __boolean, { default : false } ),
            passwordClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : "lyteInputShowPasswordIcon" } ),
            passwordTooltip : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default: "" } ),

            isExpanded : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( __string, { default : "false" } )
        }), arg1);
}

    getDateFromFormat(tdate, format) {

        var is_i18n = this.data.ltPropCalendarProperties.i18n;

        if( is_i18n ){
            var format = this._assCalendar.component.getRelevantFormat( format );

            return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( tdate ).i18N( format ); 
        } else {
            return this._assCalendar.component.getDateFromFormat(tdate, format);
        }

    }

    dateValidation(date) {
        if( !this._assCalendar ){
            return false;
        }
        var timeObj = this._assCalendar.component.stringToDate( date, this.data.ltPropFormat );
         if( timeObj == 'Invalid Date'){
            return false
         }
         return timeObj;
    }

    dateRegexFind(arg) {
         var format, dateRange = this.getData('dateRange'),
         dateOrder = [];
         if(!arg){
             format = this.getData('ltPropFormat');
         }else{
             format = arg.newValue;
         }
         var dayReg = /D+/ig.exec(format), monthReg = /M+/ig.exec(format), yearReg = /Y+/ig.exec(format);
         if( dayReg ){
             dateRange.day[0] = dayReg.index; dateRange.day[1] = dayReg.index + dayReg[0].length;
             dateOrder.push( { value : dateRange.day[ 0 ], name : "day", format : format.match( /D+/ig )[ 0 ] } );
         }
         if( monthReg ){
             dateRange.month[0] = monthReg.index; dateRange.month[1] = monthReg.index + monthReg[0].length;
             dateOrder.push( { value : dateRange.month[ 0 ], name : "month", format : format.match( /M+/ig )[ 0 ] } );
         }
         if( yearReg ){
             dateRange.year[0] = yearReg.index; dateRange.year[1] = yearReg.index + yearReg[0].length;
             dateOrder.push( { value : dateRange.year[ 0 ], name : "year", format : format.match( /Y+/ig )[ 0 ] } )
         }
         dateOrder.sort( function( a, b ){
             return a.value - b.value;
         } )
         this.setData( 'dateOrder', dateOrder );
     }

    constructingArr(i, startTime, format) {
        if(i < startTime){
            i += 1440;
        }
        var interval = (i - startTime) / 60,
        temp = {};
        temp.time = this.convertToRailway(i, true, format).trim();
        temp.interval = interval < 1 ? ((i - startTime) + ' '+ this.getData('min')) : ((interval % 1 == 0 ? interval : interval.toFixed(1)) + ' ' + this.getData('hour'));
        return temp;
    }

    dropdownConstruct() {
        if( this._prevent ) {
            return
        }
        var startTime = this.getData('startMinute'), i, temp = [], endTime = this.getData('endMinute'), hrInter = this.getData('ltPropHourInterval'), minInt = this.getData('ltPropMinuteInterval'), format = this.getData('ltPropTimeFormat'),
        arr = [];
        if(startTime >= endTime){
            endTime += 1440;
        }
        for(i = startTime; i <= endTime; i += minInt){
             var current = this.constructingArr(i, startTime, format);
             if( arr.indexOf( current.time ) == -1 ){
                 temp.push( current );
                 arr.push( current.time );
             }
        }

        if( this.data.ltPropTimezoneHandling ){
            this.check_dst( temp );
        }
        this.setData('originalData', temp);

        if( this.data.ltPropDropdownShow ){
            this.setData( 'dropdownData', temp );
        }
    }

    constructNewDrop(input, format) {
        var temp = [], startTime = this.getData('startMinute');
        if(format == 12){
            var min = this.convertToRailway(input.value.trim());
            var ret = this.maxValCheck(min);
            if(ret != false){
                temp.push(this.constructingArr(min, startTime, 12));
            }
            min += 720;
            ret = this.maxValCheck(min % 1440);
            if(ret != false){
                temp.push(this.constructingArr(min, startTime, 12));
            }
        }else{
            var min = this.convertToRailway(input.value.trim());
            var ret = this.maxValCheck(min);
            if(ret != false){
                temp.push(this.constructingArr(min, startTime, 24));
            }
        }
        this.dropdown.ltProp( 'selected', '' );
        if( temp.length == 0 && this.data.ltPropValidateOnBlur ){
            this.data.ltPropStartTime && temp.push( { time : this.data.ltPropStartTime, interval : "" } );
            this.data.ltPropEndTime && temp.push( { time : this.data.ltPropEndTime, interval : "" } );
        }
        this.setData('dropdownData', temp);
        this.dropdown.ltProp( 'selected', this.data.ltPropDefaultTime );
    }

    getCorrectTime(timeFormat) {

        if( (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment) ){
            var date = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment();
            if( timeFormat == 12 ){
                return date.i18N( "hh:mm A" );
            } else{
                return date.format( "HH:mm" );
            }
        }

        var time = new Date(), hr = time.getHours(), min = time.getMinutes().toString(), meridian = this.getData('meridian'), mer = hr > 11 ? meridian.PM : meridian.AM;
        if(min.length == 1){
            min = '0' + min;
        }
        if(timeFormat == 12){
            if( hr != 12 ) {
                hr = (hr%12).toString();
                if(hr.length == 1){
                    hr = '0' + hr;
                }
            }
            return hr + ':' + min + " " + mer;
        }else{
            if(hr < 10){
                hr = '0' + hr;
            }
            return hr + ":" + min;
        }

    }

    handleWheel(evt) {
        var input = evt.target, type = this.getData('ltPropType');
        if( input.tagName != 'INPUT' || Math.abs( evt.deltaY ) <= Math.abs( evt.deltaX ) ) {
            return
        }
        if(type == 'time' || ( type == "datetime" && input.id == "time" ) ){
            if( this._emptytimeValue ){
                return;
            }
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.mutate(function(){
               var selectedField = this.getData('selectedField');
                if(!selectedField.prop || input.selectionStart > 3){
                    // settting initial selection if input is not focused
                    input.selectionStart = 0;
                    input.selectionEnd = 2;
                    this.setData('selectedField', {prop : 'hour', val : 0});
                    selectedField = {prop : 'hour', val : 0};
                }
                if(evt.deltaY < -10){
                    this.timeDecrease.call(this, input, {}, selectedField.prop, input.selectionStart, input.selectionEnd)
                }else if(evt.deltaY > 10){
                    this.timeIncrease.call(this, input, {}, selectedField.prop, input.selectionStart, input.selectionEnd)
                }
            }.bind(this))
        }else if( type == 'date' || ( type == "datetime" && input.id == "date" ) ){
            if(evt.deltaY < -10){
                evt.keyCode = 40;
                this.calendarKeydown.call(this, evt, input);
            }else if(evt.deltaY > 10){
                evt.keyCode = 38;
                this.calendarKeydown.call(this, evt, input);
            }
        }
        evt.preventDefault();   
    }

    convertToRailway(val, flag, format) {
        var meridian = this.getData('meridian');
        if(!flag){
            var hr = parseInt(val.slice(0, 2));
            var min = parseInt(val.slice(3, 5));
            if(val.length != 5){
                var mer = val.slice(6, val.length);
                return (mer == meridian.PM ? ((hr % 12) + 12) : hr % 12) * 60 + min;
            }else{
                return (hr * 60 + min);
            }
        }else{
            var hr = parseInt(val / 60) % 24;

            var min = val % 60;
            if(min < 10){
                min = '0' + min;
            }
            var mer = ''
            if(format == 12){
                if(parseInt(hr / 12) == 1){
                    if(hr > 12){
                        hr = hr % 12;
                    }
                    mer = meridian.PM;
                }else{
                    mer = meridian.AM;
                    hr = hr || 12;
                }
            }
            if(hr < 10){
                hr = '0' + hr;
            }
            return (hr + ":" + min + " " + mer);
        }
    }

    maxValCheck(val) {
        var endTime = this.getData('endMinute');
        var startTime = this.getData('startMinute');
        var toChangeTime;
        if(typeof val == 'string'){
            toChangeTime =  this.convertToRailway(val);
        }else{
            toChangeTime = val
        }
        if(startTime < endTime){
            if(toChangeTime <= endTime && toChangeTime >= startTime){
                return true
            }
        }else{
            if((toChangeTime < 1440 && toChangeTime >= startTime) || (toChangeTime >= 0 && toChangeTime <= endTime)){
                return true;
            }
        }
        return false
    }

    timeInValChange(arg) {
        var timeFormat = this.getData('ltPropTimeFormat'), value,
        val = this.data.ltPropValue,
        type = this.data.ltPropType;

        if(arg){
            value = arg.newValue;
        }else{
            value = this.getData('ltPropDefaultTime');
            if( ( val == undefined || type == 'datetime' ) && !value && (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment) && ( type == "time" ? this.data.ltPropPlaceholder : ( this.data.ltPropTimePlaceholder || this.data.ltPropCommonPlaceholder ) ) ){
                this._emptytimeValue = true;
                if( type == 'datetime' ){
                    this.checkCommonPlaceHolder();
                }
                return;
            }
        }
        if(!value){
            var startTime =  this.getData('ltPropStartTime');
            if(startTime){
                value = startTime;
            }else{
                value = this.getCorrectTime(timeFormat);
            }
        }
        this.setData('ltPropDefaultTime', value.slice(0, timeFormat != 12 ? 5 : value.length));
    }

    checkCommonPlaceHolder() {
        if( ( this.data || {} ).ltPropCommonPlaceholder ){
            this.setData( 'showPlaceholder', !( this.data.ltPropCurrentDate || this.data.ltPropDefaultTime ) );
        }
    }

    startEndTimeObs(arg) {
        if(!arg || arg.item == 'ltPropStartTime')
            {
                var defaultVal = this._emptytimeValue ? this.getCorrectTime( this.data.ltPropTimeFormat ) : this.getData('ltPropDefaultTime');
                var startTime = this.getData('ltPropStartTime')
                if(!startTime){
                    this.setData('ltPropStartTime', defaultVal)
                    startTime = defaultVal
                }
                this.setData('startMinute', this.convertToRailway(startTime));
            }
        if(!arg || arg.item == 'ltPropEndTime') 
            {
                var  endTime = this.getData('ltPropEndTime'), flag = 0
                if(!endTime){
                    var min = Math.max(0, parseInt(startTime.slice(3, 5)) - 1).toString();
                    if(min.length == 1){
                        min = '0' + min;
                    }
                    endTime = ( startTime.slice(0, 3) + min + " " + startTime.slice(6, startTime.length) ).trim();
                    this.setData('ltPropEndTime', endTime)
                }
                this.setData('endMinute',  this.convertToRailway(endTime));
            }
        this.data.ltPropDropdown && this.dropdownConstruct();    
    }

    dateCallback(arg) {
        if( arg.newValue == "" && arg.oldValue == undefined) {
            return
        }

        this.englishDate();

        if(this.getMethods('onDateChange')){
           /**
            * @method onDateChange
            * @version 1.0.2
            * @condition ltPropType date,datetime
            */            
            this.executeMethod('onDateChange', arg, this.$node, this._selected);
        }
        this.checkCommonPlaceHolder();
        delete this._selected;
    }

    timeCallback(arg) {
        if( arg.newValue == "" && arg.oldValue == undefined) {
            return
        }
        if(this.getMethods('onValueChange')){
           /**
            * @method onValueChange
            * @version 1.0.2
            */            
            this.executeMethod('onValueChange', arg, this.$node)
        }
    }

    /*
        Calculate left of dropdown container when it has to come below/above the select element when it exceeds window.innerWidth and there is space to the right
    */
    setLeftExceedForDown(element, container, bcr, containerbcr, xscroll, ww) {
        var scrolledLeft = xscroll,
        elementBCR = bcr,
        elementLeft = this.rtlfunc.call( this, 'left', elementBCR, ww ),
        elementWidth = elementBCR.width,
        containerBCR = containerbcr,
        containerWidth = containerBCR.width,
        total = scrolledLeft + elementLeft + elementWidth - containerWidth;

        return total
    }

    /*
        Calculate left of dropdown container when it has to come below/above the select element when it doesn't exceed window.innerWidth
    */
    setLeftNotExceedForDown(element, bcr, xscroll, ww) {
        var scrolledLeft = xscroll,
        elementBCR = bcr,
        elementLeft = this.rtlfunc.call( this, 'left', elementBCR, ww ),
        total = scrolledLeft + elementLeft;

        return total
    }

    /*
        Calculate top of dropdown container when it has to come above the select element
    */
    setTopAboveForDown(element, container, bcr, containerbcr, yscroll) {
        var scrolledHeight = yscroll,
        elementBCR = bcr,
        elementTop = elementBCR.top,
        containerBCR = containerbcr,
        containerHeight = containerBCR.height,
        total = scrolledHeight + elementTop  - containerHeight;

        return total
    }

    /*
        Calculate top of dropdown container when it has to come below the select element
    */
    setTopBelowForDown(element, bcr, yscroll) {
        var scrolledHeight = yscroll,
        elementBCR = bcr,
        elementTop = elementBCR.top,
        elementHeight = elementBCR.height,
        total = scrolledHeight + elementTop + elementHeight;

        return total
    }

    /*
        Calculate left of dropdown container when it has to come to right of the select element
    */
    setLeftForRight(element, bcr, xscroll, ww) {
        var scrolledWidth = xscroll,
        elementBCR = bcr,
        elementLeft = this.rtlfunc.call( this, 'left', elementBCR, ww ),
        elementWidth = elementBCR.width,
        total = scrolledWidth + elementLeft + elementWidth;

        return total
    }

    /*
        Calculate right of dropdown container when it has to come to left of the select element of right dropdown
    */
    setRightForRight(element, container, bcr, elembcr, xscroll, ww) {
        var scrolledWidth = xscroll,
        elementBCR = bcr,
        containerBCR = elembcr,
        elementLeft = this.rtlfunc.call( this, 'left', elementBCR, ww ),
        containerWidth = containerBCR.width,
        total = scrolledWidth + elementLeft - containerWidth;

        return total
    }

    /*
        Calculate top of dropdown container when it has to come to right of dropdown and there is space below
    */
    setTopForRight(element, bcr, yscroll) {
        var scrolledHeight = yscroll,
        elementBCR = bcr,
        elementTop = elementBCR.top,
        total = scrolledHeight + elementTop;

        return total
    }

    /*
        Calculate top of dropdown container when it has to come to right of dropdown and there is no space below
    */
    setTopForRightAbove(element, container, bcr, elembcr, yscroll) {
        var scrolledHeight = yscroll,
        elementBCR = bcr,
        elementTop = elementBCR.top,
        elementHeight = elementBCR.height,
        containerBCR = elembcr,
        containerHeight = containerBCR.height,
        total = scrolledHeight + elementTop + elementHeight - containerHeight;

        return total
    }

    /**
     * Set the CSS for your calendar
     * refer commit ID 583ee6ccbeaa6b3729178bf9df0139032b016d19 and previous for the previous stable setCSS function.
     * commit ID 583ee6ccbeaa6b3729178bf9df0139032b016d19 also gives a better understanding about the hard coded values in this function.
     */
    setCss() {
        var link = this.$node.calendarDiv;

        if( !link 
            || link.classList.contains( 'lyteCalendarHidden' ) 
        ) {
            return;
        }

        // Get properties

        // Get button
        var body = link,
        par = this.$node.querySelector( 'input' ).parentElement;

        // Get Geometric propotions
        var wwidth, wheight, flag, 
        bleft = 0, btop = 0,
        wwidth = window.innerWidth,
        wheight= window.innerHeight,
        iwdth = wwidth,
        drop = body.getBoundingClientRect(), 
        x = ( window.pageXOffset || document.documentElement.scrollLeft ) * ( this._dir ? - 1 : 1 ),
        y = window.pageYOffset || document.documentElement.scrollTop,
        height = body.offsetHeight,
        width = body.offsetWidth, 
        position = this.getData( 'ltPropPosition' ),
        offsets = par.getBoundingClientRect(),
        scope = this.data.ltPropScope,
        scopeElement = scope ? _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node ).closest( scope ).get( 0 ) : void 0,
        scopeBcr = scopeElement ? scopeElement.getBoundingClientRect() : void 0;

        if( scopeBcr ){
            bleft = Math.max( bleft, scopeBcr.left );
            btop = Math.max( btop, scopeBcr.top );
            wwidth = Math.min( wwidth, scopeBcr.right );
            wheight = Math.min( wheight, scopeBcr.bottom );
        }

        // Intialize flags
        var downPos, 
        rightPos, 
        topPos, 
        leftPos,
        pos;

        // temp stores
        var tempStore,
        tempTop, 
        tempLeft, 
        tempMarginLeft, 
        tempMarginTop,
        tempNum, 
        tempDenom, 
        tempPer,
        oL = this.rtlfunc.call( this, 'left', offsets, iwdth ),
        lT = this.rtlfunc.call( this, 'left' );

        if( position === 'down' ) {
            downPos = true;
            tempTop = offsets.top + offsets.height; 
            if( tempTop + height > wheight 
                /*&& offsets.top > height */
            ) {
                downPos = ( wheight - offsets.top ) > ( offsets.bottom - btop );        
            }

            rightPos = true;
            tempLeft = oL;
            if( tempLeft + width > wwidth 
                && tempLeft > tempLeft + offsets.width - body.offsetWidth 
            ) {
                rightPos = false;
                
            }
            // else if( oL + width <= wwidth ) {
            //     rightPos = true;
            // }

            if( downPos ) {
                this.setData( 'pos', 'down' );
                body.style.top = this.setTopBelowForDown( par, offsets, y ) + 'px';
                
            }
            else {
                this.setData( 'pos', 'up' );
                body.style.top = this.setTopAboveForDown( par, body, offsets, drop, y, iwdth ) + 'px';
            }

            if( rightPos ) {
                body.style.top = tempStore ? tempStore : body.style.top;
                body.style[ lT ] = this.setLeftNotExceedForDown( par, offsets, x, iwdth ) + 'px';  
            }
            else {
                body.style.top = tempStore ? tempStore : body.style.top;
                body.style[ lT ] = this.setLeftExceedForDown( par, body, offsets, drop, x, iwdth ) + 'px'
            }

            
        }
        else if( position === 'right' ) {
            rightPos = true;
            if( oL + offsets.width + width > wwidth
                && oL - drop.width > bleft 
            ) {   
                rightPos = false;
                
            }

            downPos = true;
            if( offsets.top + drop.height > wheight ) {
                downPos = ( wheight - offsets.top ) > ( offsets.bottom - btop )
            }

            if( rightPos ) {
                this.setData( 'pos', 'right' );
                body.style[ lT ]= this.setLeftForRight( par, offsets, x, iwdth ) + 'px'
            }
            else {
                this.setData( 'pos', 'left' );
                body.style[ lT ] = this.setRightForRight( par, body, offsets, drop, x, iwdth ) + 'px';
            }

            if( downPos ) {
                body.style[ lT ] = tempStore ? tempStore : body.style[ lT ];
                body.style.top = this.setTopForRight( par, offsets, y ) + 'px' 
            }
            else {
                body.style[ lT ] = tempStore ? tempStore : body.style[ lT ];
                body.style.top = this.setTopForRightAbove( par, body, offsets, drop, y ) + 'px'
            }
        }
        else if( position === 'up' ) {
            topPos = true
            if( offsets.top - drop.height < btop 
                /*&& offsets.top + offsets.height + height < wheight */
            ) {
                topPos = ( wheight - offsets.top ) < ( offsets.bottom - btop )
            }

            rightPos = true
            if( oL + width > wwidth 
                && oL > oL + offsets.width - body.offsetWidth 
            ) {
                rightPos = false
            }
            // else if( oL + width <= wwidth ) {
            //     rightPos = true
            // }

            if( topPos ) {
                this.setData( 'pos', 'up' );
                body.style.top = this.setTopAboveForDown( par, body, offsets, drop, y ) + 'px';
            }
            else {
                this.setData( 'pos', 'down' );
                body.style.top = this.setTopBelowForDown( par, offsets, y ) + 'px'
            }
            if( rightPos ) {
                body.style.top = tempStore ? tempStore : body.style.top;
                body.style[ lT ] = this.setLeftNotExceedForDown( par, offsets, x, iwdth ) + 'px';
            }
            else{
                body.style.top = tempStore ? tempStore : body.style.top;
                body.style[ lT ] = this.setLeftExceedForDown( par, body, offsets, drop, x, iwdth ) + 'px';
            }
        } else if( position === 'left' ) {
            leftPos = true;
            if( oL - drop.width < bleft 
                && oL + drop.width < wwidth 
            ) {
                leftPos = false;
            }
            // else {
            //     leftPos = true;
            // }

            downPos = true;
            if( offsets.top + drop.height > wheight ) {
                downPos = ( wheight - offsets.top ) > ( offsets.bottom - btop );
            }

            if( leftPos ) {
                this.setData( 'pos', 'left' );
                body.style[ lT ] = this.setRightForRight( par, body, offsets, drop, x, iwdth ) + 'px';
            }
            else {
                this.setData( 'pos', 'right' );
                body.style[ lT ] = this.setLeftForRight( par, offsets, x, iwdth ) + 'px';
            }
            if( downPos ){
                body.style[ lT ] = tempStore ? tempStore : body.style[ lT ];
                body.style.top = this.setTopForRight( par, offsets, y ) + 'px';
            }
            else{
                body.style[ lT ] = tempStore ? tempStore : body.style[ lT ];
                body.style.top = this.setTopForRightAbove( par, body, offsets, drop, y ) + 'px';
            }
        } else if( position === 'downLeft' ) {
            downPos = true;
            tempTop = offsets.top + offsets.height;
            if( tempTop + height > wheight /*&& offsets.top > height*/ ) {
                downPos = ( wheight - offsets.top ) > ( offsets.bottom - btop );
            } 
            // else {
            //     downPos = true;
            // }
            if( !downPos ) {
                tempTop = offsets.top - height;
            }
            rightPos = false
            tempLeft = oL + offsets.width / 2 - width;
            if( tempLeft < bleft ) {
                tempLeft = bleft
                rightPos = true
            } 
            // else { 
            //     rightPos  = false
            // }

            body.style.top = tempTop + y + 'px';

            body.style[ lT ] = tempLeft + x + 'px';
            if( downPos ){
                pos = 'downLeft';
            } else {
                pos = 'upLeft';
            }
            this.setData( 'pos', pos);

        } else if( position === 'downRight' ) {
            downPos = true;
            tempTop = offsets.top + offsets.height;
            if( tempTop + height > wheight /*&& offsets.top > height*/ ) {
                downPos = ( wheight - offsets.top ) > ( offsets.bottom - btop );
            } 
            // else {
            //     downPos = true;
            // }
            if( !downPos ) {
                tempTop = offsets.top - height
            }
            rightPos = true
            tempLeft = oL + offsets.width / 2;
            if( tempLeft + width > wwidth ) {
                tempLeft = wwidth - width;
                rightPos = false;
            } 
            // else { 
            //     rightPos  = true;
            // }

            body.style.top = tempTop + y + 'px';

            body.style[ lT ] = tempLeft + x + 'px';
            if( downPos ){
                pos = 'downRight';
            } else {
                pos = 'upRight';
            }
            this.setData( 'pos', pos);
        } else if( position === 'upLeft' ) {
            downPos = false;
            tempTop = offsets.top - height;
            if( tempTop < btop) {
                downPos = ( wheight - offsets.top ) > ( offsets.bottom - btop );
            } 
            // else {
            //     downPos = false;
            // }
            if( downPos ) {
                tempTop = offsets.top + offsets.height;
            }
            rightPos = false
            tempLeft = offsets[ lT ] + offsets.width / 2 - width;
            if( tempLeft < bleft ) {
                tempLeft = bleft
                rightPos = true
            } 
            // else { 
            //     rightPos  = false
            // }

            body.style.top = tempTop + y + 'px';

            body.style[ lT ] = tempLeft + x + 'px';
            if( downPos ){
                pos = 'downLeft';
            } else {
                pos = 'upLeft';
            }
            this.setData( 'pos', pos);

        } else if( position === 'upRight' ) {
            downPos = false;
            tempTop = offsets.top - height;
            if( tempTop < btop) {
                downPos = ( wheight - offsets.top ) > ( offsets.bottom - btop );
            } 
            // else {
            //     downPos = false;
            // }
            if( downPos ) {
                tempTop = offsets.top + offsets.height
            }
            rightPos = true
            tempLeft = oL + offsets.width / 2;
            if( tempLeft + width > wwidth ) {
                tempLeft = wwidth - width;
                rightPos = false;
            } 
            // else { 
            //     rightPos  = true;
            // }

            body.style.top = tempTop + y + 'px';

            body.style[ lT ] = tempLeft + x + 'px';
            if( downPos ){
                pos = 'downRight';
            } else {
                pos = 'upRight';
            }
            this.setData( 'pos', pos);
        }
            
    }

    preventFn() {
        this.preventFocus = true;
    }

    static methods(arg1) {
        return Object.assign(super.methods({
            wormholeAppend : function( element, outlet ){

                var __node = this.$node;

                __node.calendarComp = element;
                element.nodeN = __node;
                __node.calendarDiv = element.querySelector( 'div#lyteCalendar' );
                this._assCalendar = __node.calendarDiv.querySelector( 'lyte-calendar' );
                // var func1 = this.calendarMousedown.bind(this);
                // this.$node.calendarDiv.addEventListener('mousedown', func1, true);
                // this.setData('eventListeners.mousedown', func1);
               /**
                * @utility revertToToday
                * @condition ltPropType date,datetime
                * @version 2.2.12
                */            
                __node.revertToToday = this._assCalendar.revertToToday;
               /**
                * @utility revertToSelected
                * @condition ltPropType date,datetime
                * @version 2.2.12
                */            
                __node.revertToSelected = this._assCalendar.revertToSelected;

                var dropdown = this._assCalendar.querySelectorAll('lyte-dropdown');
                for( var i = 0; i < dropdown.length; i++ ){
                    var dropbody = dropdown[ i ].component.childComp || dropdown[ i ].querySelector( 'lyte-drop-box' );
                    dropbody.addEventListener( 'mousedown', this.preventFn.bind( this ) );
                }

                if( this.data.ltPropAria ){
                    try{
                        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( __node.calendarDiv ).trapFocus();
                    }catch( err ){};
                }
            },

            "on-dateselected":function(){
                   this._selected = true;
                   this._hideCalendar();
             },
             hide : function(){
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node ).removeClass( 'lyteInputDropdownOpen' );
                if(this.getMethods('onHide')){
                   /**
                    * @method onHide
                    * @condition ltPropType time,datetime
                    * @version 1.0.2
                    */                
                    this.executeMethod('onHide', arguments[0], arguments[1], this.$node);
                }
             },
             beforeHide : function(){
                if(this.getMethods('onBeforeHide')){
                   /**
                    * @method onBeforeHide
                    * @condition ltPropType time,datetime
                    * @version 1.0.2
                    */                
                    return this.executeMethod('onBeforeHide', arguments[0], arguments[1], this.$node);
                }
             },
             show : function(){
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node ).addClass( 'lyteInputDropdownOpen' );
                if(this.getMethods('onShow')){
                   /**
                    * @method onShow
                    * @condition ltPropType date,datetime
                    * @version 1.0.2
                    */                
                    this.executeMethod('onShow', arguments[0], arguments[1], this.$node);
                }
             },
             beforeShow : function(){
                if(this.getMethods('onBeforeShow')){
                   /**
                    * @method onShow
                    * @condition ltPropType date,datetime
                    * @version 1.0.2
                    */                
                    return this.executeMethod('onBeforeShow', arguments[0], arguments[1], this.$node);
                }
             },
             optionSelected : function(){
                this._calmsfg = true;
                delete this._emptytimeValue;
                this.setData('ltPropDefaultTime', arguments[1].trim());

                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( 'input', this.$node ).get( -1 ).focus();
             },

             scroll : function(){
                if(this.getMethods('onScroll')){
                   /**
                    * @method onScroll
                    * @condition ltPropType time,datetime
                    * @version 1.0.2
                    */                
                    this.executeMethod('onScroll', arguments[0], arguments[1]);
                }
             },

             positionChange : function(){
                if(this.getMethods('onPositionChanged')){
                   /**
                    * @method onPositionChanged
                    * @condition ltPropType time,datetime
                    * @version 1.0.2
                    */                
                    this.executeMethod('onPositionChanged', arguments[0], arguments[1]);
                }
             },

             calendarNavigate : function( arg1, arg2, arg3, arg4 ){
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.measure( this.setCss.bind( this ) );
                if( this.getMethods( 'onNavigate' ) ) {
                   /**
                    * @method onNavigate
                    * @condition ltPropType date,datetime
                    * @version 2.0.0
                    */                
                    this.executeMethod( 'onNavigate', arg1, arg2, arg3, arg4 )
                }
             },

             viewDateChange : function( arg1, arg2 ){
                   /**
                    * @method onViewdateChange
                    * @condition ltPropType date,datetime
                    * @version 2.2.11
                    */            
                this.getMethods( 'onViewdateChange' ) && this.executeMethod( 'onViewdateChange', arg1, arg2, this.$node );
             },

             viewChange : function( evt, viewType, _this ){
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.measure( this.setCss.bind( this ) );
                   /**
                    * @method onViewChange
                    * @condition ltPropType date,datetime
                    * @version 2.2.11
                    */            
                this.getMethods( 'onViewChange' ) && this.executeMethod( 'onViewChange', evt, viewType, _this, this.$node )
             }
        }), arg1);
    }

    valUpdate() {
         if( !this.$node || !this) {
             return;
         }
         delete this._timeout;
         var type = this.data.ltPropType;
         if( type == 'date' || type == "datetime" ){
             var inn = this.$node.querySelector( 'input' ).value;
             this.setData('ltPropCurrentDate', inn ? inn : "");
         }else if(type == "textarea"){
             var inn = this.$node.querySelector( 'textarea' ).value;
             this.setData('ltPropValue', inn ? inn : "");
         }else{
             var inn = this.$node.querySelector( 'input' ).value;
             // if( this.data.ltPropType == "number" && !frmblur && ( !inn || inn == this.$node.ltProp( 'value' ) ) ){
             //  return
             // }
             this.setData('ltPropValue', inn ? inn : "");
         }  
    }

    fixSelection(val, selectedField, input) {
     if( this.data.ltPropReadonly ){
         return;
     }
     // changing selection range
             input.selectionStart = selectedField.val + val;
             input.selectionEnd = input.selectionStart + 2;
             this.timeClick.call(this, {}, input, selectedField.val + val );
    }

    replaceVal(input, val, start, end) {
         var value;
         if(typeof input == 'string'){
             value = input
         }else{
             value = input.value
         }
         var regex = new RegExp('('+ value.slice(start, start + end) +')','i');
          return value.trim().replace(regex, val);   
    }

    retVal(val1, val2, limit) {
      if( parseInt( val1 + val2 ) > limit ) {
         return '0' + val2
      }
      return val1 + val2;
    }

    convertToPm(limit, val, meridian) {
         if( limit == 12 ) {
             var mer = val.slice( 6, val.length ), time = val.slice( 0, 5 ), hr = val.slice( 0, 2 ), min = val.slice( 3, 5 )
             if( hr == '00' && mer == 'AM' || hr == '12' && mer == 'PM' ) {
                 return val
             }
             return hr + ':' + min + " " + ( meridian.AM == mer ? meridian.PM : meridian.AM )
         }
         return val
    }

    hourTimeSet(input, evt, selection, start, end) {
          var inputVal = input.value.trim(), limit, meridian = this.getData('meridian');
          var typedValue  = window._lyteUiUtils.getCorrectNumberCode( evt.which || evt.keyCode ) - 48;
          var newVal = inputVal.slice(start + 1, end) + typedValue;
          var timeFormat = this.data.ltPropTimeFormat,
          blur = this.data.ltPropValidateOnBlur,
          final;
          
          if(selection == 'hour'){
             limit = timeFormat == 12 ? 12 : 24;
          }else{
             delete this._lasttyped;
             limit = 60
          }
         // if(parseInt(newVal) > limit){
             // newVal = '0' + typedValue;
             // if((limit == 12 && newVal == '00' && inputVal.slice(6, 8) == meridian.PM)){
             //     inputVal = this.replaceVal.call(this, input, meridian.AM, 6, meridian.AM.length);
             // }else
              if(limit == 60 && parseInt( newVal ) >= 60){
                 newVal = '0' + typedValue;
             }
         // }else{
             // if((limit == 12 && newVal == '12' && inputVal.slice(6, 8) == meridian.AM)){
             //     inputVal = this.replaceVal.call(this, input, meridian.PM, 6, meridian.AM.length);
             // } else if((limit == 12 && newVal == '00' && inputVal.slice(6, 8) == meridian.PM)){
             //     inputVal = this.replaceVal.call(this, input, meridian.AM, 6, meridian.PM.length);
             // }
         // }

         // if( selection == 'hour' && timeFormat == 12 && newVal == "00" ){
         //     newVal = "12";
         // }
         if( selection == "hour" ){
             final = this.getCrctHour( inputVal, start, end, limit, typedValue, meridian );
             this._lasttyped = typedValue + '';
         } else {
             final = inputVal.slice(0, start) + newVal + inputVal.slice(end, inputVal.length);
             if( !blur || blur && evt.type != 'keydown' ){
                 var returnV1 = this.maxValCheck(final);
                 if(returnV1 == false ){
                     final = inputVal.slice(0, start) + this.retVal( inputVal.slice(start, start + 1), typedValue, limit ) + inputVal.slice(end, inputVal.length);
                     returnV1 = this.maxValCheck(final);
                     if(returnV1 == false){
                         final = inputVal.slice(0, start) + '0' + typedValue + inputVal.slice(end, inputVal.length);
                         returnV1 = this.maxValCheck(final);
                         if(returnV1 == false){
                             final = this.convertToPm( limit, final, meridian)
                             returnV1 = this.maxValCheck(final);
                             if(returnV1 == false){
                                 return false;
                             }
                         }
                     }
                 }
             }
         }

         if( this.data.ltPropTimezoneHandling ){
             final = this.check_dst( final, 1, 1 );
         }

         this.setData('ltPropDefaultTime', final);
         // restore current selection
         _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.mutate(function(){
             input.selectionStart = start;
             input.selectionEnd = end;
         })
    }

    _getCrctHour(str, limit, meridian) {
         if( this.maxValCheck( str ) == false ){
             if( limit == 12 ){
                  str = this.convertToPm( limit, str, meridian );
                  if( this.maxValCheck( str ) == false ){
                     return false;
                  } 
                  return str;
             }
             return false;
         }
         return str;
    }

    getCrctHour(inputVal, start, end, limit, typedValue, meridian) {
         var str, hr, ret, allow,
         blur = this.data.ltPropValidateOnBlur;
         if( this._lasttyped != undefined ){
             hr = this._lasttyped + typedValue;
             if( hr == "00" && limit == 12 ){
                 allow = true;
                 hr = "12"
             }
             if( limit == 24 && parseInt( hr ) >= 24 || limit == 12 && parseInt( hr ) >= 13 ){
                 ret = false;
             } else {
                 str = hr + inputVal.slice( end );
                 if( !blur ){
                     ret = this._getCrctHour( str, limit, meridian );
                 } else {
                     return str;
                 }
             }
             if( ret != false ){
                 return ret;
             } else if( str ) {
                 var em = this.data.endMinute,
                 endTime = this.convertToRailway( str );
                 if( endTime - em < 60 && endTime - em >= 0 ){
                     return this.convertToRailway( em, true, limit ).trim();
                 }
             }
         }
         hr = inputVal.slice( start + 1, end ) + typedValue;
         if( hr == "00" && limit == 12  ){
             if( !allow ){
                 return inputVal;
             }
             hr = "12"
         }
         if( limit == 24 && parseInt( hr ) >= 24 || limit == 12 && parseInt( hr ) >= 13 ){
             ret = false;
         } else {
             str = hr + inputVal.slice( end );
             if( !blur ){
                 ret = this._getCrctHour( str, limit, meridian );
             } else {
                 return str;
             }
         }
         if( ret != false ){
             return ret;
         }

         hr = inputVal.slice( 0, start + 1 ) + typedValue;
         if( hr == "00" && limit == 12  ){
             if( !allow ){
                 return inputVal;
             }
             hr = "12"
         }
         if( limit == 24 && parseInt( hr ) >= 24 || limit == 12 && parseInt( hr ) >= 13 ){
             ret = false;
         } else {
             str = hr + inputVal.slice( end );
             if( !blur ){
                 ret = this._getCrctHour( str, limit, meridian );
             } else {
                 return str;
             }
         }
         if( ret != false ){
             return ret;
         }

         hr = '0' + typedValue;
         if( hr == "00" && limit == 12  ){
             if( !allow ){
                 return inputVal;
             }
             hr = "12"
         }
         str = hr + inputVal.slice( end );
         if( !blur ){
             ret = this._getCrctHour( str, limit, meridian );
         } else {
             return str;
         }
         if( ret != false ){
             return ret;
         }
         hr = typedValue + '0';
         if( hr == "00" && limit == 12  ){
             if( !allow ){
                 return inputVal;
             }
             hr = "12"
         }
         if( limit == 24 && parseInt( hr ) >= 24 || limit == 12 && parseInt( hr ) >= 13 ){
             ret = false;
         } else {
             str = hr + inputVal.slice( end );
             if( !blur ){
                 ret = this._getCrctHour( str, limit, meridian );
             } else {
                 return str;
             }
         }
         if( ret != false ){
             return ret;
         }

         if( this.data.ltPropConvertToNearest ){
            return this.findNearestTime( inputVal, start, end, limit, typedValue, meridian );
         }
         return inputVal;
    }

    findNearestTime(inputVal, start, end, limit, typedValue, meridian) {
         var hr, ret;
         if( this._lasttyped != undefined ){
             hr = this._lasttyped + typedValue;
             if( limit == 24 && parseInt( hr ) >= 24 || limit == 12 && parseInt( hr ) >= 13 ){
                 ret = false;
             } else {
                 return this._findNearest( hr + inputVal.slice( end ), limit );
             }
         }
         hr = inputVal.slice( start + 1, end ) + typedValue;
         if( limit == 24 && parseInt( hr ) >= 24 || limit == 12 && parseInt( hr ) >= 13 ){
             ret = false;
         } else {
             return this._findNearest( hr + inputVal.slice( end ), limit );
         }
         hr = inputVal.slice( 0, start + 1 ) + typedValue;
         if( limit == 24 && parseInt( hr ) >= 24 || limit == 12 && parseInt( hr ) >= 13 ){
             ret = false;
         } else {
             return this._findNearest( hr + inputVal.slice( end ), limit );
         }
         hr = '0' + typedValue;
         if( limit == 24 && parseInt( hr ) >= 24 || limit == 12 && parseInt( hr ) >= 13 ){
             ret = false;
         } else {
             return this._findNearest( hr + inputVal.slice( end ), limit );
         }
         return inputVal;
    }

    _findNearest(str, limit) {
       var value = this.convertToRailway( str ),
       end = this.data.endMinute,
       start = this.data.startMinute,
       startDiff = Math.abs( start - value ),
       endDiff = Math.abs( end - value );
       if( startDiff > endDiff ){
          return this.convertToRailway( end, true, limit ).trim();
       } else {
         return this.convertToRailway( start, true, limit ).trim();
       }
    }

    timeIncrease(input, evt, selection, start, end, flag) {
           if( this.data.ltPropReadonly ){
              return
           }
           var inputVal = input.value.trim(), limit, currentValue = parseInt(inputVal.slice(start, end)), interval, timeFormat = this.getData('ltPropTimeFormat'), final, meridian = this.getData('meridian');
           if(selection == 'hour'){
              limit = timeFormat == 12 ? 12 : 24;
              if(flag){
                  interval = 1;
              }else{
                  interval =  this.data.ltPropHourInterval;
              }
           }else{
              limit = 60;
              interval =  this.data.ltPropMinuteInterval;
           }
           var newVal,
           allow;
           if( (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment) && (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment.lyteMoment.prototype.add) ){
              var momentFormat = timeFormat == 12 ? "hh:mm A" : "HH:mm",
              moment;
              inputVal = inputVal.replace( meridian.AM, 'AM' ).replace( meridian.PM, 'PM' );

              if( this.data.ltPropTimezoneHandling && this.data.ltPropCurrentDate ){
                  moment = this.check_dst( inputVal, true );
              } else {
                  moment = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( inputVal, momentFormat );
              }

              if( moment.validate() ){
                  final = moment.add( interval, limit == 60 ? 'minutes' : 'hours' ).format( momentFormat ).replace( 'AM', meridian.AM ).replace( 'PM', meridian.PM );
              } else {
                  allow = true;
              }
           } 
           if( allow ) {
               newVal = (currentValue + interval) % limit;
               if(limit == 12 && newVal < currentValue && inputVal.slice(6, inputVal.length) == meridian.AM){
                  if(newVal == 0){
                      newVal = '12';
                  }
                 inputVal = this.replaceVal.call(this, input, meridian.PM, 6, inputVal.length);
               }else if(limit == 12 && newVal < currentValue && inputVal.slice(6, inputVal.length) == meridian.PM){
                  if(currentValue != 12 || newVal == 0){
                      inputVal = this.replaceVal.call(this, input, meridian.AM, 6, inputVal.length);
                  }
               }else if(limit == 12 && newVal == currentValue && inputVal.slice(6, inputVal.length) == meridian.AM){
                      newVal = '12';
                      inputVal = this.replaceVal.call(this, input, meridian.PM, 6, inputVal.length);
               }else if(limit == 60 && newVal <= currentValue) {
                   var ret = this.timeIncrease.call(this, input, evt, 'hour', 0, 2, true);
                   if(ret == false){
                      return false;
                   }
                   inputVal = input.value.trim();
               }
              newVal = newVal.toString();
              if(newVal.length == 1){
                  newVal = '0' + newVal;
              }
              final = inputVal.slice(0, start) + newVal + inputVal.slice(end, inputVal.length);
          }
          var returnV = this.maxValCheck(final)
          if(returnV == false){
              return false
          }
          this.setData('ltPropDefaultTime', final);
          // restore current selection
          _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.mutate(function(){
              input.selectionStart = start;
              input.selectionEnd = end;
          })
     }

    timeDecrease(input, evt, selection, start, end, flag) {
        if( this.data.ltPropReadonly ){
            return
         }
         var inputVal = input.value.trim(), limit, currentValue = parseInt(inputVal.slice(start, end)), interval, timeFormat = this.getData('ltPropTimeFormat'), final, meridian = this.getData('meridian');
         if(selection == 'hour'){
            limit = timeFormat == 12 ? 12 : 24;
            if(flag){
                interval = 1;
            }else{
                interval =  this.getData('ltPropHourInterval');
            }
         }else{
            limit = 60;
            interval =  this.getData('ltPropMinuteInterval');
         }
         var newVal,
         allow;
         if( (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment) && (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment.lyteMoment.prototype.subtract) ){
            var momentFormat = timeFormat == 12 ? "hh:mm A" : "HH:mm",
            moment;
            inputVal = inputVal.replace( meridian.AM, 'AM' ).replace( meridian.PM, 'PM' );
            
            if( this.data.ltPropTimezoneHandling && this.data.ltPropCurrentDate ){
                moment = this.check_dst( inputVal, true );
            } else {
                moment = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( inputVal, momentFormat );
            }

            if( moment.validate() ){
                final = moment.subtract( interval, limit == 60 ? 'minutes' : 'hours' ).format( momentFormat ).replace( 'AM', meridian.AM ).replace( 'PM', meridian.PM );
            } else {
                allow = true;
            }
         } 
         if( allow) {
             newVal = (currentValue - interval + limit) % limit;
             if(limit == 12 && newVal > currentValue && inputVal.slice(6, inputVal.length) == meridian.AM){
                 inputVal = this.replaceVal.call(this, input, meridian.PM, 6, inputVal.length);
             } else if(limit == 12 && (newVal > currentValue || currentValue == 12) && inputVal.slice(6, inputVal.length) == meridian.PM){
                inputVal = this.replaceVal.call(this, input, meridian.AM, 6, inputVal.length);
             }else if(limit == 12 && newVal == 0){
                if(inputVal.slice(6, inputVal.length) == meridian.PM){
                    newVal = '12';
                } 
             }else if(limit == 60 && newVal >= currentValue) {
                var ret = this.timeDecrease.call(this, input, evt, 'hour', 0, 2, true);
                if(ret == false){
                    return false;
                }
                inputVal = input.value.trim()
             }
            newVal = newVal.toString();
            if(newVal.length == 1){
                newVal = '0' + newVal;
            }
            final = inputVal.slice(0, start) + newVal + inputVal.slice(end, inputVal.length);
        }
        var returnV = this.maxValCheck(final);
        if(returnV == false){
            return false
        }
        this.setData('ltPropDefaultTime', final);
        // restore current selection
        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.mutate(function(){
            input.selectionStart = start;
            input.selectionEnd = end;
        })
   }

    findCalendarRange(evt, input, allow) {
         // var flag = false;
         if(input.value && this.dateValidation(input.value) != false){
                 var start = input.selectionStart, i;
                 var end = input.selectionEnd;
                 var range = this.getData('dateRange');
                 for(i in range){
                     if( allow && i != this.data.selectedDateField ){
                         continue;
                     }
                     // checking selected pos
                      var returnedRange = this.setRangeByMoment( input, range, i );

                      // One bug in this check. It will cause error when format is given without separators like MMDDYYYY

                     if( ( returnedRange[ 0 ] <= start && returnedRange[ 1 ] >= start ) || allow ){
                         if( !this.data.ltPropPreventSelection ){
                             input.selectionStart = returnedRange[ 0 ];
                             input.selectionEnd = returnedRange[ 1 ];
                         } else if( allow ) {
                            input.selectionStart = input.selectionEnd = returnedRange[ 1 ]; 
                         }
                         this.setData('selectedDateField', i);
                         // flag = true;
                         break;
                     }
                 }
             }
          // return flag;   
    }

    setRangeByMoment(input, range, key) {
       var start, end;
       if( (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment) ){
           var format = this.data.ltPropFormat, 
           value = input.value,
           is_i18n = this.data.ltPropCalendarProperties.i18n,
           moment = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( value, this._assCalendar.component.getRelevantFormat( format ), {
             i18n : is_i18n
           }),
           ns = is_i18n ? 'i18N' : 'format';

           if( moment.validate() ){
             var length = 0, sliceForm = format.slice( range [ key ] [ 0 ], range  [ key ][ 1 ] );
             for( var i = 0; i < this.data.dateOrder.length; i++ ){
                 var current = this.data.dateOrder[ i ], newValue = moment[ ns ]( current.format );
                 if( current.format == sliceForm ){
                     break;
                 }
                 value = value.replace( newValue, '' );
                 length += newValue.length
             }
             var formatted = moment[ ns ]( sliceForm );
             start = length + value.indexOf( formatted );
             end = start + formatted.length;
           } else {
              start = range[ key ] [ 0 ];
              end = range[ key ] [ 1 ];
           }
       } else {
         start = range[ key ][ 0 ];
         end = range[ key ][ 1 ];
       }
       return [ start, end ];
    }

    hideCalendar() {
         Array.from( document.getElementsByTagName( 'lyte-input' ) ).forEach( function( item ){
             var cal_div = item.calendarDiv;

             if( item != this.$node && cal_div && !_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( cal_div ).hasClass( 'lyteCalendarHidden' ) ){
                 item.component._hideCalendar();
             }
         }.bind( this ) );
    }

    _hideCalendar(bool, __force) {

         var cal = this.$node.calendarDiv;

         if( !cal || _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( cal ).hasClass( 'lyteCalendarHidden' ) ){
             return;
         }

         if( !__force && !this._selected && !this.data.ltPropCalendarProperties.disableNavigation && cal.contains( document.activeElement ) ){
             return;
         }

         var callback,
         cb = 'onBeforeCalendarClose';

         if( this.getMethods( cb ) ) {
                /**
                 * @method onBeforeCalendarClose
                 * @condition ltPropType date,datetime
                 * @version 2.2.8
                 */            
             callback = this.executeMethod( cb, cal, this.$node, !!this._selected );
         }
         if( callback == false ){
             this.$node.focus();
             return
         } else if( callback && callback.then ){
             this._calendarCloseStart = true;
             Promise.resolve( callback ).then( this.mainHideFn.bind( this, bool ) );
         } else {
             this.mainHideFn( bool );
         }
    }

    mainHideFn(bool) {

         var comp = this,
         inputs = this.$node,
         __calendar = inputs.calendarDiv;

         delete comp._calendarCloseStart;
         __calendar.classList.add('lyteCalendarHidden')
         inputs.classList.remove( 'calendarOpen' );

         Array.from( comp._assCalendar.querySelectorAll( 'lyte-dropdown' ) ).forEach( function( item ){
             item.close();
         });

         if( this.data.ltPropAria ){
             _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( 'input,textarea', inputs ).attr( "aria-expanded", "false" );
          }

         if( comp.getMethods( 'onCalendarClose' ) ) {
            /**
             * @method onCalendarClose
             * @condition ltPropType date,datetime
             * @version 1.0.2
             */            
             comp.executeMethod( 'onCalendarClose', __calendar, inputs )
         }
         comp.data.ltPropHeaderType == 'drilldown' && inputs.revertToSelected();
         if( bool ){
             inputs.blur();
             comp._closedbyscrl = true;
         } 

         if( this.data.ltPropAria ){
             var exst_active = document.activeElement;

             if( exst_active == document.body || __calendar.contains( exst_active ) ){
                 _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( '.lyteInputCalendarIcon', this.$node ).focus();
             }

             this.setData( "isExpanded", "false" );
         }
    }

    showCalendar(event, input) {
     if( this._byManual ) {
         delete this._byManual;
         return;
     }
      this.hideCalendar();
      // removing hidden class
       if( this.data.ltPropReadonly && !this.data.ltPropPreventKeys || this._calendarCloseStart ){
         return;
      }
      if( this.getMethods( 'onBeforeOpen' )  ){
         var retVal = this.executeMethod( 'onBeforeOpen', event, this.$node );
         if( retVal == false ){
             this._prevclick = true;
             setTimeout( function(){
                 delete this._prevclick;
             }.bind( this ), 100 );
             return;
         }
      }
      if( !this.data.ltPropBindToBody ){
          this.setData( 'ltPropBindToBody', true );   
      }
      this.$node.calendarDiv.classList.remove('lyteCalendarHidden')
      _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.measure( this.scrollFunc.bind( this ) );
      // initial selection
      _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.mutate(function(){
         if( !this.data.ltPropReadonly ){
              // if( !this.data.ltPropPreventSelection ){
              //    input.selectionStart = 0;
              //    input.selectionEnd = 0;
              // }
              this.findCalendarRange(event, input );
          }
          this.$node.classList.add( 'calendarOpen' );
          if( this.data.ltPropType == 'datetime' ){
             if( this.dropdown ){
                 this.dropdown.close();
             }
          }

          if( this.data.ltPropAria ){
             _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( 'input,textarea', this.$node ).attr( "aria-expanded", "true" );
          }

          // if( !this.data.ltPropCalendarProperties.disableNavigation ){
          //    this.setData( "navigation", true );
          // }


          if( this.data.ltPropAria ){
             window.requestAnimationFrame( function(){
                 // this._assCalendar.focusCalendar();
                 this.setData( "navigation", true );
                 this.setData( "isExpanded", "true" );
             }.bind( this ) );
          }

          if(this.getMethods('onCalendarOpen')){
            /**
             * @method onCalendarOpen
             * @condition ltPropType date,datetime
             * @version 1.0.2
             */            
             this.executeMethod('onCalendarOpen', this.$node.calendarDiv, this.$node);
          }   
      }.bind(this))
    }

    // calendarMousedown : function(event){
    //      if( this.$node.calendarDiv.contains( event.target.correspondingElement || event.target ) ) {
    //          this.preventFocus = true
    //      }
    // },

    timeClick(evt, input, startVal) {
     if( this.data.ltPropReadonly && !this.data.ltPropPreventKeys ){
         return;
     }
     if( !this.data.ltPropReadonly && !this._emptytimeValue ){
         var start, startVal, endVal;
         // measuring clicked position
             start = Math.min( 2, parseInt( ( startVal == undefined ? input.selectionStart : startVal ) / 3 ) );
         // measuring selection 
             switch(start){
                 case 2 : {
                     startVal = 6;
                     endVal = input.value.length;
                     this.setData('selectedField', {prop : 'meridian', val : 6});
                 }
                 break;
                 case 1 : {
                     startVal = 3;
                     endVal = 5;
                     this.setData('selectedField', {prop : 'minute', val : 3});
                 }
                 break;
                 default : {
                     startVal = 0;
                     endVal = 2;
                     this.setData('selectedField', {prop : 'hour', val : 0});
                 }
             }

         input.selectionStart = startVal;
         input.selectionEnd = endVal;
       }
       if(this.dropbox && this.dropbox.classList.contains('lyteDropdownHidden') && evt.type == "click"){
             this.open_dropdown();
         }
    }

    open_dropdown() {
         this.dropdown.ltProp( 'selected', '' );
         this.setData('dropdownData', this.getData('originalData'));
         this.dropdown.ltProp( 'selected', this.data.ltPropDefaultTime );
         this.dropdown.toggle();
    }

    calendarKeydown(evt, input) {
         
         if( evt.key == "Escape" ){
             return this._hideCalendar( void 0, true );
         }

         if( !input.value || this.data.ltPropReadonly ){
             return;
         }
         var keyCode = evt.keyCode,

         time = this.dateValidation(input.value);
             if(time != false){
                 var selected = this.getData('selectedDateField');                       
                 if([37, 38, 39, 40, 9].indexOf(keyCode) != -1){
                         if(input.selectionEnd == input.selectionStart){
                             this.findCalendarRange(evt, input);
                             selected = this.data.selectedDateField;
                         }
                         var start = input.selectionStart;
                         var end = input.selectionEnd;
                         if([38, 40].indexOf(keyCode) != -1){
                            evt.preventDefault();
                         switch(selected){
                             case 'year' : {
                                 if(keyCode == 40){
                                     time.setFullYear(time.getFullYear() - 1);
                                 }else{
                                     time.setFullYear(time.getFullYear() + 1);
                                 }   
                             }
                             break;
                             case 'month' : {
                                 if(keyCode == 40){
                                     time.setMonth(time.getMonth()  - 1);
                                 }else{
                                     time.setMonth(time.getMonth() + 1);
                                 }
                             }
                             break;
                             default : {
                                 if(keyCode == 40){
                                     time.setDate(time.getDate() - 1);
                                 }else{
                                     time.setDate(time.getDate() + 1);
                                 }
                             }
                         }
                         if( this._assCalendar.component.checkDate( time ) ){
                             this.setData('ltPropCurrentDate', this.getDateFromFormat(time, this.getData('ltPropFormat')));
                         }
                         _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.measure( this.findCalendarRange.bind( this, {}, input, true ) )
                     } else {
                         if((input.selectionEnd == input.value.length && (keyCode == 39 || (!evt.shiftKey && keyCode == 9))) || (input.selectionStart == 0 && (keyCode == 37 || (evt.shiftKey && keyCode == 9)))){
                             return
                         }else{
                             var daterange = this.getData('dateRange'),
                             dateOrder = this.data.dateOrder,
                             index;

                             for( var i = 0; i < dateOrder.length; i++ ){
                                 if( dateOrder[ i ].name == selected ){
                                     index = i;
                                     break;
                                 }
                             }

                             if( keyCode == 39 || ( !evt.shiftKey && keyCode == 9 ) ) {
                                 if( i + 1 == dateOrder.length ){
                                     start = end = daterange[ selected ][ 1 ] + 1;
                                 } else {
                                     var returned = this.setRangeByMoment( input, daterange, dateOrder[ index + 1 ].name );
                                     start = end = Math.abs( ( returned[ 0 ] + returned[ 1 ] ) * 0.5 )
                                 }
                             }else if( keyCode == 37 || ( evt.shiftKey && keyCode == 9 ) ){
                                 if( i == 0 ){
                                     start = end = daterange[ selected ][ 0 ] + 1;
                                 } else {
                                     var returned = this.setRangeByMoment( input, daterange, dateOrder[ index - 1 ].name );
                                     start = end = Math.abs( ( returned[ 0 ] + returned[ 1 ] ) * 0.5 )
                                 }
                             }
                             _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.measure( this.findCalendarRange.bind( this, {}, input ) );
                             if( this.data.ltPropPreventSelection ){
                                 return;
                             }
                             // start = input.selectionStart;
                             // end = input.selectionEnd;
                             evt.preventDefault();
                         }
                     }
                     // restore current selection
                     // $L.fastdom.mutate(function(){
                         input.selectionStart = start;
                         input.selectionEnd = end;
                     // })
                  }
              }
    }

    focusCallback(evt) {
         if( this.getMethods( 'onFocus' ) ) {
            /**
             * @method onFocus
             * @version 1.0.6
             */            
             this.executeMethod( 'onFocus', evt, this.$node )
         }
    }

    focusout() {
         if(!this.preventFocus){
             var cal = this.$node.calendarDiv;
             if( !cal || cal.classList.contains('lyteCalendarHidden') ) {
                 return
             }

             var data = this.data;

             if( data.navigation ){
                 return;
             }

             clearTimeout( this._hidecall );
             this._hidecall = setTimeout( this._hideCalendar.bind( this ), 0 );
         }else {
             delete this.preventFocus;
         }
    }

    maxLen(value) {

         var max = this.data.ltPropMaxlength;
         return max != undefined ? value.toString().match( new RegExp('.{0,' + max + '}') )[ 0 ] : value;
    }

    showCalendarAction(event, input) {
          var $node = this.$node;

         $node.classList.add( 'lyteInputFocus' )
         this.focusCallback.call( this, event );

         if( this.data.ltPropAria ){
             return;
         }

         if( _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( $node.calendarDiv ).hasClass( 'lyteCalendarHidden' ) || !this.data.ltPropBindToBody ){
             this.showCalendar( event, input );
         }
    }

    input_blur(event, flag) {

         var r_target = event.relatedTarget;

         if( this.data.ltPropAria && r_target && this.$node.contains( r_target ) ){
             return;
         }


         delete this._lasttyped;
         var ty = /date/i.test( this.data.ltPropType ), 
         mt = this.getMethods( 'onBlur' );

         if( ty ){
             if( r_target && this.data.ltPropHeaderType == "dropdown" ){
                 var drop = r_target.closest( 'lyte-drop-box' );
                 if( drop ){
                     var origindd = drop.origindd,
                     $node = this.$node,
                     wormhole = $node.calendarComp;

                     if( origindd && wormhole && wormhole.contains( origindd ) ){
                         return $node.focus();
                     }
                 }
             }

         }


         this.$node.classList.remove( 'lyteInputFocus' )
         if( !flag ) {
             var type = this.getData( 'ltPropType' )
             if( this._calmsfg ) {
                 this.valUpdate();
                 clearTimeout( this._blurcall );
                 this._blurcall = setTimeout( function(){
                     if( ty ){
                         this.focusout.call( this )
                     }
                     if( mt ) {
                         this.executeMethod( 'onBlur', event, this.$node )
                     }
                 }.bind( this ), 0)
                 delete this._calmsfg;
             } else {
                 if( type == "number" ) {
                     var max = this.data.ltPropMax,
                     min = this.data.ltPropMin,
                     value = parseFloat( event.target.value ),
                     happened = false;

                     if( !isNaN( value ) ){
                         if( [ undefined, null, '' ].indexOf( min ) == -1 && min.constructor == Number ){
                             value = Math.max( min, value );
                             happened = value == min;
                         } 
                         if( [ undefined, null, '' ].indexOf( max ) == -1 && max.constructor == Number ){
                             value = Math.min( max, value );
                             happened = happened || ( value == max );
                         }
                         if( happened ){
                             event.target.value = value;
                         }
                     }
                 }
                 this.valUpdate.call( this );
                 if( ty ){
                     this.focusout.call( this )
                 }
                 if( mt ) {
                    /**
                     * @method onBlur
                     * @version 1.0.6
                     */                            
                     this.executeMethod( 'onBlur', event, this.$node )
                 }
             }
         }
    }

    open_cal_for_icon(evt) {
         if(  _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node.calendarDiv ).hasClass( 'lyteCalendarHidden' ) || !this.data.ltPropBindToBody ){
             this.showCalendar( evt, this.$node.getElementsByTagName( 'input' )[ 0 ] );
         }
    }

    static actions(arg1) {
        return Object.assign(super.actions({

                calendarKey : function( evt ){
                    if( evt.key == "Escape" ){
                        this._hideCalendar( void 0, true );
                    }
                },

                togglePassword : function(){
                    this.setData( 'ltPropPasswordVisibility', !this.data.ltPropPasswordVisibility );
                },

                calIconClick : function( evt, __this ){
                    this.open_cal_for_icon( evt );
                },

                calIconFocus : function( evt, __this ){
                    var __rel = evt.relatedTarget;

                    if( __rel && this.$node.contains( __rel ) ){
                        return;
                    }

                    this.showCalendarAction( evt, __rel );
                },

                calIconBlur : function( evt ){

                    var __rel = evt.relatedTarget,
                    calendar = this._assCalendar;

                    if( !( calendar && __rel && calendar.contains( __rel ) ) ){
                        this._hideCalendar();
                    }

                    if( __rel && this.$node.contains( __rel ) ){
                        return;
                    }

                    this.input_blur( evt );
                },

                calIconKey : function( evt ){
                    switch( evt.key ){
                        case "Enter" :
                        case ' ' : {
                             this.open_cal_for_icon( evt );
                        }
                        break;
                    }
                },

                resizeSelect : function( evt ){
                    this.rsizefun( evt )
                },

                preventDrag : function( evt ){
                    evt.preventDefault();
                },

                clsIcon : function( evt ){
                    this.$node.ltProp( 'value', '' );
                    this.$node.focus();
                    if( this.data.isSearch ){
                        /**
                         * @event on-ip-clear
                         * @version 2.0.0
                         */                    
                        this.throwEvent( 'on-ip-clear', evt );
                    }
                    if( this.getMethods( 'onClear' ) ) {
                        /**
                         * @method onClear
                         * @version 2.0.0
                         */                    
                        this.executeMethod( 'onClear', evt, this.$node );
                    }
                },

                calmsdown : function( evt, _this ){
                    this._calmsfg = true;

                    var target = evt.target;

                    if( this.$node.calendarDiv.contains( target.correspondingElement || target ) ) {
                        this.preventFocus = true
                    }
                },

                 numberKeydown : function( evt, _this ){
                    var ff = /firefox/ig.test( window.navigator.userAgent );
                    if( !( window._lyteUiUtils.isAndroid && !( ff ) ) ) {
                        var key = evt.which || evt.keyCode, prev, value = _this.value, isIE = /rv:11/ig.test( window.navigator.userAgent );
                        if( /^(8|9|27|37|39|13|187|189)$/.test( key ) || ( ff && /^173$/i.test( key ) ) || ( key >= 48 && key <=57 ) || ( key >= 96 && key <= 105 ) || evt.metaKey || evt.ctrlKey || ( /^(38|40)$/.test( key ) && !isIE ) ){
                            return;
                        }
                        if( /^(69|190)$/.test( key ) ){
                            if( ( !/\./i.test( value ) && key == 190 ) || ( key == 69 && ( !/e/i.test( value ) && value != "" ) ) ) {
                                return;
                            }
                        }
                        evt.preventDefault();
                        if( key == 38 ){
                            value = Number( value || 0 ) + Number( _this.step );
                        } else if( key == 40 ) {
                            value = Number( value || 0 ) - Number( _this.step );
                        }
                        if( isIE && /^(38|40)$/.test( key ) ){
                            var newVal = parseInt( this.maxLen( value ) );
                            if( !isNaN( newVal ) ) {
                                newVal = Math.min( Math.max( newVal, _this.min ? _this.min : -Infinity ), _this.max ? _this.max : Infinity );
                                if( !isNaN( newVal ) ) {
                                    _this.value = newVal;
                                }
                            }
                        }
                     }
                 },

                 numberPaste : function( evt, _this ) {
                    var clip = evt.clipboardData || window.clipboardData,
                    newVal = _this.value + clip.getData( 'text' ).replace(/\'|\"/g, '');
                    if( /^([0-9]+|\.(?!e){1,}|\+|\-)([0-9\.\e]{0,}$)/i.test( newVal ) ){
                        return;
                    }
                    if( newVal.length == this.maxLen( newVal ) && !/rv:11/ig.test( window.navigator.userAgent ) ){
                        return;
                    }
                    evt.preventDefault();
                 },

                 focusClass : function(evt){
                    this.$node.classList.add( 'lyteInputFocus' )
                    this.focusCallback.call( this, evt )
                 },

                 "blurThrow":function(event, flag){
                    this.input_blur( event, flag );
                 },

                 input : function( evt, _this ){
                    if( this.data.ltPropType == 'number' ){
                        var value = _this.value, newVal1 = this.maxLen( value ), newVal;
                        newVal = Math.min( newVal1, _this.max != undefined && _this.max != '' ? _this.max : Infinity )
                        if( value !== newVal1 || newVal1 != newVal ){
                            if( newVal1 == newVal ) {
                                _this.value = newVal1;
                            } else if ( isNaN( newVal ) ){
                                _this.value = parseFloat( newVal1 );
                            } else {
                                _this.value = newVal;
                            }
                        }
                    }
                    if(this.getData('ltPropAutoUpdate')){
                        clearTimeout( this._iptime );
                        var updly = this.data.ltPropUpdateDelay;
                        if( updly != undefined ){
                            this._iptime = setTimeout( this.valUpdate.bind( this ), updly );
                        } else {
                            this.valUpdate.call( this );
                        }
                    }
                 },

                 "showcalendar":function(event, input){
                    this.showCalendarAction( event, input );
                 },

                 calendarClick : function(evt, input){
                    
                    var __focus = this._focus,
                    __data = this.data;

                    if( __focus && window._lyteUiUtils.isMobile || ( __data.ltPropReadonly && !__data.ltPropPreventKeys ) ){      
                        delete this._focus;     
                        return;     
                    }
                    if( !__focus && /date/i.test( __data.ltPropType ) && !this._prevclick ){
                        
                        var calendar_elem = this.$node.calendarDiv;

                        if( !this.data.ltPropAria && ( !calendar_elem || _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( calendar_elem ).hasClass( 'lyteCalendarHidden' ) ) ){
                            this.showCalendar( evt, input);
                        }
                    }
                    this.findCalendarRange(evt, input);
                 },

                 calendarKeydown : function(){
                    this.calendarKeydown.apply(this, arguments)
                 },

                 timeBlur : function(evt, input){
                    if( this._emptytimeValue && input.value ){
                        this.checkTimeStr( input, true );
                    } else if( this.data.ltPropValidateOnBlur && !this._emptytimeValue ){
                        var ret = this._getCrctHour( input.value, this.data.ltPropTimeFormat, this.data.meridian );
                        this.setData( 'ltPropDefaultTime', ret ? ret : this._findNearest( input.value, this.data.ltPropTimeFormat ) );
                    }
                    this.$node.classList.remove( 'lyteInputFocus' )
                    this.setData('selectedField', {});
                    if( this.getMethods( 'onBlur' ) ) {
                        if( this._calmsfg ){
                            this.executeMethod( 'onBlur', evt, this.$node )
                        } else {
                            setTimeout( function(){ 
                                this.executeMethod( 'onBlur', evt, this.$node )
                            }.bind( this ), 0 )
                        }
                    }
                 },

                 timeInput : function( _this ){
                    if( this._emptytimeValue ){
                        this.checkTimeStr( _this );
                    } else {
                        var value = _this.value || "",
                        format = this.data.ltPropTimeFormat,
                        form,
                        meridian = this.data.meridian;
                        if( format == 12 ){
                            form = "hh:mm A";
                            value = value.replace( meridian.AM, 'AM' ).replace( meridian.PM, 'PM' );
                        } else {
                            form = "HH:mm";
                        }
                        if( value && (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment) && !_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( value, form ).validate() ){
                            _this.value = this.data.ltPropDefaultTime;
                        }
                    }

                 },

                 timeFocus : function(evt, input){
                    this.$node.classList.add( 'lyteInputFocus' )
                    var value = input.value.trim();
                    this.setData('selectedField', {prop : 'hour', val : 0});
                    input.selectionStart = 0;
                    this.fixSelection.call(this, 0, {prop : 'hour', val : 0}, input);
                    this.focusCallback.call( this, evt )
                 },

                 timeKeydown : function(evt, input){
                    if( this.data.ltPropReadonly || this._emptytimeValue ){
                        return;
                    }


                    if( /enter/i.test( evt.key ) ){
                        if( this.data.ltPropAria && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.dropbox ).hasClass( 'lyteDropdownHidden' ) ){
                            this.open_dropdown();
                            // evt.preventDefault();
                            evt.stopPropagation();
                            evt.stopImmediatePropagation();
                        }
                        return;
                    }


                    var selectedField = this.getData('selectedField'), meridian = this.getData('meridian'), timeFormat = this.getData('ltPropTimeFormat'), flag = true, oriDrop = this.getData('originalData'), rendered = this.getData('dropdownData'),
                    keyCode = window._lyteUiUtils.getCorrectNumberCode( evt.which || evt.keyCode ),
                    prev_nav = this.data.ltPropPreventDropdownNavigation,
                    is_drop_open =  this.dropbox && !_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.dropbox ).hasClass( 'lyteDropdownHidden' );

                    if( !prev_nav && is_drop_open && /38|40|13/.test( keyCode ) ){
                        return;
                    }

                    if( prev_nav && is_drop_open && /38|40/.test( keyCode ) ){
                        evt.stopPropagation();
                    }

                    if(selectedField.prop && !( evt.ctrlKey || evt.metaKey ))
                        {
                            var start = input.selectionStart, end = input.selectionEnd;
                            if(start == end){
                                this.timeClick( {}, input, start );
                                start = input.selectionStart, end = input.selectionEnd;
                                selectedField = this.getData('selectedField');
                            } else {
                                if( start == 0 && end == input.value.length ){
                                    start = 0;
                                    end = 2;
                                    this.timeClick(  {}, input, start );
                                    selectedField = this.getData( 'selectedField' );
                                }
                            }
                            var dontcall;
                            if(keyCode != 9){
                                evt.preventDefault();
                            }
                            if([9, 37, 39].indexOf(keyCode) != -1){
                                if((evt.shiftKey || keyCode == 37) && selectedField.prop != 'hour' && keyCode != 39){
                                    this.fixSelection.call(this, -3, selectedField, input);
                                    evt.preventDefault();
                                    dontcall = true;
                                }
                                else if((((!evt.shiftKey || keyCode == 39) && selectedField.prop != 'minute' && timeFormat == 24) || (!evt.shiftKey && selectedField.prop != 'meridian' && timeFormat == 12)) && keyCode != 37){
                                    this.fixSelection.call(this, 3, selectedField, input);
                                    evt.preventDefault();
                                    dontcall = true;
                                }
                                flag = false;

                            }else if(keyCode >=48 && keyCode <= 57 && selectedField.prop != 'meridian'){
                                if(selectedField.prop == 'hour'){
                                    this.hourTimeSet.call(this, input, evt, "hour", start, end);
                                }else if(selectedField.prop == 'minute'){
                                    this.hourTimeSet.call(this, input, evt, 'minute', start, end);
                                }
                                this.data.ltPropDropdown && this.constructNewDrop(input, timeFormat);
                            }else if((keyCode == 38 || keyCode == 40) && selectedField.prop != 'meridian'){
                                if(keyCode == 38){
                                    this.timeIncrease.call(this, input, evt, selectedField.prop, start, end);
                                }
                                else{
                                    this.timeDecrease.call(this, input, evt, selectedField.prop, start, end);
                                }
                                flag = false;
                                dontcall = true;
                            }else if(selectedField.prop == 'meridian'){
                                var val = input.value.trim().slice(6,input.value.length), final, key = String.fromCharCode(keyCode).toUpperCase();
                                if(meridian.PM.toUpperCase().indexOf(key) == 0){
                                    val = meridian.PM;
                                }else if(meridian.AM.toUpperCase().indexOf(key) == 0){
                                    val = meridian.AM;
                                }
                                else if([38, 40].indexOf(keyCode) != -1){
                                    if(val == meridian.PM){
                                        val = meridian.AM
                                    }else{
                                        val = meridian.PM
                                    }
                                }
                                if(val != meridian.AM){
                                //  if(input.value.trim().slice(0, 2) == '12'){
                                //      final = this.replaceVal.call(this, input, '00', 0, 2);
                                //  }
                                // }else{
                                    if(input.value.trim().slice(0, 2) == '00'){
                                        final = this.replaceVal.call(this, input, '12', 0, 2);
                                    }
                                }
                                if(val){
                                    final = this.replaceVal.call(this, final ? final : input, val, start, end);
                                }
                                if( !this.data.ltPropValidateOnBlur ){
                                    var returnV = this.maxValCheck(final);
                                    if(returnV == false){
                                        return false;
                                    }
                                }
                                this.setData('ltPropDefaultTime', final);
                                flag = false;
                            }
                            !dontcall && this.fixSelection.call(this, 0, this.getData('selectedField'), input);
                         if(flag)
                            {
                                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().fastdom.mutate(function(){
                                    // restore current selection
                                    input.selectionStart = start;
                                    input.selectionEnd = end;
                                })
                            }
                         if(oriDrop.length != rendered.length && (keyCode < 48 || keyCode > 57)){
                            this.dropdown.ltProp( 'selected', '' );
                            this.setData('dropdownData', oriDrop);
                            this.dropdown.ltProp( 'selected', this.data.ltPropDefaultTime );
                         }  
                      } else if( /^8|46$/i.test( keyCode ) ) {
                        evt.preventDefault();
                      }
                 },

                 timeClick : function(){
                    this.timeClick.apply(this, arguments)
                 }
         }), arg1);
    }

    checkTimeStr(_this, frmblur) {
       if( this._emptytimeValue ){
           var value = _this.value || "",
           format = this.data.ltPropTimeFormat,
           form,
           meridian = this.data.meridian;
           if( format == 12 ){
               form = "hh:mm A";
               value = value.replace( meridian.AM, 'AM' ).replace( meridian.PM, 'PM' );
           } else {
               form = "HH:mm";
           }
           if( value && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( value, form ).validate() ){
               var ret = this._getCrctHour( _this.value, format, meridian );
               this.setData( 'ltPropDefaultTime', ret ? ret : this._findNearest( _this.value, format ) );
               delete this._emptytimeValue;
           } else if( value && frmblur ){
               if( this.data.ltPropStartTime == this.data.ltPropDefaultTime ){
                   this.setData( 'ltPropDefaultTime', "" );
               }
               this.setData( 'ltPropDefaultTime', this.data.ltPropStartTime );
               delete this._emptytimeValue;
           }
       }
    }

    check_dst(arr, check, return_value) {
       var Lc = this.$addon.objectUtils,
       moment = (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment),
       _this = this,
       data = _this.data,
       date = data.ltPropCurrentDate,
       format = data.ltPropFormat,
       timeFormat = data.ltPropTimeFormat == 12,
       __format = timeFormat ? 'hh:mm A' : 'HH:mm',
       fn = function( item ){            
           return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( date + ' ' + item.time, format + ' ' + __format ).format( __format ) != item.time;
       },
       common = function( item ){
           if( item.className ){
               Lc( item, 'delete', 'className' );
           }
       };

       if( !moment ){
           return;
       }

       if( check ){
           if( date ){
               var __moment = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( date + ' ' + arr, format + ' ' + __format  );
               if( return_value ){
                   return __moment.format( __format );
               }
               return __moment;
           }
           if( return_value ){
               return arr;
           }
           return _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default().moment( arr, __format  );
       }

       if( date ){
           arr.forEach( function( item ){
               if( fn( item ) ){
                   if( !item.className ){
                       Lc( item, 'add', 'className', 'lyteDropdownActive' );
                   }
               } else {
                   common( item );
               }
           });
       } else {
           arr.forEach( common );
       }
    }

    static observers(arg1) {
        return Object.assign(super.observers({
            textareaFuncObs : function(){
                var __this = this,
                __data = __this.data;

                if( __data.ltPropType == "textarea" ){
                    var resize = __data.ltPropTextAreaResize,
                    __horizontal = resize.horizontal,
                    __vertical = resize.vertical,
                    to_value = ( __horizontal || __vertical ),
                    __class = "lyteTextareaResize",
                    vert = 'lyteTextareaResizeVertical',
                    hori = 'lyteTextareaResizeHorizontal';

                    this.setData( 'resize', to_value );

                    if( !to_value ){
                        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node ).addClass( 'lyteTextareaNoResize' );
                    }

                    if( __horizontal && !__vertical ){
                        __class += ( " " + hori );
                    } else if( __vertical && !__horizontal ){
                        __class += ( " " + vert );
                    }

                    this.setData( 'resizeClass', __class )
                }
            }.observes( 'ltPropTextAreaResize', 'ltPropTextAreaResize.{}' ).on( 'didConnect' ),

            btobody : function( arg ){
                if( !arg.newValue ){
                    delete this.$node.revertToToday;
                }
            }.observes( 'ltPropBindToBody' ),

            disAbs : function(){
                this.$node.classList[ this.data.ltPropDisabled ? 'add' : 'remove' ]( 'lyteInputDisabled' );
            }.observes( 'ltPropDisabled' ).on( 'didConnect' ),

            readAbs : function(){
                this.$node.classList[ this.data.ltPropReadonly ? 'add' : 'remove' ]( 'lyteInputReadonly' );
            }.observes( 'ltPropReadonly' ).on( 'didConnect' ),

            heightFuncObs : function( arg ){
                this.heightFunc();
            }.observes('ltPropHeight').on('didConnect'),

            widthfunObs : function(){
                this.widthfun();
            }.observes( 'ltPropWidth' ).on( 'didConnect' ),

            appearanceFunObs : function(){
                this.appearanceFun();
            }.observes('ltPropAppearance').on('didConnect'),

            directionfunObs : function(){
                this.directionfun();
            }.observes('ltPropDirection').on('didConnect'),

            input_wrap_obs : function( arg ){
                var oldValue = ( arg || { oldValue : "" } ).oldValue,
                newValue = this.data.ltPropInputWrapperClass,
                __$node = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node );

                __$node.removeClass( oldValue ).addClass( newValue );

                if( !arg && this.data.ltPropAria && /date/i.test( this.data.ltPropType ) ){
                    __$node.addClass( "lyteInputWithCalendarIcon" );
                }

            }.observes( 'ltPropInputWrapperClass' ).on( 'didConnect' ),

            focusObs : function(){
                var __data = this.data,
                $node = this.$node;

                if( __data.ltPropFocus ){
                    $node.focus();
                    
                    if( __data.ltPropFocusAtEnd ){
                        var elem = $node.getElementsByTagName( __data.ltPropType == "textarea" ? "textarea" : "input" )[ 0 ];

                        if( elem ){
                            window.requestAnimationFrame( function(){
                                elem.selectionStart = elem.value.length;
                            } );
                        }
                    }
                }
                // this.data.ltPropFocus = false
                $node.ltProp( 'focus', false );

            }.observes( 'ltPropFocus').on( 'didConnect' ),

            boxObs : function( arg ){
                var type = this.data.ltPropType,
                appearance = this.data.ltPropAppearance;

                if( type == "search" && appearance == "box" ){
                    this.setData( 'isBox', 'lyteInputBoxSearch' );
                } else {
                    this.setData( 'isBox', '' );
                }

                if( arg && arg.item == "ltPropType" ){
                    this.didDestroy( true );
                    this.init( true );
                    this.didConnect( true );
                }

            }.observes( 'ltPropType', 'ltPropAppearance' ).on( 'init' ),

            dateRegexObs : function( arg ){
                this.dateRegexFind( arg );
            }.observes('ltPropFormat'),

            timeFormatChange : function(){
                this.timeInValChange();
            }.observes('ltPropTimeFormat'),

            wheelObs : function(arg){
                if(arg.newValue){
                    this.$node.addEventListener('wheel', this.getData('eventListeners.timeWheel'));
                }else{
                    this.$node.removeEventListener('wheel', this.getData('eventListeners.timeWheel'));
                }
            }.observes('ltPropWheel'),

            timeBoundObs : function(arg){
                if(arg &&  arg.newValue == "" && arg.oldValue == undefined) {
                    return
                }
                if(!arg || (arg && arg.item != 'ltPropDefaultTime')){
                    this.startEndTimeObs(arg);
                }else{
                    if( arg && !arg.newValue ){
                        this.timeInValChange();
                        return;
                    }
                    if(this.setData('preventObs')){
                        this.setData('ltPropValue', arg.newValue);
                    }

                    this.englishTime();

                    if(this.getMethods('onTimeChange')){
                       /**
                        * @method onTimeChange
                        * @version 1.0.2
                        * @condition ltPropType time,datetime
                        */                
                        this.executeMethod('onTimeChange', arg, this.$node);
                    }
                    this._manualset = true;
                    if( this.data.ltPropType == 'time' ) {
                        this.setData( 'ltPropValue', arg.newValue )
                    } else {
                        this.checkCommonPlaceHolder();
                    }
                    delete this._manualset;
                }
            }.observes('ltPropStartTime', 'ltPropEndTime', 'ltPropDefaultTime'),

            dateChangeCallback : function( arg ){

                var __type = this.data.ltPropType;

                if( this.data.ltPropTimezoneHandling ){
                    this.check_dst( this.data.originalData );

                    var default_time = this.data.ltPropDefaultTime;

                    if( default_time ){
                        this.setData( 'ltPropDefaultTime', this.check_dst( default_time, 1, 1 ) );
                    }

                    if( __type == "time" ){
                        return;
                    }
                }

                var callDelay = this.data.ltPropCallbackDelay;

                this._manualset = true;
                if( __type ) {
                    this.setData( 'ltPropValue', arg.newValue )
                } 
                delete this._manualset;
                if( callDelay == undefined ){
                    this.dateCallback( arg );
                } else {
                    clearTimeout( this.__datachange );
                    this.__datachange = setTimeout( this.dateCallback.bind( this ), callDelay, arg );
                }
                this.checkCommonPlaceHolder();
            }.observes('ltPropCurrentDate'),

            valChangeObs : function(arg){
                var callDelay = this.data.ltPropCallbackDelay;
                if( !this._manualset ){
                    var tp = this.data.ltPropType;
                    if( tp == 'date' ) {
                        this.setData( 'ltPropCurrentDate', arg.newValue );
                    } else if( tp == "time" ) {
                        this.setData( 'ltPropDefaultTime', arg.newValue );
                    }
                }
                if( callDelay == undefined ){
                    this.timeCallback( arg );
                } else {
                    clearTimeout( this.__valuechange );
                    this.__valuechange  = setTimeout(this.timeCallback.bind(this), callDelay , arg);
                }
            }.observes('ltPropValue'),

            firePosCallBack: function() {

                var calendar = this.$node.calendarDiv,
                pos = this.data.pos;

                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( calendar ).removeClass( 'lyteInputCalendarUp lyteInputCalendarDown' ).addClass( 'lyteInputCalendar' + ( /up/i.test( pos ) ? 'Up' : 'Down' ) );

                if( this.getMethods( 'onPositionChanged' )) {
                   /**
                    * @method onDateChange
                    * @version 1.0.6
                    * @condition ltPropType time,datetime
                    */            
                    this.executeMethod( 'onPositionChanged', pos, calendar );
                }
            }.observes('pos'),

            password_obs : function( arg ){

                 var __data = this.data,
                 __visibility = __data.ltPropPasswordVisibility;

                 if( __data.ltPropType == "password" && __data.ltPropPasswordIcon ){
                     this.setData({
                         passwordClass : 'lyteInput' + ( __visibility ? 'Hide' : "Show" ) + 'PasswordIcon',
                         passwordTooltip : __data.ltPropPasswordTooltip[ __visibility ? "hide" : "show" ],
                         ltPropFocus : true
                     });

                     var __input = this.$node.getElementsByTagName( "input" )[ 0 ];

                     __input.setAttribute( "type", __visibility ? "text" : "password" );
                     window.requestAnimationFrame( function(){
                         __input.selectionStart = __input.selectionEnd = __input.value.length;
                     });

                     if( !arg ){
                         _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( this.$node ).addClass( 'lyteInputWithPasswordToggleButton' );
                     }
                 }

            }.observes( 'ltPropPasswordVisibility' ).on( 'didConnect' ),

            attrObs : function( arg ){

               var data = this.data;

               if( data.ltPropAria ){
                   var elems = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( "input,textarea", this.$node ),
                   aria1 = "ltPropAriaAttributes",
                   aria2 = "ltPropTimeAriaAttributes";

                   if( !arg || arg.item == aria1 ){
                       window._lyteUiUtils.setAttribute( elems.get( 0 ), data[ aria1 ] || {}, arg ? arg.oldValue : {} )
                   }

                   if( data.ltPropType == "datetime" && ( !arg || arg.item == aria2 ) ){
                       window._lyteUiUtils.setAttribute( elems.get( 1 ), data[ aria2 ] || {}, arg ? arg.oldValue : {} )
                   }
               }

            }.observes( 'ltPropAriaAttributes', 'ltPropAriaAttributes.{}', 'ltPropTimeAriaAttributes' ).on( 'didConnect' ),

            single_obs : function( arg ){

               if( !arg.path ){
                   return;
               }

               var key = arg.path.replace( /^\./, '' ),
               newValue = arg.newValue,
               data = this.data;

               if( data.ltPropAria ){
                   var obj = {};
                   obj[ key ] = newValue;

                   window._lyteUiUtils.setAttribute( _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_5___default()( 'input,textarea', this.$node ).get( /time/i.test( arg.item ) ? -1 : 0 ), obj, {} );
               }

            }.observes( 'ltPropAriaAttributes.*', 'ltPropTimeAriaAttributes.*' )
        }), arg1);
    }

    _() {
        _;
    }
}

LyteInputComponent._template = "<template tag-name=\"lyte-input\"> <template is=\"switch\" value=\"{{ltPropType}}\"> <template case=\"password\" is=\"case\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropLabel}}\" is=\"case\" lc-id=\"lc_id_0\"> <label for=\"{{ltPropId}}\" class=\"lyteLabel {{ltPropLabelClass}}\">{{ltPropLabel}}</label> </template></template> <div class=\"lyteField {{if(ltPropValue,'ltIconShow','')}} {{ltPropWrapperClass}}\" style=\"{{ltPropWrapperStyle}}\"> <input pattern=\"{{ltPropPattern}}\" data-tabindex=\"{{ltPropDataTabindex}}\" tabindex=\"{{ltPropTabIndex}}\" type=\"{{ltPropType}}\" value=\"{{lbind(ltPropValue)}}\" id=\"{{ltPropId}}\" class=\"{{ltPropClass}}\" maxlength=\"{{ltPropMaxlength}}\" name=\"{{ltPropName}}\" placeholder=\"{{ltPropPlaceholder}}\" autocomplete=\"{{ltPropAutocomplete}}\" autofocus=\"{{ltPropAutofocus}}\" disabled=\"{{ltPropDisabled}}\" style=\"{{ltPropStyle}}\" readonly=\"{{ltPropReadonly}}\" onfocus=\"{{action('focusClass',event)}}\" onblur=\"{{action('blurThrow',event)}}\" title=\"{{ltPropInputTitle}}\" oninput=\"{{action('input',event)}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropPasswordIcon}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteInputPasswordToggleIcon {{passwordClass}}\" lt-prop-tooltip-config=\"{{ltPropTooltipConfig}}\" lt-prop-title=\"{{passwordTooltip}}\" onclick=\"{{action('togglePassword')}}\"></span> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropCloseIcon}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"inputCloseIcon\" onclick=\"{{action('clsIcon',event)}}\" style=\"{{if(ltPropValue,'display: block;','display: none;')}}\"></span> </template></template> </div> </template> <template case=\"number\" is=\"case\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropLabel}}\" is=\"case\" lc-id=\"lc_id_0\"> <label for=\"{{ltPropId}}\" class=\"lyteLabel {{ltPropLabelClass}}\">{{ltPropLabel}}</label> </template></template> <div class=\"lyteField {{if(ltPropValue,'ltIconShow','')}} {{ltPropWrapperClass}}\" style=\"{{ltPropWrapperStyle}}\"> <input pattern=\"{{ltPropPattern}}\" data-tabindex=\"{{ltPropDataTabindex}}\" tabindex=\"{{ltPropTabIndex}}\" type=\"number\" value=\"{{lbind(ltPropValue)}}\" id=\"{{ltPropId}}\" class=\"{{ltPropClass}}\" maxlength=\"{{ltPropMaxlength}}\" name=\"{{ltPropName}}\" placeholder=\"{{ltPropPlaceholder}}\" autocomplete=\"{{ltPropAutocomplete}}\" autofocus=\"{{ltPropAutofocus}}\" disabled=\"{{ltPropDisabled}}\" readonly=\"{{ltPropReadonly}}\" style=\"{{ltPropStyle}}\" onkeydown=\"{{action('numberKeydown',event,this)}}\" onfocus=\"{{action('focusClass',event)}}\" onblur=\"{{action('blurThrow',event)}}\" step=\"{{ltPropStep}}\" max=\"{{ltPropMax}}\" min=\"{{ltPropMin}}\" title=\"{{ltPropInputTitle}}\" onpaste=\"{{action('numberPaste',event,this)}}\" oninput=\"{{action('input',event,this)}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropCloseIcon}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"inputCloseIcon\" onclick=\"{{action('clsIcon',event)}}\" style=\"{{if(ltPropValue,'display: block;','display: none;')}}\"></span> </template></template> </div> </template> <template case=\"textarea\" is=\"case\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropLabel}}\" is=\"case\" lc-id=\"lc_id_0\"> <label for=\"{{ltPropId}}\" class=\"lyteLabel {{ltPropLabelClass}}\">{{ltPropLabel}}</label> </template></template> <div class=\"lyteField {{ltPropWrapperClass}}\" style=\"{{ltPropWrapperStyle}}\"> <textarea autocomplete=\"{{ltPropAutocomplete}}\" pattern=\"{{ltPropPattern}}\" data-tabindex=\"{{ltPropDataTabindex}}\" tabindex=\"{{ltPropTabIndex}}\" id=\"{{ltPropId}}\" class=\"{{ltPropClass}}\" value=\"{{lbind(ltPropValue)}}\" rows=\"{{ltPropRows}}\" cols=\"{{ltPropCols}}\" maxlength=\"{{ltPropMaxlength}}\" name=\"{{ltPropName}}\" autofocus=\"{{ltPropAutofocus}}\" disabled=\"{{ltPropDisabled}}\" readonly=\"{{ltPropReadonly}}\" style=\"{{ltPropStyle}}\" onfocus=\"{{action('focusClass',event)}}\" onblur=\"{{action('blurThrow',event)}}\" title=\"{{ltPropInputTitle}}\" oninput=\"{{action('input',event)}}\"></textarea> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{resize}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"{{resizeClass}}\" onmousedown=\"{{action('resizeSelect',event)}}\" ontouchstart=\"{{action('resizeSelect',event)}}\"></span> </template></template> </div> </template> <template case=\"date\" is=\"case\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropLabel}}\" is=\"case\" lc-id=\"lc_id_0\"> <label for=\"{{ltPropId}}\" class=\"lyteLabel {{ltPropLabelClass}}\">{{ltPropLabel}}</label> </template></template> <div class=\"lyteField {{ltPropWrapperClass}}\" style=\"{{ltPropWrapperStyle}}\"> <input pattern=\"{{ltPropPattern}}\" data-tabindex=\"{{ltPropDataTabindex}}\" tabindex=\"{{ltPropTabIndex}}\" type=\"text\" id=\"{{ltPropId}}\" class=\"{{ltPropClass}}\" name=\"{{ltPropName}}\" placeholder=\"{{ltPropPlaceholder}}\" autocomplete=\"{{ltPropAutocomplete}}\" value=\"{{lbind(ltPropCurrentDate)}}\" autofocus=\"{{ltPropAutofocus}}\" disabled=\"{{ltPropDisabled}}\" readonly=\"{{ltPropReadonly}}\" onkeydown=\"{{action('calendarKeydown',event,this)}}\" onclick=\"{{action('calendarClick',event,this)}}\" onfocus=\"{{action('showcalendar',event,this)}}\" onblur=\"{{action('blurThrow',event)}}\" style=\"{{ltPropStyle}}\" title=\"{{ltPropInputTitle}}\" oninput=\"{{action('input',event)}}\" ondragstart=\"{{action('preventDrag',event)}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropAria}}\" is=\"case\" lc-id=\"lc_id_0\"> <span aria-haspopup=\"true\" aria-label=\"{{ltPropAriaLabel.button}}\" disabled=\"{{ltPropDisabled}}\" aria-expanded=\"{{isExpanded}}\" aria-controls=\"#{{randomId}}\" class=\"lyteInputCalendarIcon\" onclick=\"{{action('calIconClick',event,this)}}\" onfocus=\"{{action('calIconFocus',event,this)}}\" onblur=\"{{action('calIconBlur',event,this)}}\" tabindex=\"{{ltPropTabIndex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" onkeydown=\"{{action('calIconKey',event)}}\"></span> </template></template> </div> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropBindToBody}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-wormhole on-before-append=\"{{method('wormholeAppend')}}\" role=\"dialog\" aria-modal=\"true\" aria-label=\"{{ltPropAriaLabel.modal}}\"> <template is=\"registerYield\" yield-name=\"lyte-content\"> <div id=\"lyteCalendar\" class=\"lyteInputCalendar lyteCalendarHidden {{ltPropCalendarClass}}\" onmousedown=\"{{action('calmsdown',event,this)}}\" onkeydown=\"{{action('calendarKey',event)}}\"> <lyte-calendar id=\"{{randomId}}\" lt-prop-fill-rows=\"{{ltPropFillRows}}\" lt-prop-number-of-rows=\"{{ltPropNumberOfRows}}\" lt-prop-yield=\"{{ltPropYield}}\" lt-prop-format=\"{{ltPropFormat}}\" lt-prop-end-date=\"{{lbind(ltPropEndDate)}}\" lt-prop-start-date=\"{{lbind(ltPropStartDate)}}\" lt-prop-current-date=\"{{lbind(ltPropCurrentDate)}}\" lt-prop-year=\"{{lbind(ltPropYear)}}\" lt-prop-month-header-format=\"{{ltPropMonthHeaderFormat}}\" on-date-selected=\"{{method('on-dateselected')}}\" lt-prop-min-date=\"{{ltPropMinDate}}\" lt-prop-max-date=\"{{ltPropMaxDate}}\" lt-prop-start-week-day=\"{{ltPropStartWeekDay}}\" lt-prop-header-type=\"{{ltPropHeaderType}}\" on-navigate=\"{{method('calendarNavigate')}}\" on-viewdate-change=\"{{method('viewDateChange')}}\" on-view-change=\"{{method('viewChange')}}\" lt-prop=\"{{stringify(ltPropCalendarProperties)}}\" lt-prop-activate-navigation=\"{{lbind(navigation)}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"registerYield\" yield-name=\"footer\"> <lyte-yield yield-name=\"footer\"></lyte-yield> </template> </template></template> </lyte-calendar> </div> </template> </lyte-wormhole> </template></template> </template> <template case=\"datetime\" is=\"case\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropLabel}}\" is=\"case\" lc-id=\"lc_id_0\"> <label for=\"{{ltPropId}}\" class=\"lyteLabel {{ltPropLabelClass}}\">{{ltPropLabel}}</label> </template></template> <div class=\"lyteField {{ltPropWrapperClass}}\" style=\"{{ltPropWrapperStyle}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{showPlaceholder}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"lyteInputDateTimePlaceholder\">{{ltPropCommonPlaceholder}}</span> </template></template> <input autocomplete=\"{{ltPropAutocomplete}}\" data-tabindex=\"{{ltPropDataTabindex}}\" tabindex=\"{{ltPropTabIndex}}\" type=\"text\" class=\"{{ltPropClass}}\" id=\"date\" placeholder=\"{{ltPropPlaceholder}}\" value=\"{{lbind(ltPropCurrentDate)}}\" onkeydown=\"{{action('calendarKeydown',event,this)}}\" onclick=\"{{action('calendarClick',event,this)}}\" onfocus=\"{{action('showcalendar',event,this)}}\" onblur=\"{{action('blurThrow',event)}}\" oninput=\"{{action('input',event)}}\" ondragstart=\"{{action('preventDrag',event)}}\" disabled=\"{{ltPropDisabled}}\" readonly=\"{{ltPropReadonly}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropAria}}\" is=\"case\" lc-id=\"lc_id_0\"> <span aria-haspopup=\"true\" aria-label=\"{{ltPropAriaLabel.button}}\" disabled=\"{{ltPropDisabled}}\" aria-expanded=\"{{isExpanded}}\" aria-controls=\"#{{randomId}}\" class=\"lyteInputCalendarIcon\" onclick=\"{{action('calIconClick',event,this)}}\" onfocus=\"{{action('calIconFocus',event,this)}}\" onblur=\"{{action('calIconBlur',event,this)}}\" tabindex=\"{{ltPropTabIndex}}\" data-tabindex=\"{{ltPropDataTabindex}}\" onkeydown=\"{{action('calIconKey',event)}}\"></span> </template></template> <input autocomplete=\"{{ltPropAutocomplete}}\" tabindex=\"{{ltPropTabIndex}}\" type=\"text\" placeholder=\"{{ltPropTimePlaceholder}}\" class=\"{{ltPropTimeClass}}\" value=\"{{ltPropDefaultTime}}\" id=\"time\" onblur=\"{{action('timeBlur',event,this)}}\" onfocus=\"{{action('timeFocus',event,this)}}\" onkeydown=\"{{action('timeKeydown',event,this)}}\" onclick=\"{{action('timeClick',event,this)}}\" style=\"{{ltPropStyle}}\" ondragstart=\"{{action('preventDrag',event)}}\" disabled=\"{{ltPropDisabled}}\" oninput=\"{{action('timeInput',this)}}\" readonly=\"{{ltPropReadonly}}\"> </div> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropBindToBody}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-wormhole on-before-append=\"{{method('wormholeAppend')}}\" role=\"dialog\" aria-modal=\"true\" aria-label=\"{{ltPropAriaLabel.modal}}\"> <template is=\"registerYield\" yield-name=\"lyte-content\"> <div id=\"lyteCalendar\" class=\"lyteInputCalendar lyteCalendarHidden {{ltPropCalendarClass}}\" onmousedown=\"{{action('calmsdown',event,this)}}\" onkeydown=\"{{action('calendarKey',event)}}\"> <lyte-calendar id=\"{{randomId}}\" lt-prop-fill-rows=\"{{ltPropFillRows}}\" lt-prop-number-of-rows=\"{{ltPropNumberOfRows}}\" lt-prop-yield=\"{{ltPropYield}}\" lt-prop-format=\"{{ltPropFormat}}\" lt-prop-end-date=\"{{lbind(ltPropEndDate)}}\" lt-prop-start-date=\"{{lbind(ltPropStartDate)}}\" lt-prop-current-date=\"{{lbind(ltPropCurrentDate)}}\" lt-prop-year=\"{{lbind(ltPropYear)}}\" lt-prop-month-header-format=\"{{ltPropMonthHeaderFormat}}\" on-date-selected=\"{{method('on-dateselected')}}\" lt-prop-min-date=\"{{ltPropMinDate}}\" lt-prop-max-date=\"{{ltPropMaxDate}}\" lt-prop-start-week-day=\"{{ltPropStartWeekDay}}\" lt-prop-header-type=\"{{ltPropHeaderType}}\" on-navigate=\"{{method('calendarNavigate')}}\" on-viewdate-change=\"{{method('viewDateChange')}}\" on-view-change=\"{{method('viewChange')}}\" lt-prop=\"{{stringify(ltPropCalendarProperties)}}\" lt-prop-activate-navigation=\"{{lbind(navigation)}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"registerYield\" yield-name=\"footer\"> <lyte-yield yield-name=\"footer\"></lyte-yield> </template> </template></template> </lyte-calendar> </div> </template> </lyte-wormhole> </template></template> <lyte-dropdown class=\"lyteInputDateTimeDropdown\" lt-prop-position=\"{{ltPropPosition}}\" lt-prop-yield=\"true\" lt-prop-disabled=\"{{ltPropDropdownDisabled}}\" lt-prop-show=\"{{ltPropDropdownShow}}\" lt-prop-callout=\"{{ltPropDropdownCallout}}\" lt-prop-boundary=\"{{ltPropBoundary}}\" lt-prop-freeze=\"{{ltPropDropdownFreeze}}\" on-hide=\"{{method('hide')}}\" on-show=\"{{method('show')}}\" on-before-hide=\"{{method('beforeHide')}}\" on-before-show=\"{{method('beforeShow')}}\" on-option-selected=\"{{method('optionSelected')}}\" on-position-changed=\"{{method('positionChange')}}\" on-scroll=\"{{method('scroll')}}\" lt-prop-selected=\"{{ltPropDefaultTime}}\" lt-prop-animate=\"{{ltPropAnimate}}\" lt-prop-scope=\"{{ltPropScope}}\" lt-prop=\"{{stringify(ltPropDropdownProperties)}}\"> <template is=\"registerYield\" yield-name=\"yield\"> <lyte-drop-button class=\"lyteInputDateTimeDropButton\"></lyte-drop-button> <lyte-drop-box id=\"{{ltPropDropdownId}}\" class=\"{{ltPropDropdownClass}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropHeaderYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-head> <lyte-yield yield-name=\"timeheader\"></lyte-yield> </lyte-drop-head> </template></template> <lyte-drop-body> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"><template items=\"{{dropdownData}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item.time}}\" class=\"{{item.className}}\"> <lyte-yield yield-name=\"yield\" item-value=\"{{item}}\"></lyte-yield> </lyte-drop-item> </template> </template><template case=\"{{ltPropShowInterval}}\" is=\"case\" lc-id=\"lc_id_1\"><template items=\"{{dropdownData}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item.time}}\" class=\"{{item.className}}\"> <span>{{item.time}}</span> <span style=\"opacity: 0.5;float: right;margin-left: 5px;\">{{item.interval}}</span> </lyte-drop-item> </template> </template><template default=\"\"><template items=\"{{dropdownData}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item.time}}\" class=\"{{item.className}}\"> <span>{{item.time}}</span> </lyte-drop-item> </template> </template></template> </lyte-drop-body> </lyte-drop-box> </template> </lyte-dropdown> </template> <template case=\"time\" is=\"case\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropLabel}}\" is=\"case\" lc-id=\"lc_id_0\"> <label for=\"{{ltPropId}}\" class=\"lyteLabel {{ltPropLabelClass}}\">{{ltPropLabel}}</label> </template></template> <div class=\"lyteField {{ltPropWrapperClass}}\" style=\"{{ltPropWrapperStyle}}\"> <input data-tabindex=\"{{ltPropDataTabindex}}\" tabindex=\"{{ltPropTabIndex}}\" type=\"text\" value=\"{{ltPropDefaultTime}}\" id=\"{{ltPropId}}\" class=\"{{ltPropClass}}\" maxlength=\"{{ltPropMaxlength}}\" name=\"{{ltPropName}}\" placeholder=\"{{ltPropPlaceholder}}\" autocomplete=\"{{ltPropAutocomplete}}\" autofocus=\"{{ltPropAutofocus}}\" disabled=\"{{ltPropDisabled}}\" readonly=\"{{ltPropReadonly}}\" onblur=\"{{action('timeBlur',event,this)}}\" onfocus=\"{{action('timeFocus',event,this)}}\" onkeydown=\"{{action('timeKeydown',event,this)}}\" onclick=\"{{action('timeClick',event,this)}}\" style=\"{{ltPropStyle}}\" title=\"{{ltPropInputTitle}}\" ondragstart=\"{{action('preventDrag',event)}}\" oninput=\"{{action('timeInput',this)}}\"> </div> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropDropdown}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-dropdown class=\"lyteInputTimeDropdown\" lt-prop-position=\"{{ltPropPosition}}\" lt-prop-yield=\"true\" lt-prop-disabled=\"{{ltPropDropdownDisabled}}\" lt-prop-show=\"{{ltPropDropdownShow}}\" lt-prop-callout=\"{{ltPropDropdownShow}}\" lt-prop-boundary=\"{{ltPropBoundary}}\" lt-prop-freeze=\"{{ltPropDropdownFreeze}}\" on-hide=\"{{method('hide')}}\" on-show=\"{{method('show')}}\" on-before-hide=\"{{method('beforeHide')}}\" on-before-show=\"{{method('beforeShow')}}\" on-option-selected=\"{{method('optionSelected')}}\" on-position-changed=\"{{method('positionChange')}}\" on-scroll=\"{{method('scroll')}}\" lt-prop-selected=\"{{ltPropDefaultTime}}\" lt-prop-animate=\"{{ltPropAnimate}}\" lt-prop-scope=\"{{ltPropScope}}\" lt-prop=\"{{stringify(ltPropDropdownProperties)}}\"> <template is=\"registerYield\" yield-name=\"yield\"> <lyte-drop-button class=\"lyteInputTimeDropButton\"></lyte-drop-button> <lyte-drop-box id=\"{{ltPropDropdownId}}\" class=\"{{ltPropDropdownClass}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropHeaderYield}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-drop-head> <lyte-yield yield-name=\"timeheader\"></lyte-yield> </lyte-drop-head> </template></template> <lyte-drop-body> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropYield}}\" is=\"case\" lc-id=\"lc_id_0\"><template items=\"{{dropdownData}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item.time}}\" class=\"{{item.className}}\"> <lyte-yield yield-name=\"yield\" item-value=\"{{item}}\"></lyte-yield> </lyte-drop-item> </template> </template><template case=\"{{ltPropShowInterval}}\" is=\"case\" lc-id=\"lc_id_1\"><template items=\"{{dropdownData}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item.time}}\" class=\"{{item.className}}\"> <span>{{item.time}}</span> <span style=\"opacity: 0.5;float: right;margin-left: 5px;\">{{item.interval}}</span> </lyte-drop-item> </template> </template><template default=\"\"><template items=\"{{dropdownData}}\" item=\"item\" index=\"index\" is=\"for\" _new=\"true\"> <lyte-drop-item data-value=\"{{item.time}}\" class=\"{{item.className}}\"> <span>{{item.time}}</span> </lyte-drop-item> </template> </template></template> </lyte-drop-body> </lyte-drop-box> </template> </lyte-dropdown> </template></template> </template> <template default=\"\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropLabel}}\" is=\"case\" lc-id=\"lc_id_0\"> <label for=\"{{ltPropId}}\" class=\"lyteLabel {{ltPropLabelClass}}\">{{ltPropLabel}}</label> </template></template> <div class=\"lyteField{{if(ltPropValue,' ltIconShow','')}} {{isBox}} {{ltPropWrapperClass}}\" style=\"{{ltPropWrapperStyle}}\"> <input data-tabindex=\"{{ltPropDataTabindex}}\" tabindex=\"{{ltPropTabIndex}}\" type=\"text\" value=\"{{lbind(ltPropValue)}}\" id=\"{{ltPropId}}\" class=\"{{ltPropClass}}\" maxlength=\"{{ltPropMaxlength}}\" name=\"{{ltPropName}}\" placeholder=\"{{ltPropPlaceholder}}\" autocomplete=\"{{ltPropAutocomplete}}\" autofocus=\"{{ltPropAutofocus}}\" disabled=\"{{ltPropDisabled}}\" readonly=\"{{ltPropReadonly}}\" onfocus=\"{{action('focusClass',event)}}\" onblur=\"{{action('blurThrow',event)}}\" style=\"{{ltPropStyle}}\" title=\"{{ltPropInputTitle}}\" pattern=\"{{ltPropPattern}}\" oninput=\"{{action('input',event)}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropType,'==',&quot;search&quot;)}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"searchIcon\"></span> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropCloseIcon}}\" is=\"case\" lc-id=\"lc_id_0\"> <span class=\"inputCloseIcon\" onclick=\"{{action('clsIcon',event)}}\" style=\"{{if(ltPropValue,'display: block;','display: none;')}}\"></span> </template></template> </div>  </template> </template> </template>";;
LyteInputComponent._dynamicNodes = [{"t":"a","p":[1]},{"t":"s","p":[1],"c":{"password":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[1],"cn":"password"},{"t":"a","p":[3],"a":{"style":{"name":"style","dynamicValue":"ltPropWrapperStyle"}},"cn":"password"},{"t":"a","p":[3,1],"a":{"style":{"name":"style","dynamicValue":"ltPropStyle"},"t":{"name":"type","dynamicValue":"ltPropType"}},"cn":"password"},{"t":"s","p":[3,3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[0],"cn":"password"},{"t":"s","p":[3,5],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"a":{"style":{"name":"style","helperInfo":{"name":"if","args":["ltPropValue","'display: block;'","'display: none;'"]}}},"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"cn":"password"}]},"number":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[0],"cn":"number"},{"t":"a","p":[3],"a":{"style":{"name":"style","dynamicValue":"ltPropWrapperStyle"}},"cn":"number"},{"t":"a","p":[3,1],"a":{"style":{"name":"style","dynamicValue":"ltPropStyle"},"value":{"name":"value","dynamicValue":"ltPropValue","isLbind":true}},"cn":"number"},{"t":"s","p":[3,3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"a":{"style":{"name":"style","helperInfo":{"name":"if","args":["ltPropValue","'display: block;'","'display: none;'"]}}},"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"cn":"number"}]},"textarea":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[0],"cn":"textarea"},{"t":"a","p":[3],"a":{"style":{"name":"style","dynamicValue":"ltPropWrapperStyle"}},"cn":"textarea"},{"t":"a","p":[3,1],"a":{"style":{"name":"style","dynamicValue":"ltPropStyle"},"placeholder":{"name":"placeholder","dynamicValue":"ltPropPlaceholder"}},"cn":"textarea"},{"t":"s","p":[3,3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"cn":"textarea"}]},"date":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":2,"sibl":[1],"cn":"date"},{"t":"a","p":[3],"a":{"style":{"name":"style","dynamicValue":"ltPropWrapperStyle"}},"cn":"date"},{"t":"a","p":[3,1],"a":{"style":{"name":"style","dynamicValue":"ltPropStyle"}},"cn":"date"},{"t":"s","p":[3,3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":1,"sibl":[0],"cn":"date"},{"t":"s","p":[5],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"r","p":[1,1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"s","p":[1,1,1],"c":{"lc_id_0":{"dN":[{"t":"r","p":[1],"dN":[{"t":"i","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0]},{"t":"cD","p":[1,1],"in":0}],"dc":[1,0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[1,0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"date"}]},"datetime":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":5,"sibl":[4],"cn":"datetime"},{"t":"a","p":[3],"a":{"style":{"name":"style","dynamicValue":"ltPropWrapperStyle"}},"cn":"datetime"},{"t":"s","p":[3,1],"c":{"lc_id_0":{"dN":[{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":4,"sibl":[3],"cn":"datetime"},{"t":"a","p":[3,3],"cn":"datetime"},{"t":"s","p":[3,5],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":3,"sibl":[2],"cn":"datetime"},{"t":"a","p":[3,7],"a":{"style":{"name":"style","dynamicValue":"ltPropStyle"}},"cn":"datetime"},{"t":"s","p":[5],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"r","p":[1,1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"s","p":[1,1,1],"c":{"lc_id_0":{"dN":[{"t":"r","p":[1],"dN":[{"t":"i","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0]},{"t":"cD","p":[1,1],"in":0}],"dc":[1,0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[1,0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"datetime"},{"t":"a","p":[7],"cn":"datetime"},{"t":"r","p":[7,1],"dN":[{"t":"cD","p":[1],"in":4,"sibl":[3]},{"t":"a","p":[3]},{"t":"s","p":[3,1],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1,1],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[1,0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":3,"sibl":[2]},{"t":"s","p":[3,3,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[0],"cn":"lc_id_0"},{"t":"f","p":[0],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"i","p":[1,1],"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[1,0],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"a","p":[0],"cn":"lc_id_1"},{"t":"f","p":[0],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,1,0]},{"t":"tX","p":[1,3,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":0,"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{"dN":[{"t":"a","p":[0],"cn":"default"},{"t":"f","p":[0],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,1,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"lc_id_1":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0","lc_id_1"],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"cD","p":[3,3],"in":1,"sibl":[0]},{"t":"cD","p":[3],"in":0}],"dc":[4,3,2,1,0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"datetime"},{"t":"cD","p":[7],"in":0,"cn":"datetime"}]},"time":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":1,"sibl":[0],"cn":"time"},{"t":"a","p":[3],"a":{"style":{"name":"style","dynamicValue":"ltPropWrapperStyle"}},"cn":"time"},{"t":"a","p":[3,1],"a":{"style":{"name":"style","dynamicValue":"ltPropStyle"}},"cn":"time"},{"t":"s","p":[5],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"r","p":[1,1],"dN":[{"t":"cD","p":[1],"in":4,"sibl":[3]},{"t":"a","p":[3]},{"t":"s","p":[3,1],"c":{"lc_id_0":{"dN":[{"t":"i","p":[1,1],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[1,0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":3,"sibl":[2]},{"t":"s","p":[3,3,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[0],"cn":"lc_id_0"},{"t":"f","p":[0],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"i","p":[1,1],"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[1,0],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"a","p":[0],"cn":"lc_id_1"},{"t":"f","p":[0],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,1,0]},{"t":"tX","p":[1,3,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":0,"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{"dN":[{"t":"a","p":[0],"cn":"default"},{"t":"f","p":[0],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,1,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"lc_id_1":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0","lc_id_1"],"hc":true,"trans":true,"in":2,"sibl":[1]},{"t":"cD","p":[3,3],"in":1,"sibl":[0]},{"t":"cD","p":[3],"in":0}],"dc":[4,3,2,1,0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[1,0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"time"}]}},"d":{"dN":[{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"tX","p":[1,0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[1],"cn":"default"},{"t":"a","p":[3],"a":{"style":{"name":"style","dynamicValue":"ltPropWrapperStyle"}},"cn":"default"},{"t":"a","p":[3,1],"a":{"style":{"name":"style","dynamicValue":"ltPropStyle"}},"cn":"default"},{"t":"s","p":[3,3],"c":{"lc_id_0":{"dN":[],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"sibl":[0],"cn":"default"},{"t":"s","p":[3,5],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"a":{"style":{"name":"style","helperInfo":{"name":"if","args":["ltPropValue","'display: block;'","'display: none;'"]}}},"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"cn":"default"}]},"dc":{"password":{},"number":{},"textarea":{},"date":{"dc":[0],"hc":true,"trans":true},"datetime":{"dc":[2,1,0],"hc":true,"trans":true},"time":{"dc":[0],"hc":true,"trans":true},"default":{}},"co":["password","number","textarea","date","datetime","time"],"hc":true,"trans":true,"in":0},{"type":"dc","trans":true,"hc":true,"p":[0]}];;

LyteInputComponent._observedAttributes = [
    "ltPropDisabled",
    "ltPropAutofocus",
    "ltPropAutocomplete",
    "ltPropMaxlength",
    "ltPropName",
    "ltPropPlaceholder",
    "ltPropReadonly",
    "ltPropValue",
    "ltPropWidth",
    "ltPropTabIndex",
    "ltPropType",
    "ltPropAppearance",
    "ltPropDirection",
    "ltPropLabel",
    "ltPropId",
    "ltPropClass",
    "ltPropStyle",
    "ltPropWrapperStyle",
    "ltPropHeight",
    "ltPropPattern",
    "ltPropInputTitle",
    "ltPropRows",
    "ltPropCols",
    "ltPropTextAreaResize",
    "ltPropMax",
    "ltPropMin",
    "ltPropStep",
    "ltPropTimeFormat",
    "ltPropHourInterval",
    "ltPropDefaultTime",
    "ltPropMinuteInterval",
    "ltPropDropdown",
    "ltPropShowInterval",
    "ltPropStartTime",
    "ltPropEndTime",
    "ltPropConvertToNearest",
    "ltPropValidateOnBlur",
    "ltPropFillRows",
    "ltPropNumberOfRows",
    "ltPropMinDate",
    "ltPropMaxDate",
    "ltPropStartWeekDay",
    "ltPropMonthHeaderFormat",
    "daysOfWeek",
    "ltPropYear",
    "ltPropFormat",
    "viewDate",
    "ltPropStartDate",
    "ltPropEndDate",
    "ltPropCurrentDate",
    "ltPropBindToBody",
    "ltPropCalendarClass",
    "ltPropHeaderType",
    "ltPropDropdownDisabled",
    "ltPropDropdownShow",
    "ltPropDropdownCallout",
    "ltPropDropdownFreeze",
    "ltPropDropdownId",
    "ltPropDropdownClass",
    "ltPropPosition",
    "ltPropBoundary",
    "ltPropWheel",
    "ltPropYield",
    "ltPropAnimate",
    "ltPropPreventSelection",
    "ltPropPreventKeys",
    "ltPropUpdateDelay",
    "ltPropAutoUpdate",
    "ltPropCallbackDelay",
    "ltPropCloseIcon",
    "ltPropTimePlaceholder",
    "ltPropCommonPlaceholder",
    "ltPropTimeClass",
    "ltPropAria",
    "ltPropAriaAttributes",
    "ltPropTimeAriaAttributes",
    "ltPropFocus",
    "ltPropCalendarProperties",
    "ltPropDropdownProperties",
    "ltPropScope",
    "ltPropHeaderYield",
    "ltPropConvertedDate",
    "ltPropConvertedTime",
    "ltPropPreventDropdownNavigation",
    "ltPropInputWrapperClass",
    "ltPropWrapperClass",
    "ltPropTimezoneHandling",
    "ltPropFocusAtEnd",
    "ltPropPasswordIcon",
    "ltPropPasswordVisibility",
    "ltPropPasswordTooltip",
    "ltPropTooltipConfig",
    "ltPropAriaLabel",
    "ltPropDataTabindex",
    "ltPropLabelClass",
    "eventListeners",
    "selectedField",
    "endMinute",
    "startMinute",
    "dropdownData",
    "originalData",
    "dateRange",
    "meridian",
    "hour",
    "min",
    "selectedDateField",
    "preventObs",
    "resize",
    "resizeClass",
    "pos",
    "isSearch",
    "isBox",
    "dateOrder",
    "showPlaceholder",
    "lyteUnbound",
    "randomId",
    "navigation",
    "passwordClass",
    "passwordTooltip",
    "isExpanded"
];

[ 'click', 'scroll', 'resize', 'orientationchange' ].forEach( function( item ){
    window.addEventListener( item, window._lyteInput, true ); 
} )

/**
 * @syntax Text
 * @attribute ltPropType=text
 * <lyte-input  lt-prop-type="text" lt-prop-placeholder="enter text here" lt-prop-label="Name"> </lyte-input>
 */

/**
 * @syntax Number
 * @attribute ltPropType=number
 * <lyte-input lt-prop-label="Age" lt-prop-type="number"  lt-prop-placeholder="Enter number here"> </lyte-input>
 */

/**
 * @syntax Textarea
 * @attribute ltPropType=textarea
 * <lyte-input lt-prop-type="textarea" lt-prop-id="lyteinput" lt-prop-placeholder="Enter your comments" lt-prop-label="Comments" lt-prop-rows="5" lt-prop-cols="80" > </lyte-input>
 */

/**
 * @syntax Date
 * @attribute ltPropType=date
 * <lyte-input lt-prop-type="date" lt-prop-id="lyteinput" lt-prop-format="MM/DD/YYYY" lt-prop-label="Select DOB" lt-prop-placeholder="Select your DOB" > </lyte-input>
 */

/**
 * @syntax Time
 * @attribute ltPropType=time
 * <lyte-input lt-prop-type="time" lt-prop-time-format=12 lt-prop-wheel=true lt-prop-label="Select Time" > </lyte-input>
 */

/**
 * @syntax Date Time
 * @attribute ltPropType=datetime
 * <lyte-input lt-prop-type="datetime" lt-prop-placeholder="Select Date" lt-prop-format="MM/DD/YYYY" lt-prop-label="Date & Time"  > </lyte-input>
 */

/**
 * @syntax Date Yielded
 * @attribute ltPropType=date
 * @attribute ltPropYield=true
 * <lyte-input lt-prop-type="date" lt-prop-yield = true lt-prop-format="MM/DD/YYYY" lt-prop-label="Select DOB" lt-prop-placeholder="Select your DOB" > 
 *     <template is = "registerYield" yield-name = "footer">
 *         calendar footer
 *     </template>
 * </lyte-input>
 */

/**
 * @syntax Time Yielded
 * @attribute ltPropType=time
 * @attribute ltPropYield=true
 * <lyte-input lt-prop-type="time" lt-prop-yield = true lt-prop-time-format=12 lt-prop-wheel=true lt-prop-label="Select Time" > </lyte-input>
 *     <template is = "registerYield" yield-name = "item">
 *         {{itemValue.time}}
 *     </template>
 * </lyte-input>
 */

/**
 * @syntax Date Time yielded
 * @attribute ltPropType=datetime
 * @attribute ltPropYield=true
 * <lyte-input lt-prop-type="datetime" lt-prop-yield = true lt-prop-placeholder="Select Date" lt-prop-format="MM/DD/YYYY" lt-prop-label="Date & Time"  > </lyte-input>
 *     <template is = "registerYield" yield-name = "item">
 *         {{itemValue.time}}
 *     </template>
 *     <template is = "registerYield" yield-name = "footer">
 *         calendar footer
 *     </template>
 * </lyte-input>
 */

/**
* @syntax Password
* @attribute ltPropType=password
* <lyte-input lt-prop-type="password" lt-prop-label="password" lt-prop-placeholder="Enter password here"> </lyte-input>
* </lyte-input>
*/

/**
* @syntax staticBuilder
* @attribute ltPropType=text
* <lyte-input lt-prop-type="text" lt-prop-placeholder="enter text here" lt-prop-label="Name"> </lyte-input>
*/


LyteInputComponent.register("lyte-input", {
    hash: "LyteInputComponent_8",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});

/***/ }),

/***/ 51145038:
/*!**********************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-modal.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteModalComponent": () => (/* binding */ LyteModalComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_javascript_lyte_wormhole_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/javascript/lyte-wormhole.js */ 66898968);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    }
});






window.addModalEvent = function(event) {
    window.addEventListener('resize',function(event){
        // console.log(Math.max(document.documentElement.clientHeight, window.innerHeight || 0));
        if(window.LytePopup._lyteModalRTId){
            // console.log(LytePopup._lyteModalRTId);
            clearTimeout(window.LytePopup._lyteModalRTId);
            window.LytePopup._lyteModalRTId = false;
        }
        window.LytePopup._lyteModalRTId = setTimeout(function(){
            // for(var i = LytePopup.components.length - 1 ; i >= 0 ; i--){
            for(var i = 0  ; i < LytePopup.components.length ; i++){
            // console.log(LytePopup.components[i].$node);
                if(LytePopup.components[i].$node && LytePopup.components[i].$node.nodeName == "LYTE-MODAL" && LytePopup.components[i].childComp.style.visibility == "visible" && LytePopup.components[i].childComp.querySelector('.lyteModal')){
                    LytePopup.components[i].$node.component.setData('resizeCalled',true);
                    if(LytePopup.components[i].getData('ltPropParentModalId') == '' && LytePopup.components[i].getData('ltPropDependentModalId') != '') {
                        LytePopup.components[i].$node.component.updateScrollHandling();
                    }
                    else if(LytePopup.components[i].getData('ltPropParentModalId') == '' && LytePopup.components[i].getData('ltPropDependentModalId') == '') {
                        if((i == LytePopup.components.length - 1) && LytePopup.components[i].renderSidewise){
                            continue;
                        }
                        LytePopup.components[i].$node.component.updateScrollHandling();
                    }
                }
            }
            LytePopup._lyteModalRTId = false;
        },100);
    },true);

    document.addEventListener('click',function(event){
        var ele = event.target;
        while(!_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(ele).hasClass('modalWrapper') && ele.tagName != "LYTE-MODAL-FREEZE" && ele.tagName != 'LYTE-DROP-BOX' && ele.tagName != 'HTML'){
            ele = ele.parentElement;
            if(!ele){
                return
            }
        }
        if(ele.tagName == "HTML" || ele.tagName == "LYTE-MODAL-FREEZE"){
            for(var i = window.LytePopup.components.length -1 ; i>=0; i--){
                if(window.LytePopup.components[i].$node.tagName == "LYTE-MODAL" && window.LytePopup.components[i].childComp.style.visibility == "visible"){
                    var modal = window.LytePopup.components[i].$node;
                    var dontClose = true
                    if(modal.component.getData('ltPropAllowContainment') && ele.tagName === 'HTML'){
                        dontClose = false
                    }
                    if(modal && modal.component.getData('ltPropOverlayClose') && dontClose){
                        modal.ltProp('show',false);
                        break;
                    }
                }
            }
        }
        else{
            /*  If ele is having modalWrapper class ie. a modal and it is not the modal that is opened at last which is the current modal element in the page
            this means the click has happened outside the current modal
            so the current modal should be closed */
            if(ele.classList.contains('modalWrapper') && window.LytePopup.components.length > 1 && window.LytePopup.components[window.LytePopup.components.length -1].$node.tagName == "LYTE-MODAL"){
                var modal = window.LytePopup.components[window.LytePopup.components.length -1];
                var dontClose = true
                if(modal.getData('ltPropAllowContainment') && ele.tagName === 'HTML'){
                    dontClose = false
                }
                if(!(modal.childComp.contains(ele)) && modal.childComp.style.visibility == "visible" && modal.getData('ltPropOverlayClose') && dontClose){
                    modal.$node.ltProp('show',false);
                }
            }
        }
    },true);
};

/**
 * Renders a modal
 * @component lyte-modal
 * @version 1.0.0
 * @dependencies lyte-wormhole
 * @methods onBeforeShow,onShow,onBeforeClose,onClose,onResize
 * @utility alignModal,calculateOffset,trapFocus, reflectTransitionChange
 */

/**
 * @customElement lyte-modal-header
 */
/**
 * @customElement lyte-modal-content
 */
/**
 * @customElement  lyte-modal-footer
 */

class LyteModalComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    data(arg1) {
        return Object.assign(super.data({
            //config from callee

            /**
             * @componentProperty {boolean} ltPropShow
             * @version 1.0.0
             * @default false
             */
            "ltPropShow":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default": false}),

            /**
             * @componentProperty {boolean} ltPropFreeze
             * @version 1.0.0
             * @default true
             */
            "ltPropFreeze":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default": true}),

            /**
             * @componentProperty {boolean} ltPropShowCloseButton
             * @version 1.0.0
             * @default true
             */
            "ltPropShowCloseButton":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default": true}),

            /**
             * @componentProperty {boolean} ltPropCloseOnEscape
             * @version 1.0.0
             * @default true
             */
            "ltPropCloseOnEscape":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default": true}),
            /**
             * @typedef {object} transition
             * @property {slideFromTop|slideFromBottom|slideFromLeft|slideFromRight|fadeIn|zoom} animation
             * @property {string} duration
             */
            /**
             * @componentProperty {transition} ltPropTransition
             * @version 1.0.0
             * @default { "animation" :"slideFromTop" , "duration":"0.5s"}
             */
            "ltPropTransition":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("object",{"default":{"animation":"slideFromTop","duration":"0.5"}}),
            /**
             * @typedef {object} offset
             * @property {string} top
             * @property {string} left
             * @property {string} bottom
             * @property {string} right
             */
            /**
             * @componentProperty {offset} ltPropOffset
             * @version 1.0.0
             * @default { "top" :"center", "left" :"center"}
             */
            "ltPropOffset":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("object",{"default":{"top":"center","left":"center"}}),
            /**
             * @typedef {object} dimmer
             * @property {colorstring} color
             * @property {string} opacity
             */
            /**
             * @componentProperty {dimmer} ltPropDimmer
             * @version 1.0.0
             */
            "ltPropDimmer":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("object"), //,{"default":{"color":"black","opacity":"0.4"}}

            /**
             * @componentProperty {boolean} ltPropDraggable
             * @version 1.0.0
             * @default false
             *
             */
            "ltPropDraggable":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default": false}),

            /**
             * @componentProperty {boolean} ltPropAllowMultiple
             * @version 1.0.0
             * @default false
             *
             */
            "ltPropAllowMultiple":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default": false}),

            /**
             * @componentProperty {boolean} ltPropScrollable
             * @version 1.0.0
             * @default false
             *
             */
            "ltPropScrollable":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default": false}),

            /**
             * @componentProperty {string} ltPropMaxHeight
             * @version 1.0.0
             * @suffix px,pt,cm,mm,vh,vm,em
             */
            "ltPropMaxHeight":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string",{"default":""}),

            /**
             * @componentProperty {string} ltPropMaxWidth
             * @version 1.0.0
             * @suffix px,pt,cm,mm,vh,vm,em
             */
            "ltPropMaxWidth":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string",{"default":""}),

            /**
             * @componentProperty {string} ltPropWidth
             * @version 1.0.0
             * @suffix px,pt,cm,mm,vh,vm,em
             */
            "ltPropWidth":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string",{"default":""}),

            /**
             * @componentProperty {string} ltPropHeight
             * @version 1.0.0
             * @default auto
             * @suffix px,pt,cm,mm,vh,vm,em
             */
            "ltPropHeight":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string",{"default":"auto"}),

            /**
             * @componentProperty {string} ltPropWrapperClass
             * @version 1.0.0
             */
            "ltPropWrapperClass":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string",{"default":""}),

            /**
             * @componentProperty {boolean} ltPropBindToBody
             * @version 1.0.0
             * @default false
             *
             */
            "ltPropBindToBody":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default":false}),

            /**
             * @experimental ltPropShowCopy
             */
            "ltPropShowCopy":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default": false}),

            /**
             * @componentProperty {boolean} ltPropReRenderModal
             * @version 1.0.0
             * @default false
             *
             */
            "ltPropReRenderModal":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default":false}),

            /**
             * @componentProperty {boolean} ltPropOverlayClose
             * @version 1.0.0
             * @default false
             *
             */
            "ltPropOverlayClose":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default":false}),

            /**
             * @componentProperty {boolean} ltPropAria
             * @version 3.1.0
             * @default false
             *
             */
            "ltPropAria" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { default : false } ),

            /**
             * @componentProperty {object} ltPropAriaAttributes
             * @version 3.1.0
             */
            "ltPropAriaAttributes" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', { default : {} } ),

            /**
             * @componentProperty {boolean} ltPropPreventFocus
             * @version 3.3.0
             * @default false
             *
             */
            "ltPropPreventFocus" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default : false } ),

            /**
             * @componentProperty {boolean} ltPropSetContentHeight
             * @version 3.9.0
             * @default false
             *
             */
            "ltPropSetContentHeight" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default : false } ),

            /**
             * @componentProperty {number} ltPropCloseDuration
             * @version 3.10.0
             * @default undefined
             */
            "ltPropCloseDuration" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("number",{"default" : undefined}),

            /**
             * @componentProperty {boolean} ltPropOverlapModal
             * @version 3.19.0
             * @default true
             *
             */
            "ltPropOverlapModal" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default : true } ),

            /**
             * @componentProperty {boolean} ltPropIgnoreInlineDirection
             * @version 3.19.0
             * @default true
             *
             */
            "ltPropIgnoreInlineDirection" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default : false } ),

            /**
             * @componentProperty {boolean} ltPropAllowContainment
             * @version 3.68.0
             * @default false
             *
             */

             "ltPropAllowContainment" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean' , {
                default : false
            }),
            "ltPropFocusOnClose" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean' , {
                default : false
            }),
            "ltPropPadding" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string' , {
                default : ""
            }),

            "ltPropDependentModalId": (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {default: ''}),
            "ltPropParentModalId": (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {default: ''}),
            "ltPropShowWormhole" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean' , {
                default : false
            }),

            
            //local properties
            "first":(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default":true}),
            'resizeCalled' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default":false}),
            'initializedPosition' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default":false}),
            "prevHeight" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("number"),
            "returnedFalse" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean",{"default" : false}),
            "prevModalHeight" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("number"),
            "prevModalWidth" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("number"),
            "calculateHW" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", {"default":false}),
            "checkAria" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("number", {"default":0}),
            "beforeDragPosition" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object' , {default : {xPos:0,yPos:0}}),
            "resetTriggered" : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean' , {default : false})
            // "modalCreationOrder" : Lyte.attr('number' , {'default' : -1}),
        }), arg1);
    }

    addDragHandler() {
        var dragHeader = this.actualModalDiv.querySelector('lyte-modal-header');
        if(this.$node.ltProp("draggable")){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(dragHeader).addClass('lyteModalDragRunning');
        }
        if(dragHeader){
            dragHeader.parentEle = this;
            if(this.$node.ltProp("draggable")){
                dragHeader.addEventListener('mousedown',this.handleMove,true);
                dragHeader.addEventListener('touchstart',this.handleMove,true);
                dragHeader.classList.add('lyteModalHeaderDraggable');
            }
            else{
                dragHeader.removeEventListener('mousedown',this.handleMove,true);
                dragHeader.removeEventListener('touchstart',this.handleMove,true);
                dragHeader.classList.remove('lyteModalHeaderDraggable');
            }
        }
        else{
            console.warn("This modal is not draggable because it has no header");
            this.$node.ltProp("draggable",false);
        }
    }

    handleMove(e) {
        if(e.button === 2){
            return
        }
        var drag = e.currentTarget.parentEle.actualModalDiv, mouseOffset;
        window.LytePopup.node=drag;
        if(e.type == "mousedown"){
            mouseOffset = { x : e.clientX, y : e.clientY};
        }
        if(e.type == "touchstart"){
            mouseOffset = { x : e.touches[0].clientX, y : e.touches[0].clientY};
        }
        if(e.currentTarget.parentEle.getData('ltPropTransition').animation == "fadeIn"){
            LytePopup.xPos=mouseOffset.x-this.getBoundingClientRect().left;
            LytePopup.yPos=mouseOffset.y-this.getBoundingClientRect().top;
        }
        else{
            LytePopup.xPos=mouseOffset.x;
            LytePopup.yPos=mouseOffset.y;
        }
        var elePos = drag.getBoundingClientRect();
        drag.style.transitionDuration = "0s";
        if(e.type == "mousedown"){
            window.addEventListener('mousemove',e.currentTarget.parentEle.handleDrag,true);
            window.addEventListener('mouseup',e.currentTarget.parentEle.stopDrag,true);
        }
        if(e.type == "touchstart"){
            document.body.addEventListener('touchmove',e.currentTarget.parentEle.handleDrag,true);
            document.body.addEventListener('touchend',e.currentTarget.parentEle.stopDrag,true);
        }

    }

    handleDrag(e) {
        var drag = window.LytePopup.node;
        var curComp = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(drag).closest('lyte-wormhole')[0]._callee
        var dragBounding = drag.getBoundingClientRect()
        var compStyle = window.getComputedStyle(drag);
        if(!window.LytePopup.node){
            return;
        }
        var curleft = 0
        var curtop = 0
        var mouseOffset;
        if(e.type == "mousemove"){
            mouseOffset = { x : e.clientX, y : e.clientY};
        }
        if(e.type == "touchmove"){
            mouseOffset = { x : e.touches[0].clientX, y : e.touches[0].clientY};
        }
        if(window.LytePopup.node.closest('lyte-wormhole')._callee.component.getData('ltPropTransition').animation == "fadeIn"){
            curleft = (mouseOffset.x-window.LytePopup.xPos)
            curtop = (mouseOffset.y-window.LytePopup.yPos)
            if(!curComp.getData('ltPropAllowContainment')){
                drag.style.left = curleft+'px';
                drag.style.top = curtop+'px';
            } else {
                if(curleft + drag.getBoundingClientRect().width <= window.innerWidth && (curleft >= 0)){
                    drag.style.left = curleft + 'px';
                }else if(curleft < 0){
                    drag.style.left = "0px";
                } else {
                    drag.style.left = ( window.innerWidth - drag.getBoundingClientRect().width ) + 'px';
                }
        
                if(curtop + drag.getBoundingClientRect().height <= window.innerHeight && (curtop >= 0)){
                    drag.style.top = curtop + 'px';
                }else if(curtop < 0){
                    drag.style.top = "0px";
                } else {
                    drag.style.top = ( window.innerHeight - drag.getBoundingClientRect().height ) + 'px';
                }
            }

        }
        else{
          var matrix = window.LytePopup.node.closest('lyte-wormhole')._callee.component.transform
          if((window.LytePopup.node.closest('lyte-wormhole')._callee.component.getData('ltPropTransition').animation == "zoom") && !matrix){
            matrix = {}
            matrix.x = 0;
            matrix.y = 0
          } 
            var x = matrix.x+(mouseOffset.x-window.LytePopup.xPos),
                y = matrix.y+(mouseOffset.y-window.LytePopup.yPos);
                drag.style.transform = "translate("+x+"px, "+y+"px)";

                dragBounding = drag.getBoundingClientRect()

            if(curComp.getData('ltPropAllowContainment')){
                if(dragBounding.left + dragBounding.width > window.innerWidth && (dragBounding.left >= 0)){
                    x = (window.innerWidth - dragBounding.width) - parseFloat(compStyle.left)
                } else if(dragBounding.left<0){
                    x =  - parseFloat(compStyle.left)
                }
                if(dragBounding.top + dragBounding.height > window.innerHeight && (dragBounding.top >= 0)){
                    y = (window.innerHeight - dragBounding.height) - parseFloat(compStyle.top)
                } else if(dragBounding.top<0){
                    y = - parseFloat(compStyle.top)
                }
                drag.style.transform = "translate("+x+"px, "+y+"px)";
            }


        }
        window.getSelection().removeAllRanges();
    }

    stopDrag(e) {
        var targetElem = e.target;
        if(!_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(targetElem).hasClass('lyteModalDragRunning')){
            targetElem = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()('.lyteModalDragRunning')[0]
        }
        while(targetElem && targetElem !== document){
            if(targetElem.parentEle){
                if(e.type == "mouseup"){
                    this.removeEventListener('mousemove',targetElem.parentEle.handleDrag,true);
                    this.removeEventListener('mouseup',targetElem.parentEle.stopDrag,true);
                }
                if(e.type == "touchend"){
                    this.removeEventListener('touchmove',targetElem.parentEle.handleDrag,true);
                    this.removeEventListener('touchend',targetElem.parentEle.stopDrag,true);
                }
                break;
            }
            targetElem = targetElem.parentElement ? targetElem.parentElement : document;
        }
        if(window.LytePopup.node){
            var comp = window.LytePopup.node.closest('lyte-wormhole')._callee.component;
            window.LytePopup.node.style.transitionDuration = comp.getData('ltPropTransition').duration;
            if(comp.getData('ltPropTransition').animation != "fadeIn"){
                var matrix = new window.WebKitCSSMatrix(window.getComputedStyle(comp.actualModalDiv).transform);
                comp.transform = {'x' : matrix.m41, 'y' : matrix.m42};
            }
            LytePopup.node = null;
        }
    }

    clearFastdomBatch() {
        if(this.fastdomfn1){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.clear(this.fastdomfn1);
        }
        if(this.fastdomfn2){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.clear(this.fastdomfn2);
        }
        if(this.fastdomfn3){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.clear(this.fastdomfn3);
        }
        if(this.fastdomfn4){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.clear(this.fastdomfn4);
        }
        if(this.fastdomfn5){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.clear(this.fastdomfn5);
        }
        if(this.fastdomfn6){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.clear(this.fastdomfn6);
        }
        if(this.fastdomfn7){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.clear(this.fastdomfn7);
        }
        if(this.fastdomfn8){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.clear(this.fastdomfn8);
        }
        if(this.beforeShowId){
            clearTimeout(this.beforeShowId);
        }
    }

    /**
     * The method is going to set height and width of the modal
     *
     */
    updateScrollHandling() {    //It sets the height and width of the modal
        if(!this.$node.ltProp("freeze")){
            // this.$node.ltProp("scrollable",true);
            this.setData("calculateHW",true);
        }
        var modalElem = this.actualModalDiv;
        var oldHeight, oldWidth, newHeight, newWidth,
        w =  Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
        contentNode = modalElem.querySelector("lyte-modal-content");
        // contentNode = contentNode ? contentNode : modalElem;
        modalElem.style.maxWidth = "";
        modalElem.style.maxHeight = "";
        modalElem.style.height = this.$node.ltProp("height")?this.$node.ltProp("height"):"auto";
        modalElem.style.width = this.$node.ltProp("width")?( (!(this.getData('ltPropOverlapModal')) && this.$node.ltProp("width").indexOf('%') != -1) ? ((parseFloat(this.$node.ltProp("width"))/100) * w) + "px" : this.$node.ltProp("width") ):"auto";
        // console.log(this.$node.ltProp("width"));
        /*------------------------------ MEASURE STARTS --------------------------*/
        this.fastdomfn2 = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.measure(function() {    //Measures the initial height and width
            delete this.fastdomfn2;
            var modalElemOffset = modalElem.getBoundingClientRect();
            /*IF maxwidth or maxheigth given as a percentage then to calculate the actual width or height
                                we need the modalElements parent element's width and height*/
            var modalParentOff = modalElem.parentElement.getBoundingClientRect();
            var cs = window.getComputedStyle(modalElem);
            var borderDimensionY = ((cs.borderTopWidth ? parseFloat(cs.borderTopWidth) : 0) +
                                     (cs.borderBottomWidth ? parseFloat(cs.borderBottomWidth) : 0));
            var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - (this.getData('ltPropFreeze') ? parseInt(window.getComputedStyle(modalElem.parentElement).top) : 0);
            // console.log(modalElemOffset);
            /*------------------------------ MUTATE STARTS --------------------------*/
            this.fastdomfn3 = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function(){    //Checks for the max height and width provided by the user and sets the modal height and width based on that
                delete this.fastdomfn3;
                if(this.$node.ltProp("maxWidth")){
                    // this.$node.ltProp("scrollable",true);
                    // this.setData("calculateHW",true);
                    // oldWidth = modalElemOffset.width /*- borderDimensionX*/;
                    newWidth = this.$node.ltProp("maxWidth").indexOf('%') != -1 ? ((parseFloat(this.$node.ltProp("maxWidth"))/100) * modalParentOff.width) : parseFloat(this.$node.ltProp("maxWidth"));
                    modalElem.style.maxWidth = newWidth + "px";
                    // if(oldWidth < newWidth){
                    //     modalElem.style.width = oldWidth+"px";
                    //     // newWidth = oldWidth;
                    // }
                    modalElem.style.overflowX = "auto";
                }
                else{
                    newWidth = modalElemOffset.width /*- borderDimensionX*/;
                }

                if(this.$node.ltProp("maxHeight")){
                    this.childComp.querySelector(".modalWrapper").classList.add("scrollable");
                    // this.$node.ltProp("scrollable",true);
                    this.setData("calculateHW",true);
                    oldHeight = modalElemOffset.height - borderDimensionY;
                    var newH = this.$node.ltProp("maxHeight").indexOf('%') != -1 ? ((parseFloat(this.$node.ltProp("maxHeight"))/100) * modalParentOff.height) : parseFloat(this.$node.ltProp("maxHeight"));
                    // modalElem.style.height = newH + "px";
                    modalElem.style.maxHeight = newH + "px";
                    newHeight = newH - borderDimensionY;
                }
                else{
                    /*  +1 is added here to the oldHeight as offsetHeights are rounded off values. ie. 5.5 => 6.
                        So, if 5.5 + 5.5 = 11. But offsetHeight will give 6 + 6 by rounding off 5.5 which is != 11.
                        So for safety we add extra 1 px to the total height.
                    */
                    oldHeight = modalElem.offsetHeight - borderDimensionY + 1;
                    //If height is provided in px or em then we dont compare if it is greater than window height as it is fixed
                    if(this.$node.ltProp('height') && this.$node.ltProp('height') != "auto"/* && ((this.$node.ltProp('height')).indexOf('px') != -1 || (this.$node.ltProp('height')).indexOf('em') != -1)*/){
                        newHeight = oldHeight;
                        this.setData("calculateHW",true);
                    }
                    else{
                        newHeight = oldHeight > h ? h-40 : oldHeight;
                    }
                    if(this.$node.ltProp("scrollable")){
                        if(!(this.$node.ltProp('height')) || this.$node.ltProp('height') == "auto"){
                            newHeight = h-40;
                        }
                        this.setData("calculateHW",true);
                    }
                    if(contentNode /*this.actualModalDiv.querySelector("lyte-modal-content")*/ && contentNode.offsetHeight /*this.actualModalDiv.querySelector("lyte-modal-content")*/ > oldHeight - ((this.actualModalDiv.querySelector("lyte-modal-header") ? this.actualModalDiv.querySelector("lyte-modal-header").offsetHeight : 0) + (this.actualModalDiv.querySelector("lyte-modal-footer") ? this.actualModalDiv.querySelector("lyte-modal-footer").offsetHeight : 0))){
                        // this.$node.ltProp("scrollable",true);
                        this.setData("calculateHW",true);
                    }
                }
                if(this.getData("calculateHW") && contentNode){
                    var modalheader = this.actualModalDiv.querySelector("lyte-modal-header"), modalFooter = this.actualModalDiv.querySelector("lyte-modal-footer");
                    var modalHOff = null,modalFOff = null;
                    /*------------------------------ MEASURE STARTS --------------------------*/
                    this.fastdomfn4 = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.measure(function(){   //measures the content haeder, content and footer dimensions
                        delete this.fastdomfn4;
                        if(modalheader){
                            modalHOff = modalheader.offsetHeight;
                        }
                        if(modalFooter){
                            modalFOff = modalFooter.offsetHeight;
                        }
                        var diff = 0;
                        var modalHeight = modalElem.getBoundingClientRect().height;
                        // if(this.getData('resizeCalled')){
                        //     //to get the difference between previous height and current height
                        //     if(this.getData('prevHeight') < modalHeight){
                        //         diff = modalHeight - this.getData('prevHeight');
                        //     }
                        //     this.setData('resizeCalled',false);
                        // }
                        this.setData('prevHeight',modalHeight);
                        /*------------------------------ MUTATE STARTS --------------------------*/
                        this.fastdomfn5 = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function(){   //Sets the final height and width of the modal
                            delete this.fastdomfn5;
                            var newH = (newHeight - ((modalHOff ? modalHOff : 0)+ (modalFOff ? modalFOff : 0)));
                            contentNode.style.maxHeight = (newH > 0 ? newH : 50) + diff +"px";
                            contentNode.style.overflowY = "auto";
                            if(this.$node.ltProp('height') != "auto" && this.getData('ltPropSetContentHeight')){
                                contentNode.style.height = newH + "px";
                            }
                            // if(this.getData('first')){
                            //     contentNode.style.height = (oldHeight - ((modalHOff ? modalHOff.height : 0)+ (modalFOff ? modalFOff.height : 0))) +"px";
                            // }
                            // modalElem.style.width = this.$node.ltProp("width")?this.$node.ltProp("width"):"auto";
                            // this.actualModalDiv.style.maxWidth = newWidth > 0 ? (newWidth +"px"):("70%");
                            modalElem = null;
                            contentNode = null;
                            modalheader = null;
                            modalFooter = null;
                            if(!this.getData('initializedPosition')){
                                this.computeOffsetImpl();
                                this.setData('initializedPosition',true);
                            }
                            else if(this.getData('resizeCalled')){
                                this.computeOffsetImplOnResize();
                                this.setData('resizeCalled',false);
                            }
                        },this);
                        /*------------------------------ MUTATE ENDS --------------------------*/
                    },this);
                    /*------------------------------ MEASURE ENDS --------------------------*/
                }
                else{
                    this.childComp.querySelector(".modalWrapper").classList.remove("scrollable");
                    modalElem = null;
                    contentNode = null;
                    if(!this.getData('initializedPosition')){
                        this.computeOffsetImpl();
                        this.setData('initializedPosition',true);
                    }
                    else if(this.getData('resizeCalled')){
                        this.computeOffsetImplOnResize();
                        this.setData('resizeCalled',false);
                    }
                }

                if (!this.$node.ltProp("freeze")) {
                    this.childComp.querySelector(".modalWrapper").classList.add('noFreeze');
                    if(!this.renderSidewise){
                        this.actualModalDiv.style.position = "fixed";
                    }
                }
                // else{
                //     this.childComp.querySelector(".modalWrapper").style.position = "fixed";
                // }
            },this);
            /*------------------------------ MUTATE ENDS --------------------------*/
        },this);
        /*------------------------------ MEASURE ENDS --------------------------*/


    }

    callOnShow() {
        // if(this.getData('ltPropFreeze')){
        //     this.childComp.querySelector("lyte-modal-freeze").style.transitionDuration = this.getData('ltPropTransition').duration + "s";
        // }
        this.$node.classList.add('lyteModalOpened');
        var _this = this
        setTimeout(function(){
          var style = window.getComputedStyle(_this.actualModalDiv);
          var matrix = new window.WebKitCSSMatrix(style.transform);
          _this.setData('beforeDragPosition' , {
            xPos : matrix.m41,
            yPos : matrix.m42,
            scale : matrix.a
          })
          window._lyteUiUtils.dispatchEvent('lyteModalOpened' , _this.actualModalDiv)
        },(parseFloat(this.getData('ltPropTransition').duration)*1000+10))
        if(this.getMethods("onShow")){
            this.executeMethod("onShow",this);
        }
        if(this.addAriaValues){
            this.addAriaValues();
        }
    }

    callOnResize() {
        // this.updateScrollHandling();
        var dependentModalId = this.getData('ltPropDependentModalId');
        if(dependentModalId != '') {
            var dependentModalObj = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(dependentModalId)[0].component;
            dependentModalObj.updateScrollHandling();
        }
        // if(this.isResponsibleForSidewiseRender()){
        //     LytePopup.components[1].$node.component.updateScrollHandling();
        // }
        var style = window.getComputedStyle(this.actualModalDiv);
        var matrix = new window.WebKitCSSMatrix(style.transform);
        this.setData('beforeDragPosition' , {
          xPos : matrix.m41,
          yPos : matrix.m42,
          scale : matrix.a
        })
        if(this.getMethods("onResize")){
            this.executeMethod("onResize",this);
        }
    }

    enableTransform(val, pos, duration) {
        this.$node.ltProp('showCopy',true);
        var self = this;
        setTimeout(function(){
            if(pos == 'x'){
                self.actualModalDiv.style.transform = "translate("+val+"px,0px)";
                self.transform = {'x' : val, 'y' : 0};
            }
            if(pos == 'y'){
                self.actualModalDiv.style.transform = "translate(0px,"+val+"px)";
                self.transform = {'x' : 0, 'y' : val};
            }
        },(duration != undefined ? duration : undefined))

    }

    /**
     * The method is going to redo the left and top computation when the modal is opened and the window is resized
     *
     */
    computeOffsetImplOnResize() {
        /*------------------------------ MEASURE STARTS --------------------------*/
         _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.measure(function() {
            var modalEle = this.actualModalDiv,
                modalElePosition = modalEle.getBoundingClientRect(),
                parentStyle = window.getComputedStyle(modalEle.parentElement),
                parentTop = parseInt(parentStyle.top), //Takes the modalWrapper's top value and subtracts it from the modals top to nullify the parent's top
                parentLeft = parseInt(parentStyle.left),
                correctedTop = modalEle.offsetTop,
                w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0) - (this.getData('ltPropFreeze') ? parentLeft : 0),
                h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - (this.getData('ltPropFreeze') ? parentTop : 0),
                prevWinH = this.getData('prevWinH'),
                prevWinW = this.getData('prevWinW'),
                transform = this.transform /*new WebKitCSSMatrix(window.getComputedStyle(modalEle).transform)*/,
                newTop = null,
                newLeft = null,
                offsetObj = this.getData('ltPropOffset'),
                heightDiff = this.getData('prevModalHeight') - modalElePosition.height,
                widthDiff = this.getData('prevModalWidth') - modalElePosition.width,
                freezeLayer, wrapperDiv;
                this.calculateForSidewiseRender();
            if(this.renderSidewise){
                this.renderProps.windowWidth = w;
                w = this.getData('ltPropTransition').animation == 'slideFromRight' ? this.renderProps.left : (this.renderProps.windowWidth - this.renderProps.right);
                freezeLayer = this.childComp.querySelector('lyte-modal-freeze');
                wrapperDiv = this.actualModalDiv.parentElement;
            }
            if(this.getData('ltPropTransition').animation === "fadeIn" || this.getData('ltPropTransition').animation === "zoom"){
              prevWinH = modalElePosition.height
              prevWinW = modalElePosition.width
                if(w < prevWinW){
                    if((offsetObj.left && offsetObj.left == "center") || (offsetObj.right && offsetObj.right == "center")){
                        newLeft = ((prevWinW - w) / 2);
                    }
                    else if(offsetObj.right){
                        newLeft = modalElePosition.left - (prevWinW - w);
                    }
                    else if(offsetObj.left){
                        newLeft = modalElePosition.left;
                    }
                }
                if(w > prevWinW){
                    if((offsetObj.left && offsetObj.left == "center") || (offsetObj.right && offsetObj.right == "center")){
                        newLeft = ((w - prevWinW) / 2);
                    }
                    else if(offsetObj.right){
                        newLeft = modalElePosition.left + (w - prevWinW);
                    }
                    else if(offsetObj.left){
                        newLeft = modalElePosition.left;
                    }
                }
                if(h < prevWinH){
                    if((offsetObj.top && offsetObj.top == "center") || (offsetObj.bottom && offsetObj.bottom == "center")){
                        newTop = (h - modalElePosition.height)/2 /*correctedTop - ((prevWinH - h) / 2)*/;
                    }
                    else if(offsetObj.bottom){
                        newTop = correctedTop - (prevWinH - h);
                    }
                    else if(offsetObj.top){
                        newTop = correctedTop;
                    }
                }
                if(h > prevWinH){
                    if((offsetObj.top && offsetObj.top == "center") || (offsetObj.bottom && offsetObj.bottom == "center")){
                        newTop = (h - modalElePosition.height)/2 /*correctedTop + ((h - prevWinH) / 2)*/;
                    }
                    else if(offsetObj.bottom && offsetObj.bottom != "center"){
                        newTop = correctedTop + (h - prevWinH);
                    }
                    else if(offsetObj.top && offsetObj.top != "center"){
                        newTop = correctedTop;
                    }
                }
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function() {
                    if(newTop){
                        modalEle.style.top = newTop + "px";
                    }
                    if(newLeft){
                        modalEle.style.left = newLeft + "px";
                    }
                    this.callOnResize();
                },this);
            }
            else{
                if(w < prevWinW){
                    if((offsetObj.left && offsetObj.left == "center") || (offsetObj.right && offsetObj.right == "center")){
                        newLeft = transform.x - ((prevWinW - w) / 2) + (widthDiff / 2);
                    }
                    else if(offsetObj.right){
                        newLeft = transform.x - (prevWinW - w) + widthDiff;
                    }
                    else if(offsetObj.left){
                        newLeft = transform.x;
                    }
                    this.transform.x = newLeft;
                }
                if(w > prevWinW){
                    if((offsetObj.left && offsetObj.left == "center") || (offsetObj.right && offsetObj.right == "center")){
                        newLeft = transform.x + ((w - prevWinW) / 2) + (widthDiff / 2);
                    }
                    else if(offsetObj.right){
                        newLeft = transform.x + (w - prevWinW) + widthDiff;
                    }
                    else if(offsetObj.left){
                        newLeft = transform.x;
                    }
                    this.transform.x = newLeft;
                }
                if(h < prevWinH){
                    if((offsetObj.top && offsetObj.top == "center") || (offsetObj.bottom && offsetObj.bottom == "center")){
                        newTop = transform.y - ((prevWinH - h) / 2) + (heightDiff / 2);
                    }
                    else if(offsetObj.bottom){
                        newTop = transform.y - (modalElePosition.bottom - h + parseInt(offsetObj.bottom)) /*(prevWinH - h)*/;
                    }
                    else if(offsetObj.top){
                        newTop = transform.y;
                    }
                    this.transform.y = newTop;
                }
                if(h > prevWinH){
                    if((offsetObj.top && offsetObj.top == "center") || (offsetObj.bottom && offsetObj.bottom == "center")){
                        newTop = transform.y + ((h - prevWinH) / 2) + (heightDiff / 2);
                    }
                    else if(offsetObj.bottom && offsetObj.bottom != "center"){
                        newTop = transform.y + (h - modalElePosition.bottom - parseInt(offsetObj.bottom))/*(h - prevWinH)*/;
                    }
                    else if(offsetObj.top && offsetObj.top != "center"){
                        newTop = transform.y;
                    }
                    // console.log("prev top", this.transform.y);
                    // console.log("new top", newTop);
                    this.transform.y = newTop;
                }
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function() {
                    modalEle.style.transitionDuration = "0s";
                    if(this.getData('ltPropTransition').animation === "slideFromTop" || this.getData('ltPropTransition').animation === "slideFromBottom"){
                        if(w < prevWinW){
                            if((offsetObj.left && offsetObj.left == "center") || (offsetObj.right && offsetObj.right == "center")){
                                modalEle.style.left = modalElePosition.left - ((prevWinW - w) / 2) + (widthDiff/2) + "px";
                            }
                            else if(offsetObj.right){
                                modalEle.style.left = modalElePosition.left - (prevWinW - w) + widthDiff + "px";
                            }
                            else if(offsetObj.left){
                                modalEle.style.left = modalElePosition.left + "px";
                            }
                            // modalEle.style.left = modalElePosition.left - ((prevWinW - w)/2) + "px";
                        }
                        if(w > prevWinW){
                            if((offsetObj.left && offsetObj.left == "center") || (offsetObj.right && offsetObj.right == "center")){
                              modalEle.style.left = modalElePosition.left + ((w - prevWinW) / 2) + (widthDiff/2) + "px";
                            }
                            else if(offsetObj.right){
                                modalEle.style.left = modalElePosition.left + (w - prevWinW) + widthDiff + "px";
                            }
                            else if(offsetObj.left){
                                modalEle.style.left = modalElePosition.left + "px";
                            }
                            // modalEle.style.left = modalElePosition.left + ((w - prevWinW)/2) + "px";
                        }
                        modalEle.style.transform = "translate(0px,"+this.transform.y+"px)";
                    }
                    else if(this.getData('ltPropTransition').animation === "slideFromLeft" || this.getData('ltPropTransition').animation === "slideFromRight"){
                        if(h < prevWinH){
                            if((offsetObj.top && offsetObj.top == "center") || (offsetObj.bottom && offsetObj.bottom == "center")){
                                modalEle.style.top = correctedTop - ((prevWinH - h) / 2) + (heightDiff/2) + "px";
                            }
                            else if(offsetObj.bottom){
                                modalEle.style.top = correctedTop - (prevWinH - h) + "px";
                            }
                            else if(offsetObj.top){
                                modalEle.style.top = correctedTop + "px";
                            }
                            // modalEle.style.top = modalElePosition.top - ((prevWinH - h)/2) + "px";
                        }
                        if(h > prevWinH){
                            if((offsetObj.top && offsetObj.top == "center") || (offsetObj.bottom && offsetObj.bottom == "center")){
                                modalEle.style.top = correctedTop + ((h - prevWinH) / 2) + (heightDiff/2) + "px";
                            }
                            else if(offsetObj.bottom && offsetObj.bottom != "center"){
                                modalEle.style.top = correctedTop + (h - prevWinH) + "px";
                            }
                            else if(offsetObj.top && offsetObj.top != "center"){
                                modalEle.style.top = correctedTop + "px";
                            }
                            // modalEle.style.top = modalElePosition.top + ((h - prevWinH)/2) + "px";
                        }
                        modalEle.style.transform = "translate("+this.transform.x+"px,0px)";
                        if(this.renderSidewise){
                            if(this.getData('ltPropTransition').animation == 'slideFromRight'){
                                var rightValue = this.renderProps.windowWidth - this.renderProps.left;
                                if(freezeLayer){
                                    freezeLayer.style.right = rightValue + "px";
                                }
                                if(wrapperDiv){
                                    wrapperDiv.style.right = rightValue - 5 + "px";
                                }
                            }
                            if(this.getData('ltPropTransition').animation == 'slideFromLeft'){
                                if(freezeLayer){
                                    freezeLayer.style.left = this.renderProps.right + "px";
                                }
                                if(wrapperDiv){
                                    wrapperDiv.style.left = (this.renderProps.right + 1) + "px";
                                }
                            }
                        }
                    }
                    this.callOnResize();
                    // modalEle.style.transitionDuration = this.$node.ltProp("transition").duration+"s";
                },this);
            }
            this.setData('prevModalHeight',modalElePosition.height);
            this.setData('prevModalWidth',modalElePosition.width);
            this.setData('prevWinH',h);
            this.setData('prevWinW',w);
        },this);
        /*------------------------------ MEASURE ENDS --------------------------*/
        // modalEle = null;
    }

    isResponsibleForSidewiseRender() {
        var components = window.LytePopup.components;
        if(components.length > 1 && components[components.length - 2] === this && components[components.length - 1].renderSidewise){
            return true;
        }
        return false;
    }

    /**
     * The method is going to calculate the left and top value of the modal and perform the animation
     *
     */
    computeOffsetImpl(arg, triggeredFromTransChange) {
        var lyteSelf = this;
        //sets the left and top of the modal based on user provided values
        var _this = this.nodeName && this.nodeName === "LYTE-MODAL" ? this.component : this;
        /*------------------------------ MEASURE STARTS --------------------------*/
        _this.fastdomfn6 = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.measure(function() {
           delete _this.fastdomfn6;
           if(!_this.actualModalDiv){
               return;
           }
           _this.calculateForSidewiseRender();
           var modalEle = _this.actualModalDiv;
           var freezeLayer, wrapperDiv;
           var offsetObj = lyteSelf.$addon .deepCopyObject(_this.$node.ltProp('offset'));
           var modalRect = modalEle.getBoundingClientRect();
           var modalElePosition = {top: modalRect.top,
                                   right: modalRect.right,
                                   bottom: modalRect.bottom,
                                   left: modalRect.left,
                                   width: modalEle.offsetWidth,
                                   height: modalEle.offsetHeight
                               };
           var parentLeft = 0, parentTop = 0;
           if(_this.getData('ltPropFreeze')){
               var parentStyle = window.getComputedStyle(modalEle.parentElement);
               parentLeft = parseInt(parentStyle.left);
               parentTop = parseInt(parentStyle.top);
           }
           var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0) - parentLeft;
           if(_this.renderSidewise){
               _this.renderProps.windowWidth = w;
               w = _this.getData('ltPropTransition').animation == 'slideFromRight' ? _this.renderProps.left : (_this.renderProps.windowWidth - _this.renderProps.right);
               freezeLayer = _this.childComp.querySelector('lyte-modal-freeze');
               wrapperDiv = _this.actualModalDiv.parentElement;
           }
           var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) - parentTop;
            // $L.fastdom.mutate(() => {
               modalEle.style.transitionDuration = (arg != undefined ? arg : _this.$node.ltProp("transition").duration)+"s";
           // },this);
           _this.setData('prevWinH',h);
           _this.setData('prevWinW',w);
           _this.setData('prevModalHeight',modalElePosition.height);
           _this.setData('prevModalWidth',modalElePosition.width);
           if(offsetObj){
               if(offsetObj.left === "center" || offsetObj.right === "center"){
                   var offLeft = (w - modalElePosition.width)/2;
                   if(offLeft < 0){
                       offLeft = 20;
                   }
                   offsetObj.left = offLeft;
               }
               if(offsetObj.top === "center" || offsetObj.bottom === "center"){
                   var offTop = (h - modalElePosition.height)/2;
                   if(offTop < 0){
                       offTop = 20;
                   }
                   offsetObj.top = offTop;
               }
               if(offsetObj.right && offsetObj.right !== "center"){
                   if(offsetObj.right.indexOf("%") > -1){
                       offsetObj.left = w-(modalElePosition.width+(w/parseFloat(offsetObj.right)));
                   }
                   else{
                       offsetObj.left = w-(modalElePosition.width+parseFloat(offsetObj.right));
                   }
               }
               if(offsetObj.bottom && offsetObj.bottom !== "center"){
                   if(offsetObj.bottom.indexOf("%") > -1){
                       offsetObj.top = h-(modalElePosition.height+(h/parseFloat(offsetObj.bottom)));
                   }
                   else{
                       offsetObj.top = h-(modalElePosition.height+parseFloat(offsetObj.bottom));
                   }
               }
               if(offsetObj.left === "" || offsetObj.left == undefined){
                   _this.data.ltPropOffset.left = "center";
                   offsetObj.left = ((w - modalElePosition.width)/2);
               }
               if(offsetObj.top === "" || offsetObj.top == undefined){
                   _this.data.ltPropOffset.top = "center";
                   offsetObj.top = ((h - modalElePosition.height)/2);
               }
               if(_this.getData('ltPropTransition').originElement){
                   var ele = document.querySelector(_this.getData('ltPropTransition').originElement);
                   if(!ele){
                       console.error("The originElement provided does not exist. Kindly Check!");
                   }
                   else{
                       var eleOffset = ele.getBoundingClientRect();
                       offsetObj.originElementPos = {xDiff : (eleOffset.left + (eleOffset.width/2)) - (parseFloat(offsetObj.left) + (modalElePosition.width/2)),
                                                     yDiff : (eleOffset.top + (eleOffset.height/2)) - (parseFloat(offsetObj.top) + (modalElePosition.height/2)) };
                   }
               }
               /*------------------------------ MUTATE STARTS --------------------------*/
                _this.fastdomfn7 = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function() {
                   delete _this.fastdomfn7;
                   if(_this.getData('first')){
                       window.LytePopup.bindTransitionEnd(_this.actualModalDiv);
                   }
                   if(_this.getData('ltPropTransition').animation == "slideFromTop"){
                       modalEle.style.left = parseFloat(offsetObj.left) + "px";
                       modalEle.style.top = (-1 * modalElePosition.height) + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "translate(0px,"+(parseInt(offsetObj.top)+modalElePosition.height)+"px)";
                           _this.transform = {'x' : 0, 'y' : (parseInt(offsetObj.top)+modalElePosition.height)};
                           return;
                       }
                       _this.enableTransform(parseInt(offsetObj.top)+modalElePosition.height,"y",arg);
                   }
                   else if(_this.getData('ltPropTransition').animation == "slideFromBottom"){
                       modalEle.style.left = parseFloat(offsetObj.left) + "px";
                       modalEle.style.top = h+1 + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "translate(0px,"+(-1 * (h - parseInt(offsetObj.top) + 1))+"px)";
                           _this.transform = {'x': 0, 'y': (-1 * (h - parseInt(offsetObj.top) + 1))};
                           return;
                       }
                       _this.enableTransform(-1 * (h - parseInt(offsetObj.top) + 1),"y",arg);
                   }
                   else if(_this.getData('ltPropTransition').animation == "slideFromLeft"){
                       if(_this.renderSidewise){
                           if(freezeLayer){
                               freezeLayer.style.left = _this.renderProps.right + "px";
                           }
                           if(wrapperDiv){
                               wrapperDiv.style.left = _this.renderProps.right + "px";
                           }
                       }
                       modalEle.style.top = parseFloat(offsetObj.top) + "px";
                       modalEle.style.left = (-1 * modalElePosition.width) + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "translate("+(parseInt(offsetObj.left)+modalElePosition.width)+"px,0px)";
                           _this.transform = {'x' : (parseInt(offsetObj.left)+modalElePosition.width), 'y' : 0};
                           return;
                       }
                       _this.enableTransform(parseInt(offsetObj.left)+modalElePosition.width,'x',arg);
                   }
                   else if(_this.getData('ltPropTransition').animation == "slideFromRight"){
                       if(_this.renderSidewise){
                           var rightValue = _this.renderProps.windowWidth - _this.renderProps.left;
                           if(freezeLayer){
                               freezeLayer.style.right = rightValue + "px";
                           }
                           if(wrapperDiv){
                               wrapperDiv.style.right = rightValue - 5 + "px";
                           }
                       }
                       modalEle.style.top = parseFloat(offsetObj.top) + "px";
                       modalEle.style.left = w + 1 + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "translate("+(-1 * (w - parseInt(offsetObj.left) + 1))+"px,0px)";
                           _this.transform = {'x' : (-1 * (w - parseInt(offsetObj.left) + 1)), 'y' : 0};
                           return;
                       }
                       _this.enableTransform(-1 * (w - parseInt(offsetObj.left) + 1),'x',arg);
                   }
                   else if(_this.getData('ltPropTransition').animation == "fadeIn"){
                       modalEle.style.left = parseFloat(offsetObj.left) + "px";
                       modalEle.style.top = parseFloat(offsetObj.top) + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "";
                           return;
                       }
                       _this.$node.ltProp('showCopy',true);
                       // setTimeout(function(){
                           modalEle.style.opacity = 1;
                       // },200);
                   }
                   else if(_this.getData('ltPropTransition').animation == "zoom"){
                       _this.$node.ltProp('showCopy',true);
                       var transform = "scale(0)";
                       if(offsetObj.originElementPos){
                           transform = "translateX( "+ offsetObj.originElementPos.xDiff + "px) translateY( "+ offsetObj.originElementPos.yDiff + "px) scale(0)";
                       }
                       modalEle.style.left = parseFloat(offsetObj.left) + "px";
                       modalEle.style.top = parseFloat(offsetObj.top) + "px";
                       modalEle.style.transition = "none";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = offsetObj.originElementPos ? 'translateX(0) translateY(0) scale(1)' : 'scale(1)';
                           setTimeout(function(){
                               modalEle.style.transition = "";
                           },16)
                           return;
                       }
                       modalEle.style.transform = transform;
                       modalEle.style.opacity = 1;
                       setTimeout(function(){
                           modalEle.style.transition = "";
                           modalEle.style.transitionDuration = (arg != undefined ? arg : _this.$node.ltProp("transition").duration)+"s";
                           if(offsetObj.originElementPos){
                               modalEle.style.transform = 'translateX(0) translateY(0) scale(1)';
                           }
                           else{
                               modalEle.style.transform = 'scale(1)';
                           }
                       },50);
                   }

                   if(_this.$node.ltProp("freeze")){
                       document.body.classList.add('bodyWrapper');
                       // LytePopup.bodywrapperCount += 1;
                   }
                   if(_this.getData('first')){
                       // LytePopup.bindTransitionEnd(_this.actualModalDiv);
                       _this.callOnShow();
                       _this.setData("first",false);
                   }
               },_this);
               /*------------------------------ MUTATE ENDS --------------------------*/
           }
           else{
               _this.setData('ltPropOffset',{left:"center", top:"center"});
               // _this.data.ltPropOffset.left = "center";
               // _this.data.ltPropOffset.top = "center";
               offsetObj.left = ((w - modalElePosition.width)/2);
               offsetObj.top = ((h - modalElePosition.height)/2);
               if(!_this.$node.ltProp("scrollable")){
                   if(offsetObj.left < 0){
                       offsetObj.left = 20;
                   }
                   if(offsetObj.top < 0){
                       offsetObj.top = 20;
                   }
               }
               if(_this.getData('ltPropTransition').originElement){
                   var ele = document.querySelector(_this.getData('ltPropTransition').originElement);
                   if(!ele){
                       console.error("The originElement provided does not exist. Kindly Check!");
                   }
                   else{
                       var eleOffset = ele.getBoundingClientRect();
                       offsetObj.originElementPos = {xDiff : (eleOffset.left + (eleOffset.width/2)) - (offsetObj.left + (modalElePosition.width/2)),
                                                     yDiff : (eleOffset.top + (eleOffset.height/2)) - (offsetObj.top + (modalElePosition.height/2)) };
                   }
               }
               /*------------------------------ MUTATE STARTS --------------------------*/
               _this.fastdomfn8 = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function() {
                   delete _this.fastdomfn8;
                   if(_this.getData('first')){
                       window.LytePopup.bindTransitionEnd(_this.actualModalDiv);
                   }
                   if(_this.getData('ltPropTransition').animation == "slideFromTop"){
                       modalEle.style.left = parseFloat(offsetObj.left) + "px";
                       modalEle.style.top = (-1 * modalElePosition.height) + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "translate(0px,"+(parseInt(offsetObj.top)+modalElePosition.height)+"px)";
                           _this.transform = {'x' : 0, 'y' : (parseInt(offsetObj.top)+modalElePosition.height)};
                           return;
                       }
                       _this.enableTransform(parseInt(offsetObj.top)+modalElePosition.height,"y",arg);
                   }
                   else if(_this.getData('ltPropTransition').animation == "slideFromBottom"){
                       modalEle.style.left = parseFloat(offsetObj.left) + "px";
                       modalEle.style.top = h+1 + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "translate(0px,"+(-1 * (h - parseInt(offsetObj.top) + 1))+"px)";
                           _this.transform = {'x': 0, 'y': (-1 * (h - parseInt(offsetObj.top) + 1))};
                           return;
                       }
                       _this.enableTransform(-1 * (h - parseInt(offsetObj.top) + 1),"y",arg);
                   }
                   else if(_this.getData('ltPropTransition').animation == "slideFromLeft"){
                       if(_this.renderSidewise){
                           if(freezeLayer){
                               freezeLayer.style.left = _this.renderProps.right + "px";
                           }
                           if(wrapperDiv){
                               wrapperDiv.style.left = _this.renderProps.right + "px";
                           }
                       }
                       modalEle.style.top = parseFloat(offsetObj.top) + "px";
                       modalEle.style.left = (-1 * modalElePosition.width) + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "translate("+(parseInt(offsetObj.left)+modalElePosition.width)+"px,0px)";
                           _this.transform = {'x' : (parseInt(offsetObj.left)+modalElePosition.width), 'y' : 0};
                           return;
                       }
                       _this.enableTransform(parseInt(offsetObj.left)+modalElePosition.width,'x',arg);
                   }
                   else if(_this.getData('ltPropTransition').animation == "slideFromRight"){
                       if(_this.renderSidewise){
                           var rightValue = _this.renderProps.windowWidth - _this.renderProps.left;
                           if(freezeLayer){
                               freezeLayer.style.right = rightValue + "px";
                           }
                           if(wrapperDiv){
                               wrapperDiv.style.right = rightValue - 5 + "px";
                           }
                       }
                       modalEle.style.top = parseFloat(offsetObj.top) + "px";
                       modalEle.style.left = w + 1 + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "translate("+(-1 * (w - parseInt(offsetObj.left) + 1))+"px,0px)";
                           _this.transform = {'x' : (-1 * (w - parseInt(offsetObj.left) + 1)), 'y' : 0};
                           return;
                       }
                       _this.enableTransform(-1 * (w - parseInt(offsetObj.left) + 1),'x',arg);
                   }
                   else if(_this.getData('ltPropTransition').animation == "fadeIn"){
                       modalEle.style.left = parseFloat(offsetObj.left) + "px";
                       modalEle.style.top = parseFloat(offsetObj.top) + "px";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = "";
                           return;
                       }
                       _this.$node.ltProp('showCopy',true);
                       // setTimeout(function(){
                           modalEle.style.opacity = 1;
                       // },200);
                   }
                   else if(_this.getData('ltPropTransition').animation == "zoom"){
                       _this.$node.ltProp('showCopy',true);
                       var transform = "scale(0)";
                       if(offsetObj.originElementPos){
                           transform = "translateX( "+ offsetObj.originElementPos.xDiff + "px) translateY( "+ offsetObj.originElementPos.yDiff + "px) scale(0)";
                       }
                       modalEle.style.left = parseFloat(offsetObj.left) + "px";
                       modalEle.style.top = parseFloat(offsetObj.top) + "px";
                       modalEle.style.transition = "none";
                       if(triggeredFromTransChange){
                           modalEle.style.transform = offsetObj.originElementPos ? 'translateX(0) translateY(0) scale(1)' : 'scale(1)';
                           setTimeout(function(){
                               modalEle.style.transition = "";
                           },16)
                           return;
                       }
                       modalEle.style.transform = transform;
                       modalEle.style.opacity = 1;
                       setTimeout(function(){
                           modalEle.style.transition = "";
                           modalEle.style.transitionDuration = (arg != undefined ? arg : _this.$node.ltProp("transition").duration)+"s";
                           if(offsetObj.originElementPos){
                               modalEle.style.transform = 'translateX(0) translateY(0) scale(1)';
                           }
                           else{
                               modalEle.style.transform = 'scale(1)';
                           }
                       },50);
                   }
                   if(_this.$node.ltProp("freeze")){
                       document.body.classList.add('bodyWrapper');
                       // LytePopup.bodywrapperCount += 1;
                   }
                   if(_this.getData('first')){
                       _this.callOnShow();
                       _this.setData("first",false);
                   }
               },_this);
               /*------------------------------ MUTATE ENDS --------------------------*/
           }
       },_this);
        /*------------------------------ MEASURE ENDS --------------------------*/
        // modalEle = null;
    }

    /**
     * The method is going to check if sidewise render will be done and assigns the values that will be used for sidewise rendering of the modal
     *
     */
    calculateForSidewiseRender() {
        if(window.LytePopup.components.length > 1){
            var prevModal;
            // if(this.getData('modalCreationOrder') > 0) {
            // // if(LytePopup.components[LytePopup.components.length - 2].$node.tagName === "LYTE-MODAL"){
                // prevModal = LytePopup.components[this.getData('modalCreationOrder')-1];
            // }
            var parentModalId = this.getData('ltPropParentModalId');
            if( parentModalId != '') {
                prevModal = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(parentModalId)[0].component;
            }
            else if(parentModalId == '' && this.getData('ltPropDependentModalId') == '') {
                var curModalIndexInArray = window.LytePopup.components.indexOf(this);
				if((curModalIndexInArray > 0) && (window.LytePopup.components[curModalIndexInArray - 1].$node.tagName === "LYTE-MODAL")){
					prevModal = window.LytePopup.components[curModalIndexInArray - 1];
				}
            }
            if(!this.getData('ltPropOverlapModal') && prevModal && prevModal.getData('ltPropAllowMultiple') && ["slideFromLeft","slideFromRight"].indexOf(this.getData('ltPropTransition').animation) != -1){
                this.renderSidewise = true;
                var prevModalOffset = prevModal.actualModalDiv.getBoundingClientRect();
                this.renderProps = {
                    prevModal : prevModal,
                    left : Math.round(prevModalOffset.left),
                    right : Math.round(prevModalOffset.right),
                    width : Math.round(prevModalOffset.width)
                };
            }
        }
    }

    closeModal() {
        var freezeLayer = this.childComp.querySelector('lyte-modal-freeze');
        if(this.renderSidewise){
            if(this.getData('ltPropTransition').animation == "slideFromRight"){
                if(freezeLayer){
                    freezeLayer.style.right = "";
                }
                this.actualModalDiv.parentElement.style.right = "";
            }
            if(this.getData('ltPropTransition').animation == "slideFromLeft"){
                if(freezeLayer){
                    freezeLayer.style.left = "";
                }
                this.actualModalDiv.parentElement.style.left = "";
            }
            delete this.renderSidewise;
            delete this.renderProps;
        }
        if(window._lyteUiUtils.getRTL()){
            if(!this.getData('ltPropIgnoreInlineDirection')){
              if(this.getData('ltPropTransition').animation == "slideFromLeft"){
                  this.getData('ltPropTransition').animation = "slideFromRight";
              }
              else if(this.getData('ltPropTransition').animation == "slideFromRight"){
                  this.getData('ltPropTransition').animation = "slideFromLeft";
              }
            var offset = this.getData('ltPropOffset'),
                newOffset = {};
            for(window.key in offset){
                if(window.key == "left" && offset[window.key] != "center"){
                    newOffset.right = offset[window.key];
                }
                else if(window.key == "right"){
                    newOffset.left = offset[window.key];
                }
                else{
                    newOffset[window.key] = offset[window.key];
                }
            }
            this.setData('ltPropOffset',newOffset);
          }
        }
        if(this.getData('ltPropTransition').animation == "zoom"){
            this.actualModalDiv.style.opacity = "0";
            this.actualModalDiv.style.transform = "";
        }
        if(!this.$node.ltProp('freeze')){
            this.childComp.querySelector(".modalWrapper").classList.remove('noFreeze');
        }
        this.$node.ltProp({"showCopy":false,"show":false});
        // LytePopup.closePopup(this);

        if(!this.$node.ltProp('freeze')){
            this.actualModalDiv.style.position = "";
        }
        this.$node.classList.remove('lyteModalOpened');
        if(this.actualModalDiv){
            this.actualModalDiv.style.transform = "";
        }

		var transitionDuration = this.getData('ltPropTransition').duration;
		var closeDuration = this.getData('ltPropCloseDuration');
		if(closeDuration) {
			transitionDuration = (closeDuration / 1000);
		}
		var _this = this;
		setTimeout(function() {
			var modalElem = _this.$node;
            if(modalElem){
                modalElem.ltProp({"showCopy":false, "show": false});
                modalElem.classList.remove('lyteModalOpened');
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(_this.childComp).addClass('lyteModalHidden');
                if( _this.getData('ltPropTransition').animation == "zoom"){
                    _this.actualModalDiv.style.opacity = "0";
                    _this.actualModalDiv.style.transform = "";
                }
            }
            if(_this.getMethods("onClose")){
                _this.executeMethod("onClose",_this);
            }
		}, (transitionDuration * 1000));

        window._lyteUiUtils.dispatchEvent('lyteModalClosed' , this.actualModalDiv)
        if(window._lyteUiUtils.popupStack.modalStack.length < 1 ){
            document.body.classList.remove('bodyWrapper');
            document.body.classList.remove('lyteBodyWrapper');
        }
        this.setData('ltPropShowWormhole' , false);
        // if(this.getMethods("onClose")){
        //     this.executeMethod("onClose",this);
        // }
        window.LytePopup.checkAndRemoveWrapper();
    }

    onBeforeCloseHandling(event) {
        var result = true;
        var w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
        var h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        if(this.actualModalDiv){
            window._lyteUiUtils.dispatchEvent('lyteModalBeforeClose' , this.actualModalDiv)
        }
        if(this.getMethods("onBeforeClose")){
            result = this.executeMethod("onBeforeClose",event,this);
        }
        if(result === undefined || result){
            if(this.actualModalDiv && this.childComp){
                if(this.getData('ltPropFreeze') && this.addedFreezeDetails){
                    window.LytePopup.hideOrShowFreeze("close",this);
                    delete this.addedFreezeDetails;
                }
                var animDur = parseFloat(this.$node.ltProp('transition').duration) * 1000;
                var self = this;
                // console.log("duration",animDur);
                // var t1 = performance.now();
                this.timeOutId = setTimeout(function(){
                    delete self.timeOutId;
                    // var t2 = performance.now();
                    // console.log(t2 -t1);
                    self.closeModal();
                },animDur);
                var modalEle = this.actualModalDiv;
                if(this.getData('ltPropCloseDuration')){
                    modalEle.style.transitionDuration = (this.getData('ltPropCloseDuration') / 1000)+"s";
                }
                else{
                    modalEle.style.transitionDuration = (animDur / 1000)+"s";
                }
                // console.log("transitionDuration", modalEle.style.transitionDuration);
                var modalElemOffset;
                var transform = "scale(0)", transformVal;
                /*------------------------------ MEASURE STARTS --------------------------*/
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.measure(function(){
                    modalElemOffset = modalEle.getBoundingClientRect();
                    if(this.getData('ltPropTransition').animation == "zoom" && this.getData('ltPropTransition').originElement){
                        var ele = document.querySelector(this.getData('ltPropTransition').originElement);
                        if(!ele){
                            Console.error("The originElement provided does not exist. Kindly Check!");
                        }
                        else{
                            var eleOffset = ele.getBoundingClientRect();
                            var modalElePosition = {top: modalElemOffset.top,
                                                    right: modalElemOffset.right,
                                                    bottom: modalElemOffset.bottom,
                                                    left: modalElemOffset.left,
                                                    width: modalEle.offsetWidth,
                                                    height: modalEle.offsetHeight
                                                };
                            var originElementPos = {xDiff : (eleOffset.left + (eleOffset.width/2)) - (modalElePosition.left + (modalElePosition.width/2)),
                                                          yDiff : (eleOffset.top + (eleOffset.height/2)) - (modalElePosition.top + (modalElePosition.height/2)) };
                            transform = "translateX( "+ originElementPos.xDiff + "px) translateY( "+ originElementPos.yDiff + "px) scale(0)"
                        }
                    }
                },this);
                /*------------------------------ MEASURE ENDS --------------------------*/
                /*------------------------------ MUTATE STARTS --------------------------*/
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function(){
                    if(this.getData('ltPropTransition').animation == "slideFromTop"){
                        // modalEle.style.transform = "translateY(-100%)";
                        transformVal = -(Math.ceil(modalElemOffset.height) + parseInt(modalEle.style.top) + 10) + "px";
                        modalEle.style.transform = "translateY("+transformVal+")";
                    }
                    else if(this.getData('ltPropTransition').animation == "slideFromBottom"){
                        // modalEle.style.transform = "translateY(100%)";
                        transformVal = (h - parseInt(modalEle.style.top) + 10) + "px";
                        modalEle.style.transform = "translateY("+transformVal+")";
                    }
                    else if(this.getData('ltPropTransition').animation == "slideFromLeft"){
                        // modalEle.style.transform = "translateX(-100%)";
                        transformVal = -(Math.ceil(modalElemOffset.width) + parseInt(modalEle.style.left) + 10) + "px";
                        modalEle.style.transform = "translateX("+transformVal+")";
                    }
                    else if(this.getData('ltPropTransition').animation == "slideFromRight"){
                        // modalEle.style.transform = "translateX(100%)";
                        transformVal = (((this.renderProps && this.renderProps.left) || w ) - parseInt(modalEle.style.left) + 10) + "px";
                        modalEle.style.transform = "translateX("+transformVal+")";
                    }
                    else if(this.getData('ltPropTransition').animation == "fadeIn"){
                        modalEle.style.opacity = 0;
                    }
                    else if(this.getData('ltPropTransition').animation == "zoom"){
                        modalEle.style.transform = transform;
                    }
                    delete this.transform;
                    if(!(this.$node.classList.contains('lyteModalOpened'))){
                        modalEle.style.transform = "";
                    }
                },this);
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function(){
                    modalEle = null;
                });
                /*------------------------------ MUTATE ENDS --------------------------*/

                modalEle.classList.remove('lyteModalFromTop','lyteModalFromBottom','lyteModalFromLeft','lyteModalFromRight','lyteModalFadeIn','lyteZoom');
                if(this.$node.ltProp('freeze') && this.childComp.querySelector("lyte-modal-freeze")){
                    var freezeLayer = this.childComp.querySelector("lyte-modal-freeze");
                    setTimeout(function(){
                        freezeLayer.style.opacity = 0;
                        freezeLayer.style.visibility = "";
                    }.bind(this), 300);
                }
                window.LytePopup.closePopup(this);
                // LytePopup.bindTransitionEnd(this.actualModalDiv);
                this.setData("first",true);
                this.setData('initializedPosition',false);
                this.setData('calculateHW', false);
            }
            this.$node.alignModal = null;
            this.$node.resetPosition = null;
            this.$node.alignLyteModal = null;
            this.$node.calculateOffset = null;
            this.$node.reflectTransitionChange = null;
        }
        else{
            this.setData('returnedFalse',true);
            this.$node.ltProp('show',true);
        }
    }

    onBeforeShowHandling() {
        var result = true;
        if(this.getMethods("onBeforeShow")){
            result = this.executeMethod("onBeforeShow",this) ;
        }
        // if(!_lyteUiUtils.modalCreationOrder){
        //   _lyteUiUtils.modalCreationOrder = 0
        // }
        // _lyteUiUtils.modalCreationOrder += 1
        // this.setData('modalCreationOrder' , _lyteUiUtils.modalCreationOrder-1);
        if(result === undefined || result){
            this.setData('checkAria', this.getData('checkAria')+1);
            this.addDragHandler();
            this.updateScrollHandling();

            var modalEle = this.actualModalDiv;
            var val = "";
            modalEle.style.transitionDuration = this.$node.ltProp("transition").duration+"s";
            var classVal = "lyteModalFrom";
            var modalStyle = this.actualModalDiv.style;
            var modalElemOffset = this.actualModalDiv.getBoundingClientRect();
            var windowWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);

            switch(this.$node.ltProp("transition").animation){
                case "slideFromTop":
                    classVal += "Top";
                    break;
                case "slideFromBottom":
                    classVal += "Bottom";
                    break;
                case "slideFromLeft":
                    classVal += "Left";
                    break;
                case "slideFromRight":
                    classVal += "Right";
                    break;
                case "fadeIn":
                    classVal = "lyteModalFadeIn";
                    break;
                case "zoom":
                    classVal = "lyteZoom";
                    break;
            }
            /*------------------------------ MUTATE STARTS --------------------------*/
            this.fastdomfn1 = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default().fastdom.mutate(function(){
                delete this.fastdomfn1;
                this.actualModalDiv.classList.add(classVal);
                this.actualModalDiv.style.opacity = "";
                modalEle = null;
            },this);
            /*------------------------------ MUTATE ENDS --------------------------*/
            window.LytePopup.addPopup(this);
            this.calculateForSidewiseRender();
            if(this.$node.ltProp('freeze')){
                var freezeLayer = this.childComp.querySelector("lyte-modal-freeze");
                if(this.renderSidewise){
                    if(this.getData('ltPropTransition').animation == 'slideFromRight'){
                        freezeLayer.style.right = (windowWidth - this.renderProps.left) + "px";
                    }
                    if(this.getData('ltPropTransition').animation == 'slideFromLeft'){
                        freezeLayer.style.left = this.renderProps.right + "px";
                    }

                }
                var freezeStyle = freezeLayer.style;
                // freezeStyle.opacity = this.getData('ltPropDimmer').opacity;
                if(this.getData('ltPropDimmer') && this.getData('ltPropDimmer').color){
                    freezeStyle.background = this.getData('ltPropDimmer').color;
                }
                if(!this.addedFreezeDetails){
                    freezeStyle.opacity = this.getData('ltPropDimmer') && this.getData('ltPropDimmer').opacity ? this.getData('ltPropDimmer').opacity : "";
                }
            }
            this.$node.alignModal = this.computeOffsetImpl.bind(this, 0, true)
            this.$node.resetPosition = function(){
              window.LytePopup.x = this.getData('beforeDragPosition').xPos
              LytePopup.y = this.getData('beforeDragPosition').yPos
              LytePopup.xPos = this.getData('beforeDragPosition').xPos
              LytePopup.yPos = this.getData('beforeDragPosition').yPos
              this.component.transform.x = this.getData('beforeDragPosition').xPos
              this.component.transform.y = this.getData('beforeDragPosition').yPos
              if(this.getData('ltPropTransition').animation === "zoom"){
                this.component.actualModalDiv.style.transform = "translate("+this.getData('beforeDragPosition').xPos+"px ,"+this.getData('beforeDragPosition').yPos+"px) scale("+this.getData('beforeDragPosition').scale+")"
              } else {
                this.component.actualModalDiv.style.transform = "translate("+this.getData('beforeDragPosition').xPos+"px ,"+this.getData('beforeDragPosition').yPos+"px)"
              }
            }
            this.$node.alignLyteModal = function(){
              this.component.updateScrollHandling()
              this.component.computeOffsetImpl.bind(this.component, 0, true)
            }
            this.$node.calculateOffset = this.updateScrollHandling.bind(this);
            this.$node.reflectTransitionChange = this.reflectTransitionChange.bind(this);
        }
        else{
            this.setData('returnedFalse',true);
            this.$node.ltProp({"showCopy":false,"show":false});
        }
    }

    /**
     * The method is going to change the transition property when the modal is opened with different animation and closed with different animation
     * This util function is required to be triggered by the developer after they change the ltPropTransition value
     * The function can be triggered in onShow inside a setTimeout of 500ms or before the ltPropShow of the modal is set to false
     *
     */
    reflectTransitionChange() {
        this.computeOffsetImpl(null, true);
    }

    didDestroy() {
        //   _lyteUiUtils.modalCreationOrder -= 1;
        this.setData('ltPropShowWormhole', false);
        this.$node.classList.remove('lyteModalOpened');
        if(this.timeOutId){
            clearTimeout(this.timeOutId);
            delete this.timeOutId;
        }
        if(this.beforeCloseId){
            clearTimeout(this.beforeCloseId);
            delete this.beforeCloseId;
        }
        if(this.renderSidewise){
            delete this.renderSidewise;
            delete this.renderProps;
        }
        if(this.childComp){
            this.clearFastdomBatch();
            if(this.getData('ltPropFreeze') && this.addedFreezeDetails){
                window.LytePopup.hideOrShowFreeze("close",this);
                delete this.addedFreezeDetails;
            }
            window.LytePopup.closePopup(this);
            this.childComp.remove();
            delete this.actualModalDiv;
            delete this.childComp;
            // if(this.$node.ltProp('freeze')){
            //     LytePopup.bodywrapperCount -= 1;
            //     if(LytePopup.bodywrapperCount == 0 || LytePopup.components.length == 0){
            //         document.body.classList.remove('bodyWrapper');
            //     }
            // }
            window.LytePopup.checkAndRemoveWrapper();
        }
        // LytePopup.components = [];
    }

    static actions(arg1) {
        return Object.assign(super.actions({
            close : function(){
               this.$node.ltProp("show",false);
            }
        }), arg1);
    }

    static methods(arg1) {
        return Object.assign(super.methods({
            beforeWormholeAppend : function(arg){
                if(this.childComp){
                    delete this.childComp;
                }
                if(this.actualModalDiv){
                    delete this.actualModalDiv;
                }
                this.childComp = arg;
                this.actualModalDiv = this.childComp.querySelector(".lyteModal");
            }
        }), arg1);
    }

    static observers(arg1) {
        return Object.assign(super.observers({
            showToggled : function(){

                var event = event || window.event;
                if(this.getData('returnedFalse')){
                    this.setData('returnedFalse',false);
                    return;
                }
                if(this.$node.ltProp("reRenderModal")){
                    if(this.$node.ltProp("show")){
                        this.$node.ltProp({"showCopy":false, "show":false});
                        window.LytePopup.closePopup(this);
                        this.setData("first",true);
                        this.setData('initializedPosition',false);
                    }
                    this.$node.ltProp("reRenderModal",false);
                }
                if(this.timeOutId){
                    delete this.timeOutId;
                    this.closeModal();
                    window.LytePopup.closePopup(this);
                }
                if(this.$node.ltProp("show") && !this.$node.ltProp("showCopy")){
                    _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this.childComp).removeClass('lyteModalHidden')
                    if(window._lyteUiUtils.getRTL()){
                      if(!this.getData('ltPropIgnoreInlineDirection')){
                        if(this.getData('ltPropTransition').animation == "slideFromLeft"){
                            this.getData('ltPropTransition').animation = "slideFromRight";
                        }
                        else if(this.getData('ltPropTransition').animation == "slideFromRight"){
                            this.getData('ltPropTransition').animation = "slideFromLeft";
                        }
                        var offset = this.getData('ltPropOffset'),
                            newOffset = {};
                        for(window.key in offset){
                            if(window.key == "left" && offset[window.key] != "center"){
                                newOffset.right = offset[window.key];
                            }
                            else if(window.key == "right"){
                                newOffset.left = offset[window.key];
                            }
                            else{
                                newOffset[window.key] = offset[window.key];
                            }
                        }
                        this.setData('ltPropOffset',newOffset);
                      }
                    }
                    if(window.LytePopup.components.indexOf(this) != -1){
                        window.LytePopup.closePopup(this);
                        this.setData("first",true);
                        this.setData('initializedPosition',false);
                    }
                    this.$node.ltProp("bindToBody",true);
                    window._lyteUiUtils.dispatchEvent('lyteModalBeforeOpen' , this.actualModalDiv)
                    this.setData('ltPropShowWormhole' , true)

                    if(this.getData('ltPropPadding') !== ''){
                        var modalYield = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this.childComp).find('.lyteModalYield').eq(0)
                        modalYield.addClass('lyteModalYieldWithPadding')
                        modalYield[0].style.padding = this.getData('ltPropPadding')
                    }

                    var self = this;
                    this.beforeShowId = setTimeout(function(){
                        delete self.beforeShowId;
                        self.onBeforeShowHandling();
                    },0);

                }
                else{
                    this.setData('ltPropShowWormhole' , false)
                    if(this.transitionEndTimeout){
                        clearTimeout(this.transitionEndTimeout);
                        delete this.transitionEndTimeout;
                    }
                    this.clearFastdomBatch();
                    if(this.$node.ltProp("showCopy")){
                        var self = this;
                        this.beforeCloseId = setTimeout(function(){
                            delete self.beforeCloseId;
                            self.onBeforeCloseHandling(event);
                        },0);
                    }
                    else{
                        if(window.LytePopup.components.indexOf(this) != -1){
                            window.LytePopup.closePopup(this);
                            this.setData("first",true);
                            this.setData('initializedPosition',false);
                        }
                    }
                }
            }.observes("ltPropShow","ltPropReRenderModal").on('didConnect'),

            triggerDraggable : function(){
              this.addDragHandler();
            }.observes("ltPropDraggable"),

            changeBindToBody : function(){
                if(!this.getData('ltPropBindToBody')){
                    if(this.getData('ltPropFreeze') && this.addedFreezeDetails){
                        window.LytePopup.hideOrShowFreeze("close",this,true);
                        delete this.addedFreezeDetails;
                    }
                    window.LytePopup.closePopup(this);
                    if(this.renderSidewise){
                        delete this.renderSidewise;
                        delete this.renderProps;
                    }
                    this.actualModalDiv = null;
                    this.childComp = null;
                    if(this.getData('ltPropShow') ){
                        this.setData({'ltPropShowCopy':false,'ltPropShow':false});
                    }
                    else if(this.getData('ltPropShowCopy')){
                        this.setData('ltPropShowCopy', false);
                    }
                    this.setData("first",true);
                    this.setData('initializedPosition',false);
                    this.$node.classList.remove('lyteModalOpened');
                    // if(this.$node.ltProp('freeze')){
                    //     LytePopup.bodywrapperCount -= 1;
                    //     if(LytePopup.bodywrapperCount == 0){
                    //         document.body.classList.remove('bodyWrapper');
                    //     }
                    // }
                    window.LytePopup.checkAndRemoveWrapper();
                }
            }.observes("ltPropBindToBody"),

            addAriaValues : function( arg ) {
                if(this.getData('ltPropAria')){
                    var ariaProp = this.getData('ltPropAriaAttributes') || {};
                    _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this.actualModalDiv).attr('aria-modal' , true)
                    _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_3___default()(this.actualModalDiv).attr('aria-expanded' , this.getData('ltPropShow'))
                    window._lyteUiUtils.setAttribute( this.actualModalDiv, ariaProp, arg ? arg.oldValue : {} );
                    var closeIcon = this.actualModalDiv.querySelector('.lyteModalClose');
                    if(closeIcon){
                        closeIcon.setAttribute('aria-label', ariaProp['close-label'] || 'Close icon at top right position');
                    }
                }
            }.observes('ltPropAriaAttributes','ltPropAriaAttributes.{}','checkAria'),

            scrollHandling : function(){
                if(!this.getData('ltPropShow')){
                    return;
                }
                this.updateScrollHandling();
            }.observes("ltPropWidth","ltPropMaxWidth","ltPropHeight","ltPropMaxHeight")
        }), arg1);
    }

    _() {
        _;
    }
}

LyteModalComponent._template = "<template tag-name=\"lyte-modal\" role=\"dialog\" aria-label=\"lyte modal\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropBindToBody,'&amp;&amp;',expHandlers(ltPropReRenderModal,'!'))}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-wormhole case=\"true\" style=\"{{if(ltPropShowCopy,'visibility:visible','visibility:hidden')}}\" lt-prop-focus-on-close=\"{{ltPropFocusOnClose}}\" on-before-append=\"{{method(&quot;beforeWormholeAppend&quot;)}}\" lt-prop-show=\"{{ltPropShowWormhole}}\"> <template is=\"registerYield\" yield-name=\"lyte-content\"> <div class=\"modalWrapper {{ltPropWrapperClass}} lytePopupZI\"> <div class=\"lyteModal\"> <template is=\"switch\" l-c=\"true\"><template is=\"case\" case=\"{{ltPropShowCloseButton}}\" lc-id=\"lc_id_0\"><span class=\"lyteModalClose\" onclick=\"{{action('close')}}\" tabindex=\"0\"></span></template></template> <lyte-yield yield-name=\"modal\" class=\"lyteModalYield\"></lyte-yield> </div> <template is=\"switch\" l-c=\"true\"><template is=\"case\" case=\"{{ltPropFreeze}}\" lc-id=\"lc_id_0\"><lyte-modal-freeze></lyte-modal-freeze></template></template> </div> </template> </lyte-wormhole> </template></template> </template>";;
LyteModalComponent._dynamicNodes = [{"t":"s","p":[1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"a":{"style":{"name":"style","helperInfo":{"name":"if","args":["ltPropShowCopy","'visibility:visible'","'visibility:hidden'"]}}},"cn":"lc_id_0"},{"t":"r","p":[1,1],"dN":[{"t":"a","p":[1]},{"t":"s","p":[1,1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[0],"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":2,"sibl":[1]},{"t":"i","p":[1,1,3],"in":1,"sibl":[0]},{"t":"s","p":[1,3],"c":{"lc_id_0":{"dN":[{"t":"cD","p":[0],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0}],"dc":[1,0],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[1,0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0},{"type":"dc","trans":true,"hc":true,"p":[0]}];;

LyteModalComponent._observedAttributes = [
    "ltPropShow",
    "ltPropFreeze",
    "ltPropShowCloseButton",
    "ltPropCloseOnEscape",
    "ltPropTransition",
    "ltPropOffset",
    "ltPropDimmer",
    "ltPropDraggable",
    "ltPropAllowMultiple",
    "ltPropScrollable",
    "ltPropMaxHeight",
    "ltPropMaxWidth",
    "ltPropWidth",
    "ltPropHeight",
    "ltPropWrapperClass",
    "ltPropBindToBody",
    "ltPropShowCopy",
    "ltPropReRenderModal",
    "ltPropOverlayClose",
    "ltPropAria",
    "ltPropAriaAttributes",
    "ltPropPreventFocus",
    "ltPropSetContentHeight",
    "ltPropCloseDuration",
    "ltPropOverlapModal",
    "ltPropIgnoreInlineDirection",
    "ltPropAllowContainment",
    "ltPropFocusOnClose",
    "ltPropPadding",
    "ltPropDependentModalId",
    "ltPropParentModalId",
    "ltPropShowWormhole",
    "first",
    "resizeCalled",
    "initializedPosition",
    "prevHeight",
    "returnedFalse",
    "prevModalHeight",
    "prevModalWidth",
    "calculateHW",
    "checkAria",
    "beforeDragPosition",
    "resetTriggered"
];

if (document.readyState === "complete" || document.readyState === "interactive"){
    window.addModalEvent();
}
else{
    document.addEventListener("DOMContentLoaded", function(event){
        window.addModalEvent(event);
    });
}

if (typeof Object.assign != 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, "assign", {
    value: window.assign = function(target, varArgs) { // .length of function is 2
      'use strict';
      if (target == null) { // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) { // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
      return to;
    },
    writable: true,
    configurable: true
  });
}

/**
 * @syntax yielded
 * <lyte-modal>
 *     <template is = "registerYield" yield-name = "modal">
 *         <lyte-modal-header> Create Profile </lyte-modal-header>
 *         <lyte-modal-content>
 *             //Some Content
 *         </lyte-modal-content>
 *         <lyte-modal-footer class = "right">
 *             //Some button
 *         </lyte-modal-footer>
 *     </template>
 * </lyte-modal>
 */


LyteModalComponent.register("lyte-modal", {
    hash: "LyteModalComponent_5",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});


/***/ }),

/***/ 26922513:
/*!**********************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-table.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteTableComponent": () => (/* binding */ LyteTableComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_mixins_lyte_table_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/mixins/lyte-table-utils.js */ 72325315);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_mixins_lyte_table_sortable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/mixins/lyte-table-sortable.js */ 7168042);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_plugins_lyte_scrollbar_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/plugins/lyte-scrollbar.js */ 44690572);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_plugins_lyte_scrollbar_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_ui_component_plugins_lyte_scrollbar_js__WEBPACK_IMPORTED_MODULE_5__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    },

    "LyteUiComponentComponentRegistry": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry;
    },

    "LyteTableSortableMixin": function() {
        return _node_modules_zoho_lyte_ui_component_mixins_lyte_table_sortable_js__WEBPACK_IMPORTED_MODULE_2__.LyteTableSortableMixin;
    },

    "LyteTableUtilsMixin": function() {
        return _node_modules_zoho_lyte_ui_component_mixins_lyte_table_utils_js__WEBPACK_IMPORTED_MODULE_3__.LyteTableUtilsMixin;
    }
});









class LyteTableComponent extends (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.includeMixins)([_node_modules_zoho_lyte_ui_component_mixins_lyte_table_utils_js__WEBPACK_IMPORTED_MODULE_3__.LyteTableUtilsMixin, _node_modules_zoho_lyte_ui_component_mixins_lyte_table_sortable_js__WEBPACK_IMPORTED_MODULE_2__.LyteTableSortableMixin], _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component) {
    constructor() {
        super();
    }

    init() {
        var uA = window.navigator.userAgent,
        cb = "beforeRender",
        __this = this,
        $node = __this.$node,
        __window = window,
        add = "addEventListener",
        ns = '_tableResize';
        
        __this._dir = window._lyteUiUtils.getRTL();
        __this.isIE11Lyte = /rv:11/ig.test( uA );
        __this.isEdgeLyte = /Edge/ig.test( uA );
        __this._browser = __this.isIE11Lyte || __this.isEdgeLyte || uA.match( 'Safari' );

        /**
         * @method beforeRender
         * @version 1.0.1
         */

        __this.getMethods( cb ) && __this.executeMethod( cb, $node );

        /**
         * @utility scrollTable
         * @version 1.0.4
         */

        $node.scrollTable = function( x, y ){
            var scrollElem = ( __this.scrollDiv = __this.scrollDiv || $node.querySelector( 'div.lyteTableScroll' ) ),
            undef = void 0,
            evt = new Event( 'scroll', { bubbles: true } );

            if( x != undef ){
                scrollElem.scrollLeft = x;
            }

            if( y != undef ){
                scrollElem.scrollTop = y;
            }

            evt._byFunc = true;
            scrollElem.dispatchEvent( evt );

            if( !__this.__from_collapse ){
                __this.update_collapse( true );
            }
        }
        /**
         * @utility updateCollapse
         * @version 3.92.0
         */
        $node.updateCollapse = __this.update_collapse.bind( __this );

        if( !__window[ ns ] ){
            __window[ ns ] = true;

            var fn = window.resizeTable;

            __window[ add ]( 'resize', fn, true );
            __window[ add ]( 'orientationchange', fn, true );
        }

        /**
         * @utility toggleRows
         * @version 1.0.3
         */

         $node.toggleRows = function( val ){
            var name = val ? 'remove' : "add",
            __tags = this.ltProp('tags');

            Array.from( this.querySelectorAll( __tags.tbody + ' ' + __tags.tr + '.lytePreventInfiniteScroll' ) ).forEach( function( item ){
                item.classList[ name ]( 'lyteHidden' );
            });
         }

    }

    rtlfunc(lft, bcr, ww) {
        if( this._dir && lft != 'top' && lft != 'clientY' ){
            if( bcr ){
                if( lft == 'right' ){
                    return ww - bcr.left;
                } else if( lft == 'clientX' ){
                    return ww - bcr[ lft ];
                }
                return ww - bcr.right;
            } else if( lft == 'left' ){
                return 'right';
            } else if( lft == "right" ){
                return "left";
            }
        }
        return bcr ? bcr[ lft ] : lft;
    }

    didDestroy() {
        var __this = this,
        __data = __this.data,
        scrolldiv = __this.scrollDiv,
        $node = __this.$node,
        _window = window,
        iso = __this._intersectionObs;

        if( _window._tableResize && document.body.getElementsByTagName( 'lyte-table' ).length == 0 ){
            var rel = "removeEventListener";

            _window[ rel ]( 'resize', window.resizeTable, true );
            _window[ rel ]( 'orientationchange', window.resizeTable, true );

            delete _window._tableResize;
        }

        if( __data.ltPropNavigation ){
           window._lyteUiUtils.tableNavigation( $node.getElementsByTagName( __data.ltPropTags.table )[ 0 ], 'unbind' );
        }

        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.clear( this.__collpse_fdom );
        delete this.__collpse_fdom;

        if( iso ){
            __this._setmeasure && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.clear( __this._setmeasure );
            iso.disconnect();

            delete __this.reset;
            delete __this._intersectionObs;
            delete __this._intersections;
        }

        !__data.ltPropPreventScrollbar && scrolldiv && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( scrolldiv ).removeScroll();

        delete __this.scrollDiv; delete __this._dummy; delete __this._dummy1; delete __this.resizeComponent; delete __this.targetElem; delete __this._dummyTr;
        delete $node.setValue; delete $node.scrollTable;
    }

    didConnect() {
        var __data = this.data,
        ltPropInfiniteScroll = __data.ltPropInfiniteScroll, 
        secData = __data.secondaryData,
        // ltPropResize = __data.ltPropResize,
        $node = this.$node,
        __tags = __data.ltPropTags;

        // if( __data.ltPropYield && (ltPropResize.vertical || ltPropResize.horizontal)) {
        //     this.resizeComponentAppend();
        // }
        try {
            var scrollDiv = $node.querySelector('div.lyteTableScroll');
            // scrollDiv._overlay = scrollDiv.getElementsByTagName( 'lyte-overlaydiv' )[ 0 ];
            this.scrollDiv = scrollDiv;
            scrollDiv.comp = this;
            scrollDiv._infiniteScroll = ltPropInfiniteScroll;
            if ( !__data.ltPropPreventScrollbar && (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().prototype.scroll) ) {
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()(scrollDiv).scroll( __data.ltPropScrollbarOption);
                var scrollbar = $node.querySelector('.lyteScrollContainer.lyteScrollContainerY');
                var header = $node.getElementsByTagName( __tags.th )[ 0 ], hgt;
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.measure(function () {
                    var fg = this._dir;
                    // while applying scroll plugin vertical scrollbar needs some offset for enabling the virtual of only body part is scrolling. If it is zero we have to set height of the header as offset
                    if (header && scrollbar && scrollbar.offsetTop == 0) {
                        hgt = header.getBoundingClientRect().height;
                        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.mutate(function () {
                            scrollbar.style.top = hgt + 'px';
                            if (fg) {
                                $node.classList.add('lyteRTL')
                            }
                        }.bind(this))
                    }
                    _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.mutate(function () {
                        __data.ltPropDualResize && $node.classList.add('lyteDualResize')
                        if (this.getMethods('afterRender')) {
                            this.executeMethod('afterRender', this.$node);
                        }
                    }.bind(this))
                }.bind(this))
            } else {
                if (this.getMethods('afterRender')) {
                    /**
                     * @method afterRender
                     * @version 1.0.1
                     */
                    this.executeMethod('afterRender', this.$node);
                }
            }
        } catch (err) {
        }
        if (ltPropInfiniteScroll) {
            $node.classList.add('infinitescroll')
            /**
             * @utility setValue
             * @version 1.0.2
             */
            $node.setValue = function (ret) {
                if (this._stopScroll) {
                    this.appendAddData1.call(this, ret)
                }
            }.bind(this)

            /**
             * @utility removeRow
             * @version 2.2.17
             */

            $node.removeRow = function (row) {
                this.removeRow(row);
            }.bind(this);

            /**
             * @utility scrollToRecord
             * @version 2.2.19
             */

            $node.scrollToRecord = this.scrollToRecord.bind(this);

            /**
             * @utility insertRow
             * @version 2.2.19
             */

            $node.insertRow = this.insertRow.bind(this);
        }

        if( __data.ltPropNavigation ){
            window._lyteUiUtils.tableNavigation( $node.getElementsByTagName( __tags.table )[ 0 ] );
        }
    }

    // width calculation for positioning
    columnWidth(fixedColumn, i, j) {

        var width = 0;
        j = j || 0;

        for( ; j < i; j++ ){
            width += fixedColumn[ j ].property.width;
        }

        return width;
    }

    heightCalc(rows, upper, hgtLimit) {
        var hgt = 0, j = upper;
        for( ; j > 0; j-- ){
            hgt += rows[ j ];
            if( hgtLimit < hgt ){
                break;
            }
        }
        return [ hgt, j ];
    }

    topElem(elem) {
        var __final;

        if( this.isIE11Lyte || this.isEdgeLyte ){
            __final = elem.getElementsByTagName( this.data.ltPropTags.td )[ 0 ];
        } else {
            __final = elem;
        }
        return __final ? __final.getBoundingClientRect() : {};
    }

    cellSet(elem, value) {
        var __elem;
        if( this.isIE11Lyte || this.isEdgeLyte ){
            __elem = Array.from( elem.getElementsByTagName( this.data.ltPropTags.td ) );
        } else {
           __elem = [ elem ];
        }

        if( value ){
            __elem.forEach( function( item ){
                item.style.transform = value;
            });
        }
        return __elem[ 0 ].style.transform;
    }

    scrollTable(event, obj) {
        // fastdom has been removed here due to delay causes error in calculation of data in ie edge safari
        var b = event.yScroll, 
        __tags = this.data.ltPropTags,
        ltPropData = this.getData('ltPropData'), 
        ltPropContent = this.getData('ltPropContent'), 
        scrollDiv = this.scrollDiv, 
        divClientRect = obj.tbodyClient, 
        tableClient = obj.$nodeClient, 
        table = this.$node.querySelector( __tags.table ),
        head = this.$node.getElementsByTagName( __tags.th )[ 0 ], 
        neglected = obj.neglected, 
        compNeg = obj.compNeg;
        head = head ? (head.property ? head.property.height : head.getBoundingClientRect().height) : 0;
        var topElem = obj.topElem, 
        top1 = obj.topElemClient;

        if (table.style.height.indexOf('px') == -1) {
            table.style.height = divClientRect.height + 'px';
            this._rowHgt = parseInt(top1.height * 10) / 10;
            this._step = parseInt((divClientRect.height - this._rowHgt * neglected.length) * 10) / 10;
        }
        if( !this._dummy ){
            this.createDummy( obj.tbody );
        }
        if (b == undefined && !scrollDiv.classList.contains('eventBinded')) {
            var prevScroll = parseFloat(this._dummy.style.transform.match(/[\d|.]+/ig)[0]),
                currScroll = scrollDiv.scrollTop
            if (currScroll > prevScroll) {
                b = 1
            } else {
                b = -1
            }
        }

        var __boundary = this._boundary,
        __dummy = this._dummy.style,
        __dummy1 = ( this._dummy1 || {} ).style,
        __rowHgt = this._rowHgt;

        if (b > 0) {
            if (parseFloat(tableClient.top + head) >= parseFloat(top1.bottom)) {
                if( __boundary.bottom <= ltPropContent.length - 2 ) {
                    var diff = Math.max(parseInt((tableClient.top + head - top1.bottom) / __rowHgt ), 1);
                    if( __boundary.bottom + diff > ltPropContent.length - 1) {
                        diff = ltPropContent.length - 1 - __boundary.bottom
                    }
                    for (var i = 0; i < diff; i++) {
                        __boundary.bottom += 1;
                        if (i >= diff - ltPropData.length) {
                            set(ltPropData[this._top], { body: ltPropContent[__boundary.bottom], index: __boundary.bottom })
                            topElem.dataOrder = __boundary.bottom;
                        }
                        __boundary.top = __boundary.bottom - ltPropData.length + 1;
                        if (this.cellSet(topElem)) {
                            this.regex(topElem)
                        } else {
                            this.cellSet(topElem, "translateY(" + (this._step) + 'px)')
                        }
                        __dummy.transform = 'translateY(' + (parseFloat( __dummy.transform.match(/[\d|.]+/ig)[0]) + __rowHgt ) + 'px)'
                        __dummy.height = Math.max(parseFloat( __dummy.height) - __rowHgt, 0) + 'px';
                        if (this._browser) {
                            __dummy1.transform = 'translateY(' + (parseFloat( __dummy1.transform.match(/[\d|.]+/ig)[0]) + __rowHgt ) + 'px)'
                        }
                        this._bottom = this._top;
                        this._top = (this._top + 1) % ltPropData.length;
                        if ( __boundary.bottom >= ltPropContent.length) {
                            __boundary.bottom = ltPropContent.length - 1;
                            this._top = (this._top + 1) % ltPropData.length;
                            break
                        }
                        topElem = this.nthoftype.call(this, obj.tbody, this._top + compNeg.length, true)
                    }
                } else {
                    this.scrollEndMethod1();
                }
            }

        } else if (b < 0) {
            var bottmElem = obj.bottmElem, bottom = obj.bottmElemClient;
            if (tableClient.bottom <= bottom.top) {
                var mat = this.cellSet(bottmElem).match(/[\d|.]+/ig);
                if (!mat || (mat && mat[0] == '0')) {
                    return
                }
                var diff = parseInt(Math.max(parseFloat((bottom.top - tableClient.bottom) / __rowHgt ), 0)),
                    minDiff = Math.max(diff - 1 - this._boundary.top, 0)
                for (var i = diff - 1; i >= 0 && diff != 0; i--) {
                    if ( __boundary.top == 0) {
                        break;
                    }
                    __boundary.top -= 1;
                    if (i <= ltPropData.length - 1 + minDiff) {
                        set(ltPropData[this._bottom], { body: ltPropContent[ __boundary.top], index: __boundary.top })
                        bottmElem.dataOrder = __boundary.top;
                    }
                    __boundary.bottom = __boundary.top + ltPropData.length - 1;
                    if (this.cellSet(bottmElem)) {
                        this.regex(bottmElem, true)
                    }
                    __dummy.height = (parseFloat( __dummy.height) + __rowHgt ) + 'px';
                    __dummy.transform = 'translateY(' + (parseFloat( __dummy.transform.match(/[\d|.]+/ig)[0]) - __rowHgt ) + 'px)'
                    if (this._browser) {
                        __dummy1.transform = 'translateY(' + (parseFloat( __dummy1.transform.match(/[\d|.]+/ig)[0]) - __rowHgt ) + 'px)'
                    }
                    this._top = this._bottom;
                    this._bottom = (ltPropData.length + this._bottom - 1) % ltPropData.length;
                    if (__boundary.top == -1) {
                        __boundary.top = 0;
                        __boundary.bottom = __boundary.top + ltPropData.length - 1;
                        break
                    }
                    bottmElem = this.nthoftype.call(this, obj.tbody, this._bottom + compNeg.length, true)
                }
            }
        }
    }

    createDummy(tbody) {
        var dummy = document.createElement( this.data.ltPropTags.tr );
        dummy.classList.add('dummy');
        tbody.appendChild(dummy)
        dummy.setAttribute('style', 'transform:translateY(0px);height:0px')
        this._dummy = dummy;
        if (this._browser) {
            var dummy1 = document.createElement('div');
            dummy1.classList.add('dummy');
            this.scrollDiv.appendChild(dummy1)
            dummy1.setAttribute('style', 'transform:translateY(0px);height:5px')
            this._dummy1 = dummy1;
        }
    }

    regex(elem, flag) {
        if( this.isIE11Lyte || this.isEdgeLyte ){
            var cells = elem.getElementsByTagName( this.data.ltPropTags.td ),
            __length = cells.length;

            for( var i = 0; i < __length; i++ ){
                this.regex1( cells[ i ], flag );
            }
        } else {
            this.regex1( elem, flag );
        }
    }

    regex1(elem, flag) {
        var __style = elem.style,
        __transform = __style.transform,
        rgx = /[\d|.]+/ig,
        __step = this._step;

        if( flag ) {
            __style.transform = __transform.replace( rgx, function( arg ) { return Math.max( parseFloat( arg ) - __step, 0 ).toFixed( 3 ) });
        } else {
            __style.transform = __transform.replace( rgx, function( arg ) { return ( parseFloat( arg ) + __step ).toFixed( 3 ) });
        }
    }

    scrollEndMethod1() {
        if( this._stopScroll ) {
            return
        }
        this._stopScroll = true;
        if (this.getMethods('scrollEnd')) {
            /**
             * @method scrollEnd
             * @version 1.0.0
             */
            this.appendAddData1(this.executeMethod('scrollEnd'))
        }
    }

    appendAddData1(ret) {
        if (ret) {
            if (ret.then) {
                Promise.resolve(ret).then(function (arg) {
                    if (arg) {
                        this.apd1.call(this, arg);
                    }
                }.bind(this), function () {
                    console.log( 'error at scroll end promise' );
                }.bind(this));
            } else {
                this.apd1.call(this, ret)
            }
        }
    }

    apd1(ret) {
        var __data = this.data,
        ltPropContent = __data.ltPropContent, 
        ltPropData = __data.ltPropData,
        La = this.$addon.arrayUtils;

        this._prevent = true
        if( ret.constructor == Array ){
            La( ltPropContent, 'concat', ret );
        } else if( ret.constructor == Object ) {
            La( ltPropContent, 'push', ret );
        }
        delete this._prevent;
        delete this._stopScroll;
    }

    nthoftype(tbody, index, fg) {
        var arr = [],
        rows = tbody.getElementsByTagName( this.data.ltPropTags.tr );

        if( fg ){
            return rows[ index ];
        }

        var __length = rows.length;

        for( var i = 0; i < __length; i++ ) {
            var __cur = rows[ i ];
            if( !__cur.classList.contains('dummy')) {
                arr.push( this.get_children( __cur )[ index ] );
            }
        }
        return arr;
    }

    scroll(event) {

        // cant use fastdom because of jerk in ie edge safari browser
        var component = this.comp,
            // headerList =component.$node.querySelectorAll( 'lyte-th' ),
            // scrollleft and top are required for process like fixing columns and infinite scroll. If scroll is dispatched by plugin event object contains these properties or it is calculated
        obj = this._wheelObj || { bcr: {} };

        if( component.__ignore_scroll && component.__allow_scroll !== true ){
            return;
        }

        this._scrollLeft = obj.scrollLeft != undefined ? obj.scrollLeft : this.scrollLeft;
        this._scrollTop = obj.scrollTop != undefined ? obj.scrollTop : this.scrollTop;
        
        var direction = this._direction,
        __is_not_sticky = !component.data.ltPropStickyTable;

        __is_not_sticky && component.scrollCheck.call(this, event, obj);

        if (this._scrollLeft == 0 && direction != 'rtl' && component.getData('ltPropInfiniteScroll')) {
            var ary = component.getData('columns');
            component.$addon.arrayUtils(ary, 'remove', 0, ary.length);
            
            if( __is_not_sticky ){
                var fixedd = this.getElementsByClassName( 'lyteTableFixed' ),
                __length = fixedd.length;

                for( var i = 0; i < __length; i++ ) {
                    var __cur = fixedd[ i ];

                    __cur.style.left = '0px';
                    __cur.classList.remove('lyteTableFixed');
                }
            }
        }
        if (component.data.ltPropInfiniteScroll) {
            component.scrollTable.call(component, event, obj)
        }
        delete this._scrollLeft; delete this._scrollTop;
    }

    // fixed column checks and removals
    scrollCheck(event, obj) {
        var component = this.parentElement.component,
        __tags = component.data.ltPropTags,
        table = this.getElementsByTagName( __tags.table )[0], scrollDiv = this,
            scrollTop = this._scrollTop, scrollLeft = this._scrollLeft,
            scrollDir = component.getData('ltPropScroll'),
            direction = this._direction,
            tbody = table.getElementsByTagName( __tags.tbody )[0],
            thead = this.getElementsByTagName( __tags.thead )[0],
            ths = [],
            headerList = [],
            fixedColumn = [];

        if (thead) {
            ths = thead.getElementsByTagName( __tags.th );
        }

        if ((scrollTop != this.prevScollTop || event._byFunc) && scrollDir.vertical) {
            var colsNos = ths;
            if (colsNos.length) {
                for (var i = 0; i < colsNos.length; i++) {
                    colsNos[i].classList.add('tableRowFixed')
                    // colsNos[i].style.top = (scrollTop) + 'px';
                    component.transform(true, colsNos[i], scrollTop)
                }
                if (!scrollTop) {
                    for (var i = 0; i < colsNos.length; i++) {
                        colsNos[i].classList.remove('tableRowFixed');
                    }
                }
            }
        }
        // for horizontal scroll    
        if ((scrollLeft != this.prevScollLeft || event._byFunc) && scrollDir.horizontal) {
            var columns = component.data.columns, head = [];
            if (thead) {
                var headRows = Array.apply(Array, thead.getElementsByTagName( __tags.tr )),
                    headRowCopy = Array.apply(Array, thead.getElementsByClassName('lyteRowCopy'));
                head = headRows.concat(headRowCopy);
            }

            var ltPropFixedColumnClass = component.data.ltPropFixedColumnClass || '';
            if (head.length) {
                headerList = head[0].getElementsByTagName( __tags.th );
                for (var n = 0; n < headerList.length; n++) {
                    headerList[n].classList.contains('lyteFixedColumn') && fixedColumn.push(headerList[n]);
                }
            }
            // fastdom removed due to jerk in ie edge chrome browser
            for (var i = columns.length; i < fixedColumn.length; i++) {
                if (((fixedColumn[i].property.right + component.columnWidth.call(component, fixedColumn, i) > (obj.scrollDivClient.right)) && direction == 'rtl') || ((fixedColumn[i].property.left < (obj.scrollDivClient.left + component.columnWidth.call(component, fixedColumn, i))) && direction != 'rtl')) {
                    var width = fixedColumn[i].property.width
                    var order = fixedColumn[i].order
                    if (order + 1 < headerList.length) {
                        !fixedColumn[i].classList.contains('lyteTableFixed') && fixedColumn[i].classList.add('lyteTableFixed')
                        columns.push(fixedColumn[i])
                        for (var zz = 1; zz < head.length; zz++) {
                            var colex = head[zz].getElementsByTagName( __tags.th )[order];
                            colex && !colex.classList.contains('lyteTableFixed') && colex.classList.add('lyteTableFixed')
                        }
                        var colls = /*component.isIE11Lyte ? */component.nthoftype.call(component, tbody, order) /*: this.querySelectorAll( 'lyte-tbody lyte-td:nth-of-type(' + (order + 1) + ')' )*/
                        for (var k = 0; k < colls.length; k++) {
                            !colls[k].classList.contains('lyteTableFixed') && colls[k].classList.add('lyteTableFixed')
                            if (ltPropFixedColumnClass) {
                                colls[k].classList.add(ltPropFixedColumnClass)
                            }
                        }
                    }
                }
            }
            for (var n = columns.length - 1; n >= 0; n--) {
                var j = columns.length - 1;
                if ((scrollLeft == 0 && !(window.chrome && direction == 'rtl')) || ((((parseFloat((headerList[columns[j].order + 1].property.right + columns[j].property.width + component.columnWidth.call(component, columns, columns.length - 1)).toFixed(2)) <= parseFloat(obj.scrollDivClient.right.toFixed(2))) || (headerList[columns[j].order + 1].property.right + 2 < columns[j].property.left)) && direction == 'rtl') || ((headerList[columns[j].order + 1].property.left >= (obj.scrollDivClient.left + columns[j].property.width + component.columnWidth.call(component, columns, columns.length - 1))) && (columns[j].property.left >= (obj.scrollDivClient.left + component.columnWidth.call(component, fixedColumn, columns.length - 1))) && direction != 'rtl'))) {
                    // var innerElem = headerList[columns[j].order].querySelector( 'lyte-th-data' );
                    headerList[columns[j].order].classList.contains('lyteTableFixed') && headerList[columns[j].order].classList.remove('lyteTableFixed');
                    if (ltPropFixedColumnClass) {
                        headerList[columns[j].order].classList.remove(ltPropFixedColumnClass)
                    }
                    // columns[j].style.removeProperty('left');
                    component.transform(false, columns[j], 0)
                    for (var zz = 0; zz < head.length; zz++) {
                        var colex = head[zz].getElementsByTagName( __tags.th )[columns[j].order];
                        if (colex) {
                            colex.classList.contains('lyteTableFixed') && colex.classList.remove('lyteTableFixed');
                            // colex.style.removeProperty('left');
                            component.transform(false, colex, 0)

                        }
                    }
                    var currCols = /*component.isIE11Lyte ?*/ component.nthoftype.call(component, tbody, columns[j].order) /*: this.querySelectorAll( 'lyte-tbody lyte-td:nth-of-type(' + (columns[j].order + 1) + ')' )*/;
                    for (var z = 0; z < currCols.length; z++) {
                        // currCols[z].style.removeProperty('left');
                        component.transform(false, currCols[z], 0)
                        currCols[z].classList.contains('lyteTableFixed') && currCols[z].classList.remove('lyteTableFixed')
                        if (ltPropFixedColumnClass) {
                            currCols[z].classList.remove(ltPropFixedColumnClass)
                        }
                    }
                    component.$addon.arrayUtils(columns, 'removeAt', j)
                }
                else {
                    break;
                }
            }
            for (var j = 0; j < columns.length; j++) {
                //positioning on scroll
                var left, cells = /*component.isIE11Lyte ? */component.nthoftype.call(component, tbody, columns[j].order) /*: this.querySelectorAll( 'lyte-tbody lyte-td:nth-of-type(' + (columns[j].order + 1) + ')' )*/,
                    uA = window.navigator.userAgent.toLowerCase();
                if (j == 0) {
                    if (direction == 'rtl') {
                        if (uA.indexOf('firefox') != -1 || (uA.indexOf('safari') != -1 && (window._lyteUiUtils.isNegativeScroll() || (!(uA.indexOf('chrome') != -1) && !(uA.indexOf('chromium') != -1))))) {
                            left = scrollLeft + (component.columnWidth.call(component, headerList, columns[j].order, 0))
                        }
                        else if (uA.indexOf('edge') != -1 || uA.indexOf('trident') != -1 || uA.indexOf('msie') != -1) {
                            left = -scrollLeft + (component.columnWidth.call(component, headerList, columns[j].order, 0))
                        }
                        else {
                            left = scrollLeft - 1 - (obj.scrollWidth) + obj.scrollDivClient.width + (component.columnWidth.call(component, headerList, columns[j].order, 0))
                        }
                    }
                    else {
                        left = scrollLeft - (component.columnWidth.call(component, headerList, columns[j].order, 0))
                    }
                }
                else {
                    if (direction == 'rtl') {
                        if (uA.indexOf('firefox') != -1 || (uA.indexOf('safari') != -1 && (window._lyteUiUtils.isNegativeScroll() || (!(uA.indexOf('chrome') != -1) && !(uA.indexOf('chromium') != -1))))) {
                            left = /*parseInt(columns[j - 1].style.left)*/ component.transform(!1, columns[j - 1]) + component.columnWidth.call(component, headerList, columns[j].order, columns[j - 1].order + 1)
                        }
                        else {
                            left = /*parseInt(columns[j - 1].style.left)*/ component.transform(!1, columns[j - 1]) + component.columnWidth.call(component, headerList, columns[j].order, columns[j - 1].order + 1);
                        }
                    }
                    else {
                        left = component.transform(!1, columns[j - 1]) /*parseInt(columns[j - 1].style.left)*/ - component.columnWidth.call(component, headerList, columns[j].order, columns[j - 1].order + 1)
                    }
                }
                for (var x = 0; x < cells.length; x++) {
                    !cells[x].classList.contains('lyteTableFixed') && cells[x].classList.add('lyteTableFixed');
                    //cells[x].style.left = left + 'px';
                    component.transform(false, cells[x], left)
                }
                // columns[j].style.left = left + 'px';
                component.transform(false, columns[j], left)
                for (var zz = 0; zz < head.length; zz++) {
                    var colex = head[zz].getElementsByTagName( __tags.th )[columns[j].order];
                    if (colex) {
                        !colex.classList.contains('lyteTableFixed') && colex.classList.add('lyteTableFixed');
                        // colex.style.left = left + 'px';
                        component.transform(false, colex, left)
                    }
                }
            }
        }
        this.prevScollLeft = scrollLeft;
        this.prevScollTop = scrollTop;
    }

    transform(flag, elem, value) {
        var transform = (elem.style.transform || 'translateX(0px) translateY(0px)'),
            transX = parseFloat(/translateX\((.+)/.exec(transform)[1]),
            transY = parseFloat(/translateY\((.+)/.exec(transform)[1]);

        if (value != undefined) {
            if (!flag) {
                elem.style.transform = "translateY(" + transY + 'px) ' + 'translateX(' + value + 'px)';
            } else {
                elem.style.transform = "translateY(" + value + 'px) ' + 'translateX(' + transX + 'px)';
            }
        } else {
            return parseFloat(flag ? transY : transX);
        }
    }

    borderChange() {
        if (this.data.ltPropBorder) {
            this.$node.classList.add('border');
        }
        else {
            this.$node.classList.remove('border');
        }
    }

    widthObs() {
        this.$node.querySelector( this.data.ltPropTags.table ).style.width = this.data.ltPropWidth;
    }

    heightObs() {
        this.$node.querySelector( this.data.ltPropTags.table ).style.height = this.data.ltPropHeight;
    }

    sortable() {
        var row = this.$node.getElementsByTagName( this.data.ltPropTags.thead )[ 0 ];
        if( row ){
            var ns = "remove";

            if( this.data.ltPropColumnSortable ){
                this.colSort = this.sortableColumns.bind( this );
                ns = "add";
            }

            if( ns ){
                var rel = ns + "EventListener",
                fn = this.colSort;

                row[ rel ]( "mousedown", fn );
                row[ rel ]( "touchstart", fn );
                row.parentNode.classList[ ns ]( 'sortableTable' );
            }
        }
    }

    composePath(event) {
        var arr = [], 
        __target = event.target,
        node = __target.correspondingElement || __target;
        while( node && node.tagName != 'HTML' ){
            arr.push( node );
            node = node.parentNode;
        }
        return arr;
    }

    sortableColumns(event) {
        var __tags = this.data.ltPropTags,
        target = this.closestFind.call(this, event.path ? event.path : this.composePath.call(this, event), __tags.th + ':not(.lyteTableFixed)');
        if (target && this.$node.contains(target)) {
            var ret, isTch = event.type == "touchstart";
            if (this.getMethods('onBeforeSelect')) {
                /**
                 * @method onBeforeSelect
                 * @version 1.0.3
                 */
                ret = this.executeMethod('onBeforeSelect', target, event, this.$node)
            }
            if (ret != false) {
                var evt = isTch ? event.touches[0] : event
                this._ww = window.innerWidth;
                this.mousemove = this.sortableMouseMove.bind(this);
                this.offLeft = this.rtlfunc.call(this, 'clientX', evt, this._ww) - this.rtlfunc.call(this, 'left', target.getBoundingClientRect(), this._ww);
                this.colHead = target;
                this._thisBccr = this.$node.getBoundingClientRect()
                target.classList.add('lyteStickyTableColumnSortSelect')
                document.documentElement.addEventListener(isTch ? "touchmove" : 'mousemove', this.mousemove);
                this.mouseup = this.sortableMouseup.bind(this);
                document.documentElement.addEventListener(isTch ? "touchend" : 'mouseup', this.mouseup);
                this.flag = true;
                event.preventDefault();
                if (this.getMethods('onSelect')) {
                    /**
                     * @method onSelect
                     * @version 1.0.3
                     */
                    this.executeMethod('onSelect', target, event, this.$node)
                }
            }
        }
    }

    horiScroll(dummyDiv, ww) {
        var lt = this.rtlfunc.call(this, 'left'), IE = this.isIE11Lyte || this.isEdgeLyte,
            isEvt, check1, check2;
        if (/mousemove|touchmove/i.test(dummyDiv.type)) {
            isEvt = true;
        }
        if (isEvt) {
            if (this._reqId) {
                return;
            }

            var __bcr = this.__bcr;

            check1 = this.rtlfunc( 'clientX', dummyDiv, ww ) > Math.min( this.rtlfunc( 'right', __bcr, ww), ww - 2 );
            check2 = this.rtlfunc( 'clientX', dummyDiv, ww ) <= Math.max( 0, this.rtlfunc('left', __bcr, window.innerWidth ) );
        } else {
            check1 = (parseFloat(dummyDiv.style[lt]) - this._xxoff + parseFloat(dummyDiv.style.width)) >= this.rtlfunc('right', this._thisBccr, ww) - 1;
            check2 = (parseFloat(dummyDiv.style[lt]) - this._xxoff + parseFloat(dummyDiv.style.width)) >= this.rtlfunc('right', this._thisBccr, ww) - 1;
        }

        if (check1) {
            this.scrollDiv.scrollLeft += 2 * (this._dir ? (-1 * (IE ? -1 : 1)) : 1)
            if (isEvt) {
                var __value = 2 * ( this._dir ? -1 : 1 );
                this.__clientX -= __value;

                if( this.data.ltPropFixResizeCursor ){
                    this.__trans_value += __value
                }
            }
            this._reqId = window.requestAnimationFrame(function () {
                delete this._reqId;
                this.horiScroll(dummyDiv, ww)
            }.bind(this))
        } else if (check2) {
            if (isEvt) {
                var __value =  2 * ( this._dir ? -1 : 1 );
                this.__clientX += __value;
                
                if( this.data.ltPropFixResizeCursor ){
                    this.__trans_value -= __value
                }
            }
            this.scrollDiv.scrollLeft -= 2 * (this._dir ? (-1 * (IE ? -1 : 1)) : 1)
            this._reqId = window.requestAnimationFrame(function () {
                delete this._reqId;
                this.horiScroll(dummyDiv, ww);
            }.bind(this))
        } else {
            window.cancelAnimationFrame(this._reqId);
            delete this._prevent;
        }
    }

    sortableMouseMove(event) {
        var isTch = event.type == "touchmove", evt = event;
        if (isTch && evt.touches.length != 1) {
            return
        } else if (isTch) {
            evt = evt.touches[0]
        }
        if (this.flag && this._timeout == undefined) {
            var target = this.colHead, xscroll;
            var clientRect = target.getBoundingClientRect();
            var div = document.createElement('div');
            div.classList.add('lyteTableSortHelper');
            div.innerText = this.colHead.innerText;
            this._xxoff = xscroll = (window.pageXOffset || document.documentElement.scrollLeft) * (this._dir ? -1 : 1);
            var yscroll = window.pageYOffset || document.documentElement.scrollTop
            div.style.height = clientRect.height + 'px';
            div.style.width = clientRect.width + 'px';
            div.style[this.rtlfunc.call(this, 'left')] = (xscroll + this.rtlfunc.call(this, 'left', clientRect, this._ww)) + 'px';
            div.style.top = (yscroll + clientRect.top) + 'px';
            this._timeout = setTimeout(function () {
                window._lyteUiUtils.appendChild( document.body, div );
                this.flag = false;
            }.bind(this), 100)
        }
        var dummyDiv = document.querySelector('div.lyteTableSortHelper')
        if (dummyDiv) {
            var lft = this._dir ? "right" : "left", ww = window.innerWidth;
            var newLeft = Math.max(Math.min((this.rtlfunc.call(this, 'clientX', evt, this._ww) - this.offLeft), this.rtlfunc.call(this, 'right', this._thisBccr, this._ww) - parseFloat(dummyDiv.style.width)), this.rtlfunc.call(this, 'left', this._thisBccr, this._ww));
            // if( ( newLeft > parseFloat( dummyDiv.style[ lft ] - this._xxoff ) ) || ( newLeft < parseFloat( dummyDiv.style[ lft ] ) - this._xxoff ) ){
            if ((parseFloat(newLeft) > this.rtlfunc('left', this._thisBccr, ww)) && ((parseFloat(newLeft) + parseFloat(dummyDiv.style.width)) < this.rtlfunc('right', this._thisBccr, ww))) {
                window.cancelAnimationFrame(this._reqId);
                delete this._prevent; delete this._scrollDir
            }
            if (this._prevent) {
                return
            }
            dummyDiv.style[lft] = (newLeft + this._xxoff) + 'px';
            this._prevent = true
            this.horiScroll(dummyDiv, ww)
            if (this.getMethods('onDrag')) {
                /**
                 * @method onDrag
                 * @version 1.0.3
                 */
                this.executeMethod('onDrag', this.colHead, dummyDiv, event, this.$node)
            }
        }
        event.preventDefault();
        event.stopPropagation();
    }

    sortableMouseup(event) {
        if (!this.flag) {
            var __tags = this.data.ltPropTags,
            isTch = event.type == "touchend", dummyDiv = document.getElementsByClassName('lyteTableSortHelper')[0], clientRect = dummyDiv.getBoundingClientRect(), x = clientRect.left + clientRect.width / 2 + 2, y = clientRect.top + clientRect.height / 2,
                adjCol = this.closestFind.call(this, document.elementsFromPoint ? document.elementsFromPoint(x, y) : this.elementsFromPointCal.call(this, x, y), __tags.th + ':not(.lyteTableFixed)'),
                tbody = this.$node.getElementsByTagName( __tags.tbody )[0];
            if (adjCol != this.colHead && adjCol) {
                var Heads = this.colHead.parentElement.getElementsByTagName( __tags.th ),
                    colOrder = Array.prototype.indexOf.call(Heads, this.colHead),
                    adjOrder = Array.prototype.indexOf.call(Heads, adjCol),
                    ltPropHeader = this.data.ltPropHeader, ret;
                if (this.getMethods('onBeforeDrop')) {
                    /**
                     * @method onBeforeDrop
                     * @version 1.0.3
                     */
                    ret = this.executeMethod('onBeforeDrop', this.colHead, adjCol, colOrder, adjOrder, ltPropHeader, event, this.$node)
                }
                if (ret != false) {
                    if (!ltPropHeader.length) {
                        window._lyteUiUtils.insertBefore(adjOrder > colOrder ? adjCol.nextElementSibling : adjCol, this.colHead);
                        var colGrp = /*this.isIE11Lyte ? */this.nthoftype.call(this, tbody, colOrder) /*: this.$node.querySelectorAll( 'lyte-tbody lyte-td:nth-of-type(' + ( colOrder + 1) +')' )*/;
                        var AdjColGrp = /*this.isIE11Lyte ?*/ this.nthoftype.call(this, tbody, adjOrder) /*: this.$node.querySelectorAll( 'lyte-tbody lyte-td:nth-of-type(' + ( adjOrder + 1) +')' )*/;
                        for (var i = 0; i < colGrp.length; i++) {
                            window._lyteUiUtils.insertBefore(adjOrder > colOrder ? AdjColGrp[i].nextElementSibling : AdjColGrp[i], colGrp[i]);
                        }
                    }
                    else {
                        var flag = adjOrder > colOrder ? true : false;
                        var temp = this.$addon.arrayUtils(ltPropHeader, 'removeAt', colOrder), newOrder = Array.prototype.indexOf.call(adjCol.parentElement.getElementsByTagName( __tags.th ), adjCol);
                        this.$addon.arrayUtils(ltPropHeader, 'insertAt', colOrder < adjOrder ? (newOrder + 1) : newOrder, temp);
                        var newCol = adjCol.parentElement.getElementsByTagName( __tags.th, adjCol.parentElement)[colOrder < adjOrder ? (newOrder + 1) : newOrder];
                        if (adjCol.classList.contains('tableRowFixed')) {
                            newCol.classList.add('tableRowFixed');
                            newCol.style.top = adjCol.style.top;
                        }
                    }
                    if (this.getMethods('onDrop')) {
                        /**
                         * @method onDrop
                         * @version 1.0.3
                         */
                        this.executeMethod('onDrop', this.colHead, adjCol, colOrder, adjOrder, ltPropHeader, event, this.$node)
                    }
                }
            } else {
                this.getMethods( 'onRelease' ) && this.executeMethod( 'onRelease', this.colHead, event, this.$node );
            }
            document.body.removeChild(dummyDiv);
        } else {
            clearTimeout(this._timeout)
        }
        document.documentElement.removeEventListener(isTch ? "touchend" : 'mouseup', this.mouseup);
        document.documentElement.removeEventListener(isTch ? "touchmove" : 'mousemove', this.mousemove);
        this.colHead.classList.remove('lyteStickyTableColumnSortSelect')
        window.cancelAnimationFrame(this._reqId)
        delete this.mouseup; delete this._xxoff;
        delete this.mousemove;
        delete this.offLeft;
        delete this.colHead;
        delete this.flag;
        delete this._timeout;
        delete this._thisBccr; delete this._ww;
        delete this._reqId; delete this._prevent; delete this._scrollDir
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();
    }

    elementsFromPointCal(x, y) {
        var arr = [], element = document.elementFromPoint(x, y);
        while (element != document && element != document.documentElement && element != document.body && element != this.$node) {
            element.style.pointerEvents = 'none';
            arr.push(element);
            element = document.elementFromPoint(x, y);
        }
        for (var i = 0; i < arr.length; i++) {
            arr[i].style.pointerEvents = 'initial';
        }
        return arr;
    }

    // resizeComponentAppendObs: function () {
    //     if (this.data.ltPropYield) {
    //         this.resizeComponentAppend.call(this);
    //     }
    // }.observes('ltPropResize', 'ltPropResize.{}'),

    // resizeComponentAppend: function () {
    //     var ltPropResize = this.data.ltPropResize, scrdiv = this.$node.getElementsByTagName('lyte-table-structure')[0],
    //         tRz = scrdiv.getElementsByTagName('lyte-table-resize')[0], vrz = scrdiv.getElementsByTagName('lyte-table-vertical-resize')[0],
    //         hrz = scrdiv.getElementsByTagName('lyte-table-horizontal-resize')[0];
    //     if (ltPropResize.vertical || ltPropResize.horizontal) {
    //         if (!tRz) {
    //             var comp = document.createElement('lyte-table-resize')
    //             scrdiv.appendChild(comp)
    //             comp.addEventListener('mousedown', this.actions.tableResize.bind(this));
    //             comp.addEventListener('touchstart', this.actions.tableResize.bind(this));
    //         }
    //     } else if (tRz) {
    //         scrdiv.removeChild(tRz)
    //     }
    //     if (ltPropResize.vertical) {
    //         if (!vrz) {
    //             var comp = document.createElement('lyte-table-vertical-resize')
    //             scrdiv.appendChild(comp)
    //             comp.addEventListener('mousedown', this.actions.tableResize.bind(this))
    //             comp.addEventListener('touchstart', this.actions.tableResize.bind(this));
    //         }
    //     }
    //     else if (vrz) {
    //         scrdiv.removeChild(vrz)
    //     }
    //     if (ltPropResize.horizontal) {
    //         if (!hrz) {
    //             var comp = document.createElement('lyte-table-horizontal-resize')
    //             scrdiv.appendChild(comp)
    //             comp.addEventListener('mousedown', this.actions.tableResize.bind(this))
    //             comp.addEventListener('touchstart', this.actions.tableResize.bind(this));
    //         }
    //     }
    //     else if (hrz) {
    //         scrdiv.removeChild(hrz)
    //     }
    // },

    data(arg1) {
        
        var default_values = window._lyteUiUtils.getDefault( 'lyte-table' );

        return Object.assign(super.data({
            //user data
            /**
             * @componentProperty {object[]} ltPropContent
             * @version 1.0.0
             * @default []
             */
            ltPropContent: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("array", { "default": [] }),
            /**
             * @componentProperty {object[]} ltPropHeader
             * @version 1.0.0
             * @default []
             */
            ltPropHeader: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("array", { "default": [] }),
            /**
             * @componentProperty {string} ltPropId=''
             * @version 1.0.0
             */
            ltPropId: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": '' }),
            /**
             * @componentProperty {string} ltPropClass=''
             * @version 1.0.0
             */
            ltPropClass: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": default_values.class || '' }),
            /**
             * @componentProperty {boolean} ltPropBorder=false
             * @version 1.0.0
             */
            ltPropBorder: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", { "default": default_values.border || false }),
            /**
             * @componentProperty {string} ltPropHeaderLabelKey=''
             * @version 1.0.0
             */
            ltPropHeaderLabelKey: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": '' }),
            /**
             * @componentProperty {string} ltPropBodyLabelKey=''
             * @version 1.0.0
             */
            ltPropBodyLabelKey: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("string", { "default": '' }),
            /**
             * @componentProperty {string} ltPropWidth=100%
             * @version 1.0.0
             */
            ltPropWidth: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': default_values.width || '100%' }),
            /**
             * @componentProperty {string} ltPropHeight=100%
             * @version 1.0.0
             */
            ltPropHeight: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': default_values.height || '100%' }),
            /**
             * @typedef {object} tableResize
             * @property {boolean} horizontal
             * @property {boolean} vertical
             */

            /**
             * @componentProperty {tableResize} ltPropResize
             * @version 1.0.0
             * @default {}
             */
            ltPropResize: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', { 'default': default_values.resize || {} }),
            /**
             * @componentProperty {string} ltPropFixedColumnClass=''
             * @version 1.0.0
             */
            ltPropFixedColumnClass: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': default_values.fixedColumnClass || '' }),
            /**
             * @componentProperty {boolean} ltPropYield=false
             * @version 1.0.0
             */
            ltPropYield: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': default_values.yield || false }),
            /**
             * @typedef {object} tableScroll
             * @property {boolean} horizontal=true
             * @property {boolean} vertical=true
             */
            /**
             * @componentProperty {tableScroll} ltPropScroll
             * @default {"horizontal":true,"vertical":true}
             */
            ltPropScroll: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', { 'default': default_values.scroll || { horizontal: true, vertical: true } }),
            /**
             * @componentProperty {boolean} ltPropColumnSortable=false
             * @version 1.0.0
             */
            ltPropColumnSortable: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': default_values.columnSortable || false }),
            /**
             * @typedef {object} tableScrollbar
             * @property {left | right} verticalPosition=left
             * @property {top | bottom} horizontalPosition=bottom
             * @property {string} containerClass
             * @property {string} handlerClass
             * @property {string} horizontalContainerClass
             * @property {string} horizontalHandlerClass
             * @property {string} verticalContainerClass
             * @property {string} verticalHandlerClass
             * @property {boolean} preventVertical
             * @property {boolean} preventHorizontal
             * @property {number} keyStep=30
             * @property {hover | always | scroll} showOn=scroll
             * @property {number} wheelSpeed=1
             * @property {boolean} preventOnEnd=true
             * @property {object} offset={"x":0,"y":0}
             * @property {boolean} nested
             * @property {number} max=Infinity
             * @property {number} min=-Infinity
             */
            /**
             * @componentProperty {tableScrollbar} ltPropScrollbarOption
             * @version 1.0.0
             * @default {}
             */
            ltPropScrollbarOption: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', { 'default': default_values.scrollbarOption || {} }),
            /**
             * @componentProperty {boolean} ltPropDualResize=false
             * @version 1.0.5
             */
            ltPropDualResize: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default: default_values.dualResize || false }),

            // scroll table test data
            /**
             * @experimental ltPropData
             */
            ltPropData: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("array", { "default": [] }),
            /**
             * @componentProperty {boolean} ltPropInfiniteScroll=false
             * @version 1.0.0
             */
            ltPropInfiniteScroll: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { 'default': default_values.infiniteScroll || false }),
            /**
             * @componentProperty {string} ltPropCellHeight=20px
             * @version 1.0.2
             */
            ltPropCellHeight: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { default: default_values.cellHeight || '20px' }),
            /**
             * @componentProperty {number} ltPropContentLength
             * @version 1.0.2
             */
            ltPropContentLength: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('number', { default_values : default_values.contentLength || void 0 }),
            /**
             * @componentProperty {boolean} ltPropPreventScrollbar=false
             * @version 1.0.0
             */
            ltPropPreventScrollbar: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default: default_values.preventScrollbar || false }),

            /**
             * @componentProperty {string} ltPropRole=""
             * @version 3.45.0
             */

            ltPropRole : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { default : default_values.role || "" } ),

            // sticky table props
            /**
             * @componentProperty {boolean} ltPropStickyTable=false
             * @version 3.53.0
             */
            ltPropStickyTable : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { default : default_values.stickyTable || false } ),
            /**
             * @componentProperty {number} ltPropScrollStep=2
             * @version 3.53.0
             */
            ltPropScrollStep : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'number', { default : default_values.scrollStep || 2 } ),
            /**
             * @componentProperty {boolean} ltPropPreventTableModify=true
             * @version 3.53.0
             */
            ltPropPreventTableModify : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { default : default_values.preventTableModify == false ? false : true } ),
            /**
             * @componentProperty {string} ltPropSortDummyColumClass=""
             * @version 3.53.0
             */
            ltPropSortDummyColumClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { default : default_values.sortDummyColumnClass || "" } ),

            /**
             * @componentProperty {boolean} ltPropNavigation=false
             * @version 3.51.2
             */
            ltPropNavigation : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { default : default_values.navigation || false } ),

            /**
             * @componentProperty {boolean} ltPropReset=false
             * @version 3.53.0
             */

            ltPropReset : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { default : false } ),
            /**
             * @typedef {object} tableTags
             * @property {string} table="lyte-table-structure"
             * @property {string} thead="lyte-thead"
             * @property {string} tbody="lyte-tbody"
             * @property {string} tr="lyte-tr"
             * @property {string} td="lyte-td"
             * @property {string} th="lyte-th"
             */

            /**
             * @componentProperty {tableTags} ltPropTags
             * @version 3.91.0 
             */

            ltPropTags : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', { default : default_values.tags || { table : "lyte-table-structure", thead : "lyte-thead", tbody : "lyte-tbody", td : "lyte-td", th : "lyte-th", tr : "lyte-tr" } } ),

            ltPropSortable : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean' , { default : default_values.sortable || false }),

            ltPropContainment : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string' , { default : default_values.containment || '' }),

            lyteUnbound: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', { default: false }),

            ltPropFromListview : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean' , {default : false} ),

            /**
             * @componentProperty {boolean} ltPropFixResizeCursor=false
             * @version 3.95.0
             */

            ltPropFixResizeCursor : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { default : default_values.fixResizeCursor || false } ),

            // system data
            columns: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('array', { 'default': [] }),
            nonFixedColumn: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('array', { 'default': [] }),
            minWidth1: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': '' }),
            minWidth2: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', { 'default': '' }),
            secondaryData: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('array', { 'default': [] }),
            boundary: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object', { 'default': {} }),
            rowHeights: (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('array', { 'default': [] }),
            fromListView : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { default : false } )
        }), arg1);
    }

    resize_fun(evt) {
        var isTch = evt.type == "touchstart",
        __evt = evt,
        touches = evt.touches;

        if( isTch ){
            if( touches.length > 1 ){
                return;
            }
            __evt = touches[ 0 ];
        }

        evt.preventDefault();

        var __this = this,
        __bcr = __this.__bcr,
        __elem = __this.__elem,
        x_inc = ( __this.__clientX - ( __this.__clientX = __evt.clientX ) ) * ( __this._dir ? -1 : 1 ),
        y_inc = __this.__clientY - ( __this.__clientY = __evt.clientY ),
        original_x_inc = x_inc,
        __min1 = __this.__min1,
        __min2 = __this.__min2,
        __max1 = __this.__max1,
        __max2 = __this.__max2,
        __width = parseFloat( __elem.style.width ),
        new_width = __width - x_inc,
        new_height,
        __next = __elem.nextElementSibling,
        new_width2,
        cb = "onResizeMove",
        table = __this.__table,
        __resize = __this.data.ltPropResize,
        __dir = __this.__dir,
        is_hgt_modify = /vert|both/i.test( __dir || '' ),
        $node = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __this.$node );

        if( __dir ){
            if( !__resize.horizontal ){
                x_inc = 0;
            }

            if( !__resize.vertical ){
                y_inc = 0;
            }
        }

        if( __max1 && new_width > __max1 ){
            x_inc = __max1 - __width;
        } else if( __min1 && new_width < __min1 ){
            x_inc = __width - __min1;
        }

        if( !is_hgt_modify && __min2 != void 0 ){
            var __width2 = parseFloat( __next.style.width ),

            new_width2 = __width2 + x_inc;

            if( __max2 && new_width2 > __max2 ){
                x_inc = __width2 - __max2;
            } else if( __min2 && new_width2 < __min2 ){
                x_inc = __min2 - __width2;
            }

            new_width2 = __width2 + x_inc;
        } else {
            __next = void 0;
        }

        if( is_hgt_modify ){
            var __height = parseFloat( __elem.style.height );
            new_height = __height - y_inc;

            if( __max2 && new_height > __max2 ){
                y_inc = __max1 - __height;
            } else if( __min2 && new_height < __min2 ){
                y_inc = __height - __min2;
            }

            new_height = __height - y_inc;
        }

        if( original_x_inc && __this.data.ltPropFixResizeCursor && /lyte-th/i.test( __elem.tagName ) ){
            var __diff = original_x_inc - x_inc,
            trans_value = __this.__trans_value;

            if( __diff ){
                __this.__trans_value += __diff;
            } else if( trans_value ) {
                if( ( trans_value > 0 && x_inc < 0 ) || ( trans_value < 0 &&  x_inc > 0 ) ){
                    if( __next ){
                        new_width2 -= x_inc;
                    }

                    if( Math.abs( trans_value ) < Math.abs( x_inc ) ){
                        x_inc += trans_value;
                        __this.__trans_value = 0;
                    } else {
                        __this.__trans_value += x_inc;
                        x_inc = 0;
                    }
                }
            }
        }

        new_width = __width - x_inc;

        if( table ){
           _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( table ).css( 'width', ( parseFloat( table.style.width ) - x_inc ) + 'px' );

        } 

        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __elem ).css( 'width', new_width + 'px' );
        __next && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __next ).css( 'width', new_width2 + 'px' );

        if( __dir ){
            var ret = $node.css( 'maxWidth', new_width + 'px' );
            if( new_height ){
                ret.css( 'maxHeight', new_height + 'px' );
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __elem ).css( 'height', new_height + 'px' );
            }
        }

        window.cancelAnimationFrame( __this._reqId );
        delete __this._reqId;

        __this.horiScroll( evt, __this.__ww );

        __this.data.ltPropStickyTable && __this._setLeftForInterSection();

        __this.getMethods( cb ) && __this.executeMethod( cb, __elem, evt, __this.$node );
    }

    resize_up(evt) {
        var isTch = evt.touches,
        __doc = document,
        __fn = 'removeEventListener',
        cb = 'onResizeEnd',
        __elem = this.__elem;

        __doc[ __fn ]( isTch ? 'touchmove' : 'mousemove', this.__mmove, true );
        __doc[ __fn ]( isTch ? 'touchend' : 'mouseup', this.__mup, true );

        [ '__dir', '__ww', '__min2', '__min1', '__max1', '__max2', '__clientX', '__clientY', '__elem', '__bcr', '__table' ].forEach( function( item ){
            delete this[ item ];
        }.bind( this ) );

        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( this.$node ).removeClass( 'resizing lyteTableResizing' );
        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __elem ).removeClass( 'resizeSelect lyteTableResizeSelect' );

        this.clearfdm();

        /**
         * @method onResizeEnd
         * @version 1.0.3
         */

        this.getMethods( cb ) && this.executeMethod( cb, __elem, this.$node, evt );
    }

    static actions(arg1) {
        return Object.assign(super.actions({

            tableResize : function( evt, from ){
                var isTch = evt.type == "touchstart",
                __evt = evt,
                touches = evt.touches;

                if( isTch ){
                    if( touches.length > 1 ){
                        return
                    }
                    __evt = touches[ 0 ];
                }

                var  __this = this,
                __data = __this.data,
                __tags = __data.ltPropTags,
                table = __this.$node.getElementsByTagName( __tags.table )[ 0 ],
                __elem = from ? table : evt.target.parentNode,
                cb = "onBeforeResizeSelect";

                if( __this.getMethods( cb ) && __this.executeMethod( cb, __elem, evt, __this.$node ) == false ){
                    return;
                }

                var tag = __elem.tagName,
                is_dual = __data.ltPropDualResize,
                fastdom = (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom),
                __maxwidth = table.style.maxWidth,
                __minWidth = table.style.minWidth,
                __maxheight = table.style.maxHeight,
                __layout = table.style.tableLayout,
                $table = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( table ),
                __width = __elem.offsetWidth,
                is_cell = tag.toLowerCase() == __tags.th,
                nextelem = is_cell ? __elem.nextElementSibling : void 0,
                __next_width = nextelem ? nextelem.offsetWidth : 0,
                table_width = table.offsetWidth,
                scroll_elem = __this.scrollDiv,
                sL = scroll_elem.scrollLeft,
                is_vert = /vert|both/i.test( from || '' ),
                table_height = is_vert ? ( table.offsetHeight + 'px' ): table.style.height,
                $$node = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __this.$node ),
                table_style = window.getComputedStyle( table ),
                is_fixed = table_style.tableLayout == "fixed",
                read_value = table_style.getPropertyValue( 'max-width' ),
                max_width_read = is_cell || (  /px/i.test( read_value ) ? parseFloat( read_value ) : Infinity );

                __this.__ignore_scroll = true;

                __this.__bcr = __this.$node.getBoundingClientRect();
                __this.__ww = window.innerWidth;
                __this.__dir = from;

                __this.__trans_value = 0;

                if( is_cell && /%|px/i.test( table_style.minWidth ) ){
                    var __arr = [];

                    Array.from( __this.get_children( __elem.parentNode ) ).forEach( function( item ){
                        __arr.push({
                            node : item,
                            width : item.style.width || ( item.offsetWidth + 'px' )
                        });
                    });

                    __arr.forEach( function( item ){
                        item.node.style.width = item.width;
                    });
                }

                $table.css( {
                    maxWidth :  '0px',
                    tableLayout : "auto",
                    minWidth : "auto"
                });

                if( is_vert ){
                    $table.css( 'maxHeight', '0px' );
                }

                $$node.addClass( 'lyteTableInitialResize' );

                __this.__fd1 = fastdom.measure( function(){
                    var __style = window.getComputedStyle( __elem ),
                    actual_min = parseFloat( __style.getPropertyValue( 'min-width' ) ),
                    minWidth1 = Math.min( __width, Math.max( __elem.offsetWidth, actual_min ) ),
                    maxWidth1 = is_cell ? parseFloat( __style.getPropertyValue( 'max-width' ) ) : max_width_read,
                    minWidth2,
                    maxWidth2;

                    if( minWidth1 == 0 ){
                        minWidth1 = 50;
                    }

                    if( is_cell && is_fixed ){
                        minWidth1 = Math.min( minWidth1, actual_min );
                    }

                    if( maxWidth1 < minWidth1 ){
                        maxWidth1 = minWidth1;
                    }

                    if( is_cell ){
                        if( !is_dual ){
                            if( nextelem ){
                                var next_style = window.getComputedStyle( nextelem ),
                                actual_min_next = parseFloat( next_style.getPropertyValue( 'min-width' ) );

                                minWidth2 = Math.min( __next_width, Math.max( nextelem.offsetWidth, actual_min_next ) );
                                maxWidth2 = parseFloat( next_style.getPropertyValue( 'max-width' ) );

                                if( minWidth2 == 0 ){
                                    minWidth2 = 50;
                                }

                                if( is_fixed ){
                                    minWidth2 = Math.min( minWidth2, actual_min_next );
                                }

                                if( maxWidth2 < minWidth2 ){
                                    maxWidth2 = minWidth2;
                                }
                            }
                        } else {
                            __this.__table = table;
                        }
                    } else if( is_vert ){
                        maxWidth2 = parseFloat( __style.getPropertyValue( 'max-height' ) );
                        minWidth2 = parseFloat( __style.getPropertyValue( 'min-height' ) );
                    }

                    __this.__fd2 = fastdom.mutate( function(){
                        __this.__min1 = minWidth1;
                        __this.__min2 = minWidth2;
                        __this.__max1 = maxWidth1;
                        __this.__max2 = maxWidth2;

                        __this.__clientX = __evt.clientX;
                        __this.__clientY = __evt.clientY;

                        __this.__elem = __elem;

                        $table.css( {
                            maxWidth : __maxwidth,
                            width : table_width + 'px',
                            maxHeight : __maxheight,
                            height : table_height,
                            tableLayout : __layout,
                            minWidth : __minWidth
                        });

                        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __elem ).addClass( 'resizeSelect lyteTableResizeSelect' ).css( 'width', __width + 'px' );
                        nextelem && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( nextelem ).css( 'width', __next_width + 'px' );

                        delete __this.__ignore_scroll;
                        scroll_elem.scrollLeft = sL;

                        var __doc = document,
                        __fn = "addEventListener";

                        __doc[ __fn ]( isTch ? 'touchmove' : "mousemove", __this.__mmove = __this.resize_fun.bind( __this ), true );
                        __doc[ __fn ]( isTch ? 'touchend' : "mouseup", __this.__mup = __this.resize_up.bind( __this ), true );

                        $$node.addClass( 'resizing lyteTableResizing' ).removeClass( 'lyteTableInitialResize' );

                        __this.getMethods( cb = "onResizeSelect" ) && __this.executeMethod( cb, __elem, evt, __this.$node );
                    });
                });


                evt.preventDefault();
                evt.stopPropagation();
                evt.stopImmediatePropagation();
            },

            rowMouseDown : function( evt ){
                if( this.data.ltPropSortable && (evt.button == 0 || (evt.touches && evt.touches.length==1) ) ){      
                        this.rowMouseDown( evt );
                }
            }
            
        }), arg1);
    }

    clearfdm() {
        var __fastdom = (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom);

        [ '__fd1', '__fd2' ].forEach( function( item ){
            var __cur = this[ item ];

            if( __cur ){
                __fastdom.clear( __cur );
                delete this[ item ];
            }
        }.bind( this ) );
    }

    arrayFrom(nodeList) {
        if (Array.from) {
            return Array.from(nodeList)
        }
        return Array.apply(Array, nodeList);
    }

    closestFind(path, query) {
        var elements = this.arrayFrom.call(this, document.querySelectorAll(query));
        for (var i = 0; i < path.length; i++) {
            if (Array.prototype.indexOf.call(elements, path[i]) != -1) {
                return path[i];
            }
        }
        return null;
    }

    findDomIndex(order) {
        var data = this.data.ltPropData;
        for (var i = 0; i < data.length; i++) {
            if (data[i].index == order) {
                return i;
            }
        }
        return -1;
    }

    insertRow(index, insertData) {
        var boundary = this._boundary,
            top = boundary.top,
            bottom = boundary.bottom,
            content = this.data.ltPropContent,
            data = this.data.ltPropData,
            _contentLength = this.data.ltPropContentLength;

        this._prevent = true;

        this.$addon.arrayUtils(content, 'insertAt', index, insertData);

        if (index <= bottom) {
            var start = Math.max(top, index);

            for (var i = start; i <= bottom; i++) {
                var domIndex = this.findDomIndex(i);
                this.$component.set(data[domIndex], { index: data[domIndex].index, body: content[i] });
            }
        }

        if( this.data.ltPropContentLength > content.length || this.data.ltPropContentLength > data.length ) {
            var _length = data.length;

            this.$addon.arrayUtils( data, 'push', {
                index : _length,
                body : content[ _length ],
                checked : false
            });

            boundary.bottom++;
            this._bottom++;

            if( this._rowHgt ){
                this._step = this._rowHgt * data.length;
            }
        }

        delete this._prevent;
    }

    removeRow(dataIndex) {
        var tags = this.data.ltPropTags,
        rows = this.arrayFrom(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( tags.tbody + ' ' + tags.tr + ':not(.dummy)', this.$node));

        if (dataIndex.constructor != Number) {
            dataIndex = dataIndex.dataOrder || rows.indexOf(dataIndex);
        }

        var domIndex = this.findDomIndex(dataIndex),
            boundary = this._boundary,
            top = boundary.top,
            bottom = boundary.bottom,
            content = this.data.ltPropContent,
            data = this.data.ltPropData,
            removed = false;

        this._prevent = true;

        if (domIndex != -1) {
            if (bottom == content.length - 1) {
                for (var i = dataIndex; i <= bottom; i++) {
                    var cIndex = (domIndex + (i - dataIndex) + data.length) % data.length;
                    if (i + 1 == content.length) {
                        this.regex(rows[cIndex], true);

                        if ( this._dummy ) {
                            var _style = this._dummy.style;
                            _style.transform = 'translateY(' + ( parseFloat( _style.transform.match( /[\d|.]+/ig)[ 0 ] ) - this._rowHgt ) + 'px)';
                            
                            if ( this._dummy1 ) {
                                var _style1 = this._dummy1.style;
                                _style1.transform = 'translateY(' + ( parseFloat( _style1.transform.match( /[\d|.]+/ig)[ 0 ] ) - this._rowHgt ) + 'px)';
                            }
                        }
                        if( content[ top - 1 ] ){
                            set(data[cIndex], { index: data[cIndex].index, body: content[top - 1] });
                            rows[ cIndex ].dataOrder = top - 1;
                        }
                    } else {
                        set(data[cIndex], { index: data[cIndex].index, body: content[i + 1] });
                        rows[cIndex].dataOrder--;
                    }
                }
                if( content.length - 1 == data.length - 1 ){
                    this.$addon.arrayUtils( data , 'pop' );
                    removed = true;
                }else if( boundary.top >= dataIndex){
                    boundary.top--;
                } 
                if(this._top != 0){
                    this._top = (this._top -1 + data.length) % data.length;
                }
                this._bottom = (this._bottom - 1 + data.length) % data.length;
                boundary.bottom--;
                boundary.top!=0 && boundary.top--;
 
            } else {
                for (var i = dataIndex; i <= bottom; i++) {
                    var cIndex = (domIndex + (i - dataIndex) + data.length) % data.length;
                    set(data[cIndex], { index: data[cIndex].index, body: content[i + 1] });
                }
                if (this._dummy) {
                    var _style = this._dummy.style;
                    _style.height = Math.max( 0, parseFloat( _style.height ) - this._rowHgt ) + 'px';
                }
            }
            this.$addon.arrayUtils(content, 'removeAt', dataIndex);
        } else {
            this.$addon.arrayUtils(content, 'removeAt', dataIndex);
            if (dataIndex < top) {

                for (var i = top; i <= bottom; i++) {
                    var cIndex = (this._top + i - top + rows.length) % rows.length;
                    set(data[cIndex], { index: data[cIndex].index, body: content[i == content.length ? (top - 1) : i] });
                    if (i == bottom) {
                        this.regex(rows[cIndex], true);
                        this._bottom = (this._bottom - 1 + data.length) % data.length;
                        this._top = (this._top - 1 + data.length) % data.length;
                    }
                }

                boundary.bottom--;
                boundary.top--;

                var _style = this._dummy.style;
                _style.transform = 'translateY(' + Math.max( 0, ( parseFloat( _style.transform.match(/[\d|.]+/ig)[ 0 ] ) - this._rowHgt ) ) + 'px)';
                if (this._dummy1) {

                    var _style1 = this._dummy1.style;
                    _style1.transform = 'translateY(' + Math.max( 0, ( parseFloat( _style1.transform.match( /[\d|.]+/ig )[ 0 ] ) - this._rowHgt ) ) + 'px)';
                }

            } else if (dataIndex > bottom) {
                if (this._dummy) {
                    this._dummy.style.height = Math.max(0, parseFloat(this._dummy.style.height) - this._rowHgt) + 'px';
                }
            }

            if( content.length < this.data.ltPropContentLength && !removed ){
                    Lyte.arrayUtils( data, 'pop' );
            }
        }

        delete this._prevent;
    }

    scrollToRecord(rowIndex, isImmediate, scrollTop) {
        var content = this.data.ltPropContent,
            contentLength = content.length;

        if (rowIndex == undefined || rowIndex < 0 || rowIndex >= contentLength) {
            return;
        }

        if (!this._rowHgt) {
            this.$node.scrollTable();
        }

        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.clear(this._scrollToRecord);

        isImmediate ? this.processScrollToRecord( rowIndex , scrollTop ) : this._scrollToRecord = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.measure(this.processScrollToRecord.bind(this, rowIndex));

        // this.processScrollToRecord( rowIndex );
    }

    processScrollToRecord(rowIndex, _scrollTop) {
        var boundary = this._boundary,
        top = boundary.top,
        bottom = boundary.bottom,
        content = this.data.ltPropContent,
        data = this.data.ltPropData,
        contentLength = data.length,
        __length = content.length,
        step = this._step,
        rowHeight = this._rowHgt,
        scrollDiv = this.scrollDiv,
        offsetHeight = scrollDiv.offsetHeight,
        scrollHeight = scrollDiv.scrollHeight,
        scrollTop = scrollDiv.scrollTop,
        possible_per_view = Math.floor( offsetHeight / rowHeight ),
        scrollPosition = Math.max(0, Math.min(rowIndex, __length - Math.min( contentLength, possible_per_view ) ) ),
        newScrollTop = scrollPosition * rowHeight,
        scrollToSet,
        __tags = this.data.ltPropTags;

        if( content.length <= contentLength ){
            scrollToSet = Math.max( 0, Math.min( scrollHeight - offsetHeight, rowIndex * rowHeight ) );
        } else if( bottom - possible_per_view >= rowIndex ) {
            scrollToSet = newScrollTop;
        } else {
            if (scrollPosition != rowIndex) {
                newScrollTop += (step - offsetHeight);
                var thead = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __tags.thead, this.$node).get(0);
                if (thead) {
                    newScrollTop += thead.offsetHeight;
                }
            }

            var scrollHeight = scrollDiv.scrollHeight,
            maxScrollTop = scrollHeight - offsetHeight,
            diff = step - offsetHeight,
            rows = this.arrayFrom(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __tags.tbody + ' ' + __tags.tr + ':not(.dummy)', this.$node)),
            fact = Math.floor(scrollPosition / contentLength),
            newscrollPosition = scrollPosition % contentLength;

            for (var i = 0; i < contentLength; i++) {
                var cIndex = scrollPosition + i,
                domIndex = cIndex % contentLength,
                dom = rows[ domIndex ],
                iteration = fact /*+ (i < newscrollPosition ? 1 : 0)*/;

                if( cIndex >= __length ){
                    if( scrollPosition % contentLength < domIndex ){
                        iteration--;
                    }
                    cIndex -= contentLength;
                } else {
                    if( scrollPosition % contentLength > domIndex ){
                        iteration++;
                    }
                }

                set(data[domIndex], { index: cIndex, body: content[cIndex] });

                this.cellSet(dom, "translateY(0px)")
                for (var j = 0; j < iteration; j++) {
                    this.regex(dom);
                }
            }

            if( !this._dummy ){
                this.createDummy( this.$node.querySelector( __tags.tbody ) );
            }

            var boundary_top = Math.min( scrollPosition, __length - contentLength );

            this._dummy.style.transform = 'translateY(' + ( boundary_top * rowHeight ) + 'px)';
            if (this._dummy1) {
                this._dummy1.style.transform = 'translateY(' + ( boundary_top * rowHeight) + 'px)';
            }
            scrollToSet = newScrollTop;
            boundary.top = boundary_top;
            boundary.bottom = boundary_top + contentLength - 1;
            this._top = boundary_top % contentLength;
            this._bottom = ( boundary_top + contentLength - 1) % contentLength;
        }

        var scrollFn = function (  ) {
            scrollDiv.querySelector( 'lyte-table-structure' ).style.height = ( contentLength * rowHeight ) + 'px';
            scrollDiv.scrollTop = scrollToSet;
        }
        if( _scrollTop != void 0 ){
            scrollToSet = _scrollTop;
            scrollFn();
        }else{
            window.requestAnimationFrame( scrollFn );
        }
        
    }

    calculateRowHeight() {
        let tbody = this.$node.getElementsByTagName( this.data.ltPropTags.tbody );
        let tr = tbody[0].children[0];
        let rowHeight = tr && tr.getBoundingClientRect().height;

        return this._rowHgt = rowHeight;
    }

    update_aria(cell) {
        var row = cell.parentNode,
        index = this.get_children( row ).indexOf( cell ),
        table = row.parentNode.parentNode,
        sA = "setAttribute",
        role = "role",
        __tags = this.data.ltPropTags;

        table[ sA ]( role, this.data.ltPropRole );
        
        Array.from( this.get_children( table ) ).forEach( function( item ){

            if( /^div$/i.test( item.tagName || "" ) ){
                return;
            }

            item[ sA ]( role, "rowgroup" );

            var name = item.tagName.toLowerCase() == __tags.thead ? 'columnheader' : 'cell';

            Array.from( this.get_children( item ) ).forEach( function( row ){
                row[ sA ]( role, 'row' );

                var __cell = this.get_children( row )[ index ];

                if( __cell ){
                    __cell[ sA ]( role, name );
                }
            }.bind( this ) );
        }.bind( this ) );
    }

    get_children(__elem) {
        var elems = __elem.length != void 0 ? Array.from( __elem ) : [ __elem ],
        ret = [];

        elems.forEach( function( item ){
            Array.from( item.children ).forEach( function( __item ){
                if( !/template/i.test( __item.tagName ) ){
                    ret.push( __item );
                }
            });
        });

        return ret;
    }

    get_nth_cell(row, index) {
        var children = this.get_children( row ),
        __len = children.length,
        __count = 0;

        if( this.data.ltPropFromListview ){
            return children[ index ];
        }
        for( var i = 0; i < __len; i++ ){
            var __cell = children[ i ];
            if( __count == index ){
                return __cell;
            } else if( __count > index ){
                break;
            }

            __count += ( __cell.colSpan || 1 );
        }
    }

    update_collapse(frm_update) {
        if( this.__from_collapse ){
            return;
        }
        var cells = Array.from( this.$node.getElementsByClassName( 'lyteHeaderCellCollapsed' ) );
        cells.forEach( function( item ){
            this.toggle_column( item, true, frm_update );
        });
    }

    toggle_column(__cell, to_collapse, frm_update) {
        var __index = Array.from( __cell.parentNode.children ).indexOf( __cell ),
        header_cls = "lyteHeaderCellCollapsed",
        body_cls = "lyteCellCollapsed",
        tbody = this.$node.getElementsByTagName( this.data.ltPropTags.tbody ),
        rows = this.get_children( tbody ),
        __is_sticky = this.data.ltPropStickyTable;

        __cell.classList[ to_collapse ? 'add' : "remove" ]( header_cls );

        rows.forEach( function( item, index ){
            var __elem = this.get_nth_cell( item, __index );

            if( __elem ){
                if( !index ){
                    if( to_collapse ){
                        __elem.rowSpan = rows.length;
                    } else {
                        __elem.rowSpan = 1;
                    }
                    __elem.classList[ to_collapse ? "add" : "remove" ]( "lyteCollapseFirstCell" );
                }

                __elem.classList[ to_collapse ? "add" : "remove" ]( body_cls );
            }
        }.bind( this ) );

        if( !this.__from_collapse && !frm_update && ( __is_sticky || __cell.classList.contains( 'lyteTableFixed' ) ) ){
            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.clear( this.__collpse_fdom );
            this.__from_collapse = true;
            this.__collpse_fdom = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default().fastdom.measure( function(){
                delete this.__collpse_fdom;
                this.$node[ __is_sticky ? "reset" : "scrollTable" ]();
                delete this.__from_collapse;
            }.bind( this ) );
        }
    }

    collapse_column(__cell) {
        this.toggle_column( __cell, true );
    }

    expand_column(__cell) {
        this.toggle_column( __cell );
    }

    static observers(arg1) {
        return Object.assign(super.observers({
            initProcess1 : function( arg ){
                var __this = this,
                __data = __this.data,
                is_reset = arg && arg.item == "ltPropReset";

                if( __this._prevent ){
                    return
                }

                if( is_reset && arg.newValue == false ){
                    return;
                }

                if( __data.ltPropInfiniteScroll ){
                    var table = __this.$node.getElementsByTagName( __data.ltPropTags.table )[ 0 ],
                    content = __data.ltPropContent || [],
                    __length = content.length,
                    len = Math.min( __data.ltPropContentLength || __length, __length ),
                    data = [];

                    if( __length == 0 && !arg ){
                        return;
                    }

                    if( table ){
                        table.style.height = "auto";
                    }

                    for( var i = 0; i < len; i++ ){
                        data[ i ] = {
                            body : content[ i ],
                            checked : false,
                            index : i
                        };
                    }

                    if( __data.fromListView ){
                        var act_data = __data.ltPropData,
                        arr_util = this.$addon.arrayUtils,
                        obj_util = this.$addon.objectUtils;

                        data.forEach( function( item, index ){
                            var __cur = act_data[ index ];

                            if( __cur ){
                                obj_util( __cur, 'add', 'body', item.body );
                                obj_util( __cur, 'add', 'index', item.index );
                                obj_util( __cur, 'add', 'checked', item.checked );
                            }else {
                                arr_util( act_data, 'insertAt', item.index, item );
                            }
                        });

                        arr_util( act_data, 'splice', data.length, act_data.length - data.length );

                    } else {
                        this.setData( 'ltPropData', data );
                    }

                    var __dummy = __this._dummy,
                    __dummy1 = __this._dummy1,
                    __scrolldiv = __this.scrollDiv,
                    __translate = "translateY(0px)";

                    delete __this._stopScroll;

                    if( arg ){
                        __dummy && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __dummy ).css({
                            height : 0,
                            transform : __translate
                        });

                        __dummy1 && _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __dummy1 ).css( 'transform', __translate );

                        __scrolldiv.scrollTop = 0;
                        __scrolldiv.scrollLeft = 0;
                    }

                    __this._boundary = {
                        top : __this._top = 0,
                        bottom : __this._bottom = Math.max( len - 1, 0 )
                    };
                }

                if( is_reset ){
                    this.setData( arg.item, false );
                }
            }.observes( 'ltPropContent.[]', 'ltPropReset' ).on( 'init' ),

            // border 

            borderChangeObs: function () {
                this.borderChange.call(this);
            }.observes('ltPropBorder').on('didConnect'),

            widthObsObs: function () {
                this.widthObs.call(this);
            }.observes('ltPropWidth').on('didConnect'),

            heightObsObs: function () {
                this.heightObs.call(this);
            }.observes('ltPropHeight').on('didConnect'),

            sortableObs: function () {
                !this.data.ltPropStickyTable && this.sortable();
            }.observes('ltPropColumnSortable').on('didConnect')
        }), arg1);
    }

    includes() {
        return [_node_modules_zoho_lyte_ui_component_mixins_lyte_table_utils_js__WEBPACK_IMPORTED_MODULE_3__.LyteTableUtilsMixin, _node_modules_zoho_lyte_ui_component_mixins_lyte_table_sortable_js__WEBPACK_IMPORTED_MODULE_2__.LyteTableSortableMixin];
    }

    _() {
        _;
    }
}

LyteTableComponent._template = "<template tag-name=\"lyte-table\"> <div class=\"lyteTableScroll\" onmousedown=\"{{action('rowMouseDown',event)}}\" ontouchstart=\"{{action('rowMouseDown',event)}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropSortable,'&amp;&amp;',ltPropInfiniteScroll)}}\" is=\"case\" lc-id=\"lc_id_0\"> <div class=\"lyteTableSortablePlaceholder lyteTableSortablePlaceholderHidden\"></div> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropYield,'==',false)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-table-structure id=\"{{ltPropId}}\" class=\"{{ltPropClass}}\" role=\"{{ltPropRole}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropHeaderLabelKey}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-colgroup> <template items=\"{{ltPropHeader}}\" item=\"list\" index=\"indexVal\" is=\"for\" _new=\"true\"> <lyte-col></lyte-col> </template> </lyte-colgroup> <lyte-thead role=\"rowgroup\"> <lyte-tr role=\"row\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropHeader.length}}\" is=\"case\" lc-id=\"lc_id_0\"><template items=\"{{ltPropHeader}}\" item=\"list\" index=\"indexVal\" is=\"for\" _new=\"true\"> <lyte-th id=\"{{list.id}}\" class=\"{{list.class}}\" index=\"{{indexVal}}\" resize=\"{{list.resize}}\" fixed=\"{{list.fixed}}\" icon=\"{{list.icon}}\" role=\"columnheader\"> {{unescape(list[ltPropHeaderLabelKey])}} </lyte-th> </template> </template></template> </lyte-tr> </lyte-thead> </template></template> <lyte-tbody role=\"rowgroup\" class=\"{{if(ltPropSortable,'lyteTableWithSortableRow')}}\"> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropInfiniteScroll}}\" is=\"case\" lc-id=\"lc_id_0\"> <template is=\"for\" items=\"{{ltPropData}}\" item=\"list\" index=\"indexVal\"> <lyte-tr id=\"{{list.body.id}}\" class=\"{{list.body.class}}\" role=\"row\" aria-rowindex=\"{{list.index}}\"> <template is=\"for\" items=\"{{ltPropHeader}}\" item=\"header\" index=\"index\"> <lyte-td role=\"cell\" aria-colindex=\"{{index}}\"> <div style=\"height: {{ltPropCellHeight}}\"> {{unescape(lyteUiGetValue(list.body,header[ltPropBodyLabelKey]))}} </div> </lyte-td> </template> </lyte-tr> </template> </template><template default=\"\"> <template is=\"for\" items=\"{{ltPropContent}}\" item=\"list\" index=\"indexVal\"> <lyte-tr id=\"{{list.id}}\" class=\"{{list.class}}\" role=\"row\"> <template is=\"for\" items=\"{{ltPropHeader}}\" item=\"header\" index=\"index\"> <lyte-td role=\"cell\" aria-colindex=\"{{index}}\">{{unescape(lyteUiGetValue(list,header[ltPropBodyLabelKey]))}}</lyte-td> </template> </lyte-tr> </template> </template></template> </lyte-tbody> </lyte-table-structure> </template><template case=\"{{ltPropInfiniteScroll}}\" is=\"case\" lc-id=\"lc_id_1\"> <lyte-yield yield-name=\"yield\" lt-prop-data=\"{{ltPropData}}\"></lyte-yield> </template><template default=\"\"> <lyte-yield yield-name=\"yield\"></lyte-yield> </template></template> </div> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{expHandlers(ltPropResize.vertical,'||',ltPropResize.horizontal)}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-table-resize ontouchstart=\"{{action('tableResize',event,'both')}}\" onmousedown=\"{{action('tableResize',event,'both')}}\"></lyte-table-resize> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropResize.vertical}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-table-vertical-resize ontouchstart=\"{{action('tableResize',event,'vert')}}\" onmousedown=\"{{action('tableResize',event,'vert')}}\"></lyte-table-vertical-resize> </template></template> <template is=\"switch\" l-c=\"true\" _new=\"true\"><template case=\"{{ltPropResize.horizontal}}\" is=\"case\" lc-id=\"lc_id_0\"> <lyte-table-horizontal-resize ontouchstart=\"{{action('tableResize',event,'hori')}}\" onmousedown=\"{{action('tableResize',event,'hori')}}\"></lyte-table-horizontal-resize> </template></template> </template></template> </template>";;
LyteTableComponent._dynamicNodes = [{"t":"a","p":[1]},{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{}},"hd":true,"co":["lc_id_0"],"in":2,"sibl":[1]},{"t":"s","p":[1,3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"s","p":[1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1,1],"cn":"lc_id_0"},{"t":"f","p":[1,1],"dN":[{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":4,"sibl":[3],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":3,"sibl":[2],"cn":"lc_id_0"},{"t":"s","p":[3,1,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[0],"cn":"lc_id_0"},{"t":"f","p":[0],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,1]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"cD","p":[3,1],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[3],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[4,3,2,1,0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":3,"sibl":[2],"cn":"lc_id_0"},{"t":"a","p":[1,3],"cn":"lc_id_0"},{"t":"s","p":[1,3,1],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"f","p":[1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"f","p":[1,1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1],"a":{"style":{"name":"style","helperInfo":{"name":"concat","args":["'height: '","ltPropCellHeight"]}}}},{"t":"tX","p":[1,1,1]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[1,0],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{"dN":[{"t":"a","p":[1],"cn":"default"},{"t":"f","p":[1],"dN":[{"t":"a","p":[1]},{"t":"a","p":[1,1]},{"t":"f","p":[1,1],"dN":[{"t":"a","p":[1]},{"t":"tX","p":[1,0]},{"t":"cD","p":[1],"in":0}],"dc":[0],"hc":true,"trans":true,"in":1,"sibl":[0]},{"t":"cD","p":[1],"in":0}],"dc":[1,0],"hc":true,"trans":true,"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"cD","p":[1,3],"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true},"lc_id_1":{"dN":[{"t":"a","p":[1],"cn":"lc_id_1"},{"t":"i","p":[1],"in":0,"cn":"lc_id_1"}],"cdp":{"t":"a","p":[1]},"dcn":true}},"d":{"dN":[{"t":"i","p":[1],"in":0,"cn":"default"}]},"dc":{"lc_id_0":{"dc":[3,2,1,0],"hc":true,"trans":true},"lc_id_1":{"dc":[0],"hc":true,"trans":true},"default":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0","lc_id_1"],"hc":true,"trans":true,"in":1,"sibl":[0]},{"t":"s","p":[3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":2,"sibl":[1],"cn":"lc_id_0"},{"t":"s","p":[3],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":1,"sibl":[0],"cn":"lc_id_0"},{"t":"s","p":[5],"c":{"lc_id_0":{"dN":[{"t":"a","p":[1],"cn":"lc_id_0"},{"t":"cD","p":[1],"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0,"cn":"lc_id_0"}],"cdp":{"t":"a","p":[0]},"dcn":true}},"d":{},"dc":{"lc_id_0":{"dc":[2,1,0],"hc":true,"trans":true}},"hd":true,"co":["lc_id_0"],"hc":true,"trans":true,"in":0},{"type":"dc","trans":true,"hc":true,"p":[1,0]}];;

LyteTableComponent._observedAttributes = [
    "ltPropContent",
    "ltPropHeader",
    "ltPropId",
    "ltPropClass",
    "ltPropBorder",
    "ltPropHeaderLabelKey",
    "ltPropBodyLabelKey",
    "ltPropWidth",
    "ltPropHeight",
    "ltPropResize",
    "ltPropFixedColumnClass",
    "ltPropYield",
    "ltPropScroll",
    "ltPropColumnSortable",
    "ltPropScrollbarOption",
    "ltPropDualResize",
    "ltPropData",
    "ltPropInfiniteScroll",
    "ltPropCellHeight",
    "ltPropContentLength",
    "ltPropPreventScrollbar",
    "ltPropRole",
    "ltPropStickyTable",
    "ltPropScrollStep",
    "ltPropPreventTableModify",
    "ltPropSortDummyColumClass",
    "ltPropNavigation",
    "ltPropReset",
    "ltPropTags",
    "ltPropSortable",
    "ltPropContainment",
    "lyteUnbound",
    "ltPropFromListview",
    "ltPropFixResizeCursor",
    "columns",
    "nonFixedColumn",
    "minWidth1",
    "minWidth2",
    "secondaryData",
    "boundary",
    "rowHeights",
    "fromListView"
];

if (!window._lyteUiUtils.registeredCustomElements['lyte-th']) {
    window._lyteUiUtils.registeredCustomElements['lyte-th'] = true;

    /**
     * @customElement lyte-th,lyte-td
     */
    class LyteThCustomElements extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry.CustomElements {
        lookups() {
            return [{
                component: _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.LyteUiComponentComponentRegistry
            }];
        }

        constructor() {
            super();
        }

        static get observedAttributes() {
            return [ 'fixed', 'resize', 'icon', 'sticky-position', "collapse" ];
        }

        getTable() {
            var lyteNode = this.$node;
            var query = "lyte-table";
            return (lyteNode.__table || (lyteNode.__table = lyteNode.closest ? lyteNode.closest( query ) : _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( lyteNode ).closest( query ).get( 0 )));
        }

        getSticky() {
            var lyteNode = this;
            var __sticky = lyteNode.__is_sticky;
            return __sticky == void 0 ? ( lyteNode.__is_sticky = lyteNode.getTable().ltProp( 'stickyTable' ) ) : __sticky;
        }

        connectedCallback() {
            var lyteNode = this;
            var table = lyteNode.getTable(),
            $node = lyteNode.$node;

            if( table && table.ltProp( 'role' ) && table.ltProp( 'yield' ) ){
                table.component.update_aria( $node );
            }

            if( $node.parentNode.previousElementSibling ){
                lyteNode.$node.classList.add( "lyteTableSecondaryHeader" );
            }
        }

        attributeChangedCallback(attr, oldVal, newVal) {
            var lyteNode = this.$node;

            var $node = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( lyteNode );

            switch (attr) {
                case 'fixed': {
                    var is_enable = newVal == "enable";

                    $node[ ( is_enable ? 'add' : "remove" ) + 'Class' ]( 'lyteFixedColumn' );
                    if( this.getSticky() ){
                        lyteNode.__table.component.checkIntersection.call( lyteNode, is_enable );
                    }
                }
                    break;
                case 'resize': {
                    var ns = 'lyte-tablehead-resize';
                    if( newVal == "enable" ){
                        var thead = document.createElement( ns ),
                        __add = "addEventListener",
                        fn = this.resize;

                        thead[__add]('mousedown', fn);
                        thead[__add]('touchstart', fn);

                        lyteNode.appendChild( thead );
                    } else {
                        var thead = lyteNode.getElementsByTagName( ns )[ 0 ];
                        if( thead ){
                            lyteNode.removeChild( thead );
                        }
                    }
                }
                break;
                case 'icon' : {
                    $node[ ( newVal == "disable" ? 'add' : "remove" ) + 'Class' ]( 'lytePreventIcon' );
                }
                break;
                case 'sticky-position' : {
                    if( $node.attr( 'fixed' ) == "enable" && this.getSticky() ){
                        var is_enable = newVal == "right",
                        __table = lyteNode.__table.component,
                        fn = is_enable ? 'add' : "remove",
                        __class = 'lyteTableRightFixed';

                        if( !is_enable && !$node.hasClass( __class ) ){
                            return;
                        }   

                        __table.stickyFunction( lyteNode, false, fn + 'Class', __class );
                        __table.checkIntersection.call( lyteNode, is_enable, true );
                    }
                }
                break;
                case 'collapse' : {
                    var __table = this.getTable();

                    if( __table ){
                        if( newVal == "true" ){
                            __table.component.collapse_column( lyteNode );
                        } else if( oldVal == "true" ){
                            __table.component.expand_column( lyteNode );
                        }
                    }
                }
                break;
            }
        }

        resize(event) {
            var lyteNode = this;
            if (lyteNode.parentNode.classList.contains('lyteTableFixed')) {
                return;
            }
            var table = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()(event.target).closest('lyte-table')[0];
            table.component.getActions("tableResize").call(table.component, event);
        }

        disconnectedCallback() {
            var lyteNode = this.$node;
            if( lyteNode.__is_sticky ){
                lyteNode.__table.component.disconnectedCallback.call( lyteNode );
            }
            delete lyteNode.__table;
        }

        _() {
            _;
        }
    }

    LyteThCustomElements.options = {clone : {allCallbacks : false}};

    LyteThCustomElements.register("lyte-th");

    window.resizeTable = function(evt) {
        if (evt && evt.type == 'resize' && _lyteUiUtils.isMobile) {
            return;
        }

        var fn = function( item ){
            var __elem = item.component.scrollDiv,
            $elem = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_4___default()( __elem );
            __elem && $elem.resetScrollbar && $elem.resetScrollbar();
        },
        is_orient = evt && evt.type == "orientationchange";

        Array.from(document.body.getElementsByTagName('lyte-table')).forEach(function (item) {
            if (is_orient) {
                setTimeout(fn.bind(this, item), 500);
            } else {
                fn(item);
            }
        });
    };
}


/**
 * @syntax nonYielded
 *   <lyte-table  lt-prop-content='[{"cityName" : "Agra","serialNo" : "1"},{"cityName" : "Mysore", "serialNo" : "2"}]' lt-prop-header='[{"data" : "From", "bodyData" : "cityName"},{"data" : "No", "bodyData" : "serialNo"}]' lt-prop-header-label-key='data' lt-prop-body-label-key='bodyData' >
 *   </lyte-table>
 */

/**
 * @syntax yielded
 * <lyte-table lt-prop-yield="true">
 *      <template is="registerYield" yield-name="yield">
 *          <lyte-table-structure>
 *             <lyte-thead>
 *                <lyte-tr>
 *                   <lyte-th>From</lyte-th>
 *                   <lyte-th>No</lyte-th>
 *                   <lyte-th>Name</lyte-th>
 *                </lyte-tr>
 *             </lyte-thead>
 *             <lyte-tbody>
 *                <lyte-tr>
 *                   <lyte-td>Agra</lyte-td>
 *                   <lyte-td>1</lyte-td>
 *                   <lyte-td>Tajmahal</lyte-td>
 *                </lyte-tr>
 *                <lyte-tr>
 *                   <lyte-td>Mysore</lyte-td>
 *                   <lyte-td>2</lyte-td>
 *                   <lyte-td>Mysorepalace</lyte-td>
 *                </lyte-tr>
 *             </lyte-tbody>
 *          </lyte-table-structure>
 *      </template>
 *  </lyte-table>
 */

/**
 * @syntax Infinite scroll
 * @attribute ltPropYield=true
 * @attribute ltPropInfiniteScroll=true
 *  <lyte-table style = 'height: 350px;' lt-prop-infinite-scroll = true lt-prop-yield = true lt-prop-content = {{contentJSON}} scroll-end = {{method('someMethod')}}>
 *   <template is = 'registerYield' yield-name = 'yield'>
 *       <lyte-table-structure>
 *           <lyte-thead>
 *               <lyte-tr>
*                  <lyte-th> From </lyte-th>
*                  <lyte-th> No </lyte-th>
*                  <lyte-th> Name </lyte-th>
 *              </lyte-tr>
 *           </lyte-thead>
 *           <lyte-tbody>
 *             <lyte-tr>
 *               <lyte-td> Agra </lyte-td>
 *               <lyte-td> 1 </lyte-td>
 *               <lyte-td> Taj Mahal </lyte-td>
 *             </lyte-tr>
 *              <lyte-tr>
 *               <lyte-td> Mysore </lyte-td>
 *               <lyte-td> 2 </lyte-td>
 *               <lyte-td> Mysore palace </lyte-td>
 *             </lyte-tr>
 *           </lyte-tbody>
 *       </lyte-table-structure>
 *   </template>
 *  </lyte-table>
 */


LyteTableComponent.register("lyte-table", {
    hash: "LyteTableComponent_12",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});
 


/***/ }),

/***/ 30122601:
/*!************************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-tooltip.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteTooltipComponent": () => (/* binding */ LyteTooltipComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
  "prop": function() {
    return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
  },

  "Component": function() {
    return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
  }
});





/**
 * Tooltip is a component used to show information related to an element
 * @component lyte-tooltip
 * @version 1.0.0
 */

/*
  todo =>  // If the tooltip is invoked when the trigger element receives focus, then it is dismissed when it no longer has focus (onBlur). If the tooltip is invoked with mouseIn, then it is dismissed with on mouseOut.

  tooltip animation support

  , re using created tooltip span
*/

class LyteTooltipComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
  constructor() {
    super();
  }

  init() {

    if( this.getMethods( 'beforeRender' ) ){
            /**
             * @method beforeRender
             * @version 1.0.1
             */
            this.executeMethod( 'beforeRender', this.$node );
        }
  }

  rtlfunc(lft, bcr, ww) {
    if( this._dir && lft != 'top' && lft != 'clientY' ) {
      if( bcr ) {
        if( lft == 'right' ) {
          return ww - bcr.left;
        } else if( lft == 'clientX' ) {
          return ww - bcr.clientX;
        }
        return ww - bcr.right;
      } else if( lft == 'left' ) {
        return 'right';
      } else if( lft == 'right' ) {
        return 'left';
      }
    }
    return bcr ? bcr[ lft ] : lft;
  }

  data(arg1) {

    var default_values = window._lyteUiUtils.getDefault( 'lyte-tooltip' );

    return Object.assign(super.data({
      //user data
      /**
       * @componentProperty {string} ltPropId=''
       * @version 1.0.0
       */
      ltPropId : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {default : default_values.id || '' }),
      /**
       * @componentProperty {string} ltPropClass=''
       * @version 1.0.0
       */
      ltPropClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('string', {default : default_values.class || '' }),
      /**
       * @componentProperty {boolean} ltPropKeepAlive=false
       * @version 1.0.0
       */
      ltPropKeepAlive : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean', {default : default_values.keepAlive || false }),
      ltPropKeepAlive : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)("boolean", {default : default_values.keepAlive || false }),

      /**
       * @typedef {object} tooltipConfig
       * @property {left | right | top | bottom | topright | bottomright | topleft | bottomleft | followcursor} position
       * @property {box | callout} appearance=callout
       * @property {number} margin=0
       * @maxValue 20
       * @property {number} showdelay=0
       * @property {number} hidedelay=0
       * @property {number} maxdisplaytime=5000
       * @property {boolean} keeptooltip=false
       * @property {boolean} hideOnClick=true
       */

      /**
       * @componentProperty {tooltipConfig} ltPropTooltipConfig
       * @default {}
       * @version 2.2.20
       */
      ltPropTooltipConfig : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', { default : default_values.tooltipConfig || {} } ),

      /**
       * @componentProperty {string} ltPropIgnoreClass="lyteTooltipIgnore"
       * @version 3.28.2
       **/

      ltPropIgnoreClass : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string', { default : default_values.ignoreClass || "lyteTooltipIgnore" } ),

      /**
       * @componentProperty {boolean} ltPropAria=false
       * @version 3.45.0
       **/

       ltPropAria : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { default : default_values.aria || false } ),

      // system data

      tooltips : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'object', { default : {} } )
    }), arg1);
  }

  focusev(evt) {

    var fastdom = (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom);

    fastdom.mutate( function(){
        this.$node.trigger( evt.type == "focus" ? evt.target : document.body );
    }.bind( this ) );
  }

  didConnect() {

      this._dir = window._lyteUiUtils.getRTL();

      var tooltips = Array.from( document.body.getElementsByTagName( 'lyte-tooltip' ) );

      tooltips.forEach( function( item ){
        if( item != this.$node ){
           document.body.removeChild( item );
        }
      }.bind( this ) );

      this._mousemove = this.mousemove.bind( this );  
      this._mousedown = this.mousedown.bind( this );
      this._mouseup = this.mouseup.bind( this );
      this._keydown = this.keydown.bind( this );
      this._toolscroll = this.tooltipScroll.bind( this );

      document.addEventListener( 'mousemove', this._mousemove, true ); 
      window.addEventListener('scroll', this._toolscroll , true); 
      document.addEventListener( 'keydown', this._keydown, true);
      document.addEventListener( 'mousedown', this._mousedown, true );
      document.addEventListener( 'touchstart', this._mousedown );

      if( this.data.ltPropAria ){
         this.bind_aria();
      }

      if( this.getMethods( 'afterRender' ) ) {
            /**
             * @method afterRender
             * @version 1.0.1
             */
          this.executeMethod('afterRender', this.$node);
      }
      /**
       * @utility trigger
       * @version 3.2.0
       */
      this.$node.trigger = function( node ){
        this.mousemove( { target : node || document.body } );
      }.bind( this )

  }

  bind_aria() {
         this._focusev = this.focusev.bind( this );

         [ 'focus', 'blur' ].forEach( function( item ){
            document.addEventListener( item, this._focusev, true );
         }.bind( this ) );
  }

  remove_aria() {
      [ 'focus', 'blur' ].forEach( function( item ){
         document.removeEventListener( item, this._focusev, true );
      }.bind( this ) );
  }

  tooltipScroll(event) {
    var vis =  this.data.tooltips;

     for( var i in vis ){
        vis[ i ].classList.add( 'lyteTooltipHidden' );
     }
  }

  mousedown(evt) {
      this._mousedownFlag = true;
      var target = evt.target.correspondingElement || evt.target,
      $target = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( target ),
      isTch = /touch/i.test( evt.type );

      if( ( isTch && evt.touches.length > 1 ) ){
          return;
      }

      if( $target.hasClass( 'lyteSliderHandler' ) ){
         delete this.prevTooltipNode;
         this._slider = true;   
      } 

      if( $target.hasClass( 'lyteTooltip' ) ){
         var act_node = target.nodeName1;
         this.hover_process( act_node );
         this.closeAllTooltip( act_node, true );
      } else {
         this.closeAllTooltip( void 0, true );
      }

      if( target.closest( '[draggable=""],[draggable="true"]' ) ){
         delete this._mousedownFlag;
         this.__dragging = true;
      } else {
        delete this.__dragging;
         document.addEventListener( isTch ? 'touchend' : 'mouseup', this._mouseup, true );
      }
  }

  mouseup(evt) {
      delete this._mousedownFlag;
      document.removeEventListener( evt.type, this._mouseup, true );

      if( this._slider ){
         delete this._slider;
         var target = evt.target.correspondingElement || evt.target;

         if( _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( target ).hasClass( 'lyteSliderHandler' ) ){
            this.mousemove( { target : target } );
         }
      }
  }

  keydown(evt) {
     delete  this.prevTooltipNode;
     this.closeAllTooltip();
  }

  tooltipOpenCallback(arg1, arg2) {
      if( arg1.onTooltipShow ) {
          arg1.onTooltipShow.apply(this, arguments)     
      }
      if(this.getMethods( 'onTooltipShow' ) ) {
          /**
           * @method onTooltipShow
           * @version 1.0.2
           */
          this.executeMethod( 'onTooltipShow', arg1, arg2, arg1.tooltip );
      }
  }

  tooltipCloseCallback(arg1) {
      if( arg1.onTooltipHide ) {
          arg1.onTooltipHide.apply(this, arguments)     
      }
     if(this.getMethods( 'onTooltipHide' ) ) {
          /**
           * @method onTooltipHide
           * @version 1.0.2
           */
          this.executeMethod( 'onTooltipHide', arg1 );
      }
  }

  didDestroy() {

        var rel = "removeEventListener",
        doc = document;

        window[ rel ]('scroll', this._toolscroll , true);
        doc[ rel ]('mousemove', this._mousemove, true);
        doc[ rel ]('mousedown', this._mousedown, true);
        doc[ rel ]('touchstart', this._mousedown);
        doc[ rel ]( 'keydown', this._keydown, true );

        if( this.data.ltPropAria ){
           this.remove_aria();
        }
        
        var exsttools = this.data.tooltips;

        for( var i in exsttools ){
          var current = exsttools[ i ];

           delete current.nodeName1.tooltipSpan;
           delete current.nodeName1.tooltip;
           if( current.parentNode ){
            doc.body.removeChild( current );
          }
        }
        delete this.$node.trigger; 

        [ '_toolscroll', '_mousedown', '_keydown', '_mousemove', '_focusev', '__reuse' ].forEach( function( item ){
           delete this[ item ];
        }.bind( this ) );

        this.data.tooltips = []; 
        this.data.tooltips = {};
  }

  propertySetting(nodeName1) {
      var config = nodeName1.getAttribute( 'lt-prop-tooltip-config' ) || '{}',
      __config = nodeName1.tooltip.config;

      // if( config ){
          var config = JSON.parse( config );
          for( var key in config ){
              __config[ key ] = config[ key ];
          }
      // }
  }

  createTooltip(event, span, flag) {
      if( flag ){
         this.followcursor( event, span );
      } else {
         this.nonFollowcursor( event, span );
      }
      if( !this.getData( 'ltPropKeepAlive' ) ){
        var tooltip = span.nodeName1.tooltip;
        if( ( tooltip.config.keeptooltip != true && tooltip.config.keeptooltip != 'true' ) ) {
            tooltip.maxdisp = setTimeout( this.removeTooltip.bind( this, span ) , tooltip.config.maxdisplaytime );
        }
      }
  }

  followcursor(event, span) {
    // here tooltip changes its position on every mousemov. so fastdom can't  be used here
      if( document.body.contains( span ) ){
            // span.innerText = span.nodeName1.tooltip.title; 
            if( !span._callbackHandled ) {
                this.tooltipOpenCallback( span.nodeName1, span );
                span._callbackHandled = true;
            }     
            if( span.classList.contains( 'lyteTooltipHidden' ) ){
              span.classList.remove( 'lyteTooltipHidden' );
              _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.measure( this._followcursor.bind( this, event,span ) );
            } else {
              this._followcursor( event, span );
            }
        }
  }

  _followcursor(evt, span) {
      if( !this.data.tooltips[ span._random ] ){
        return;
      }
      var bcr = span.getBoundingClientRect(),
      nodeBcr = span.nodeName1.getBoundingClientRect(),
      scrollLeft = ( window.pageXOffset || document.documentElement.scrollLeft ) * ( this._dir ? -1 : 1 ),
      scrollTop = window.pageYOffset || document.documentElement.scrollTop,
      iW = window.innerWidth,
      iH = window.innerHeight,
      margin = Math.min( 20, parseInt( span.nodeName1.tooltip.config.margin ) ),
      leftToSet = this.rtlfunc.call( this, 'clientX', evt, iW ),
      topToSet = ( evt.clientY + scrollTop + 5 + margin ),
      topCheck;

      if( leftToSet + bcr.width > iW ){
        if( leftToSet - bcr.width > 0 ){
           leftToSet = leftToSet - bcr.width;
        } else {
          var midFrmRgt = iW - ( this.rtlfunc( 'left', nodeBcr, iW ) + nodeBcr.width / 2 ),
          midFrmLeft = iW - midFrmRgt;

          if( midFrmRgt > bcr.width / 2 && midFrmLeft > bcr.width / 2 ){
              leftToSet = midFrmLeft - bcr.width * 0.5;
          } else {
             leftToSet = Math.max( 0, iW - bcr.width );
          }
          topCheck = true;
        }
      }

      span.style[ this.rtlfunc.call( this, 'left' ) ] = ( leftToSet + scrollLeft ) +'px';
      span.style.top = topToSet + 'px';
      if( topCheck ){
         _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.measure( function(){
            if( !this.data.tooltips[ span._random ] ){
              return;
            }
            bcr = span.getBoundingClientRect();
            if( bcr.bottom > iH ){
               if( evt.clientY > (  iH - evt.clientY ) ){
                  span.style.top = ( evt.clientY - bcr.height - margin - 5 + scrollTop ) + 'px'
               }
            }
         }.bind( this ) )
      }
  }

  createsupp(span) {
     var inn = document.createElement( 'span' );
     inn.classList.add( 'lyteTooltipInnerSpan' );
     span.classList.add( 'lyteInnerToolAdded' );
     return span.appendChild( inn );
  }

  rightalign(
    innWidth,
    xscroll,
    newLeft,
    spanClientRect,
    span,
    prevent,
    event,
    lt,
    cls1,
    cls2,
    ddct,
    divWidth,
    appearance
  ) {
      if( ( innWidth + xscroll ) < ( newLeft + spanClientRect.width ) )
             {
               span.classList.remove( cls1 );
               if( !prevent ){
                  this.nonFollowcursor( event, span, cls2 , true );
                }
               return true
            }
        else{
            if( newLeft < xscroll ){
               if( appearance ){
                  var inn = this.createsupp( span );
                  inn.style[ lt ] = divWidth * .75 - ( ddct ) + 'px';
               }
               span.style[ lt ] = 0;
            } else{
              span.style[ lt ] = newLeft + 'px';
            }
        }
  }

  refresh(evt, span) {
    var tooltip = span.nodeName1.tooltip,
    config = tooltip.config;

    span.textContent = tooltip.title = span.nodeName1.getAttribute( 'lt-prop-title' );

    this.clear_time( tooltip );

    this.createTooltip( evt, span );
  }

  clear_time(tooltip, arr) {
    ( arr || [ 'maxdisp', 'settime', 'bodyTimeout' ] ).forEach( function( item ){
         clearTimeout( tooltip[ item ] );
         delete tooltip[ item ];
    });
  }

  nonFollowcursor(event, span, position, prevent) {
        var appearance = span.nodeName1.tooltip.config.appearance == "callout", dum;
        span.classList.remove( 'lyteTooltipHidden' );
        position = position || span.nodeName1.tooltip.config.position || ( /focus/i.test( ( event.type || 'focus' ) ) ? 'bottom' : "" );
        dum = position || "bottom";
        if( appearance ){
          span.classList.add( "lyte" + dum[ 0 ].toUpperCase() + dum.slice( 1 ) )
        }
        if( !span._callbackHandled ) {
                this.tooltipOpenCallback( span.nodeName1, span );
                span._callbackHandled = true;
            } 
         _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.measure(function(){
              // calculating page off set 
            if(  !( span.nodeName1 || {} ).tooltip ){
              return;
            }
            var xscroll = ( window.pageXOffset || document.documentElement.scrollLeft ) * ( this._dir ? -1 : 1 );
            var yscroll = window.pageYOffset || document.documentElement.scrollTop, innWidth = window.innerWidth,  innHeight= window.innerHeight;  
            var spanClientRect = span.getBoundingClientRect();
            var nodeClientRect = span.nodeName1.getBoundingClientRect();
            var left = this.rtlfunc( 'left', nodeClientRect, innWidth ) + xscroll;
            var topPos = nodeClientRect.top + yscroll;
            var __config = span.nodeName1.tooltip.config,
            margin = Math.min( parseInt( __config.margin ), 20 );
            var toolwid = span.offsetWidth,
            tool_hgt = span.offsetHeight;
            var divWidth = nodeClientRect.width;
            var wid = nodeClientRect.height;
            var lt = this.rtlfunc( 'left' ),
            sty = window.getComputedStyle( span ),
            isContentBox = /content-box/.test( sty.boxSizing ),
            padLeft = isContentBox ? parseFloat( sty.paddingLeft ) : 0,
            padRight = isContentBox ? parseFloat( sty.paddingRight ) : 0,
            padTop = isContentBox ? parseFloat( sty.paddingTop ) : 0,
            padBottom = isContentBox ? parseFloat( sty.paddingBottom ) : 0,
            ddct, calloutstyle,
            $span = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( span );
            if( appearance ) {
                calloutstyle = window.getComputedStyle( span, ':before' );
                ddct = parseFloat( calloutstyle.getPropertyValue( 'width' ) ) / 2 * 1.414;
                if( isNaN( ddct ) || !ddct ) {
                    ddct = parseFloat( window.getComputedStyle( span, position == "left" ? ":before" : ":after" ).getPropertyValue( 'border-left-width' ) )
                }
            } else {
                ddct = 0;
            }
            switch(position.toLowerCase())
              {
                case 'right' :
                 {
                    left += ddct;
                    var newLeft = left + divWidth + margin;
                    span.style.top=( topPos + wid / 2 - tool_hgt / 2 )+'px';
                    if( ( innWidth + xscroll ) < ( newLeft + spanClientRect.width ))
                      {
                         if( !prevent ){
                            if( innWidth - ( left + divWidth - xscroll - ddct ) < ( left - ddct - xscroll ) ){
                                span.classList.remove('lyteRight');
                                this.nonFollowcursor.call( this, event, span,'left', true );
                                break;
                            }
                        }
                        span.style[ lt ] = newLeft + 'px';
                        span.style.width = ( innWidth - newLeft - padLeft - padRight ) + 'px';
                        // span.style.top = this.calculateHeight( spanClientRect, textWid, span, padTop, padBottom ) + 'px';
                        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.mutate( function(){
                          _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.measure( function(){
                              span.style.top = ( topPos + wid / 2 - span.offsetHeight / 2 ) + 'px';
                          })
                        })
                      }
                    else{
                      span.style[ lt ] = newLeft + 'px';
                    }
                    break; 
                 }
                 case 'left' :
                   {
                      left -= ddct;
                      var newLeft = left - margin - toolwid;
                      span.style.top=( topPos + wid / 2 - tool_hgt / 2 ) + 'px';
                      if( newLeft < xscroll )
                        {
                           if( !prevent ){
                               if( left + ddct - xscroll < innWidth - ( left + ddct - xscroll + divWidth ) ){
                                 span.classList.remove('lyteLeft');
                                 this.nonFollowcursor.call(this,event, span,'right', true);
                                 break;
                               }
                            }
                            span.style[ lt ] = 0 + 'px';
                            span.style.width = ( left - xscroll - padLeft - padRight ) + 'px';
                            // span.style.top = this.calculateHeight( spanClientRect, textWid, span, padTop, padBottom ) + 'px';
                             _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.mutate( function(){
                                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.measure( function(){
                                    span.style.top = ( topPos + wid / 2 - span.offsetHeight / 2 ) + 'px';
                                })
                              })
                        }
                      else{
                           span.style[ lt ] = newLeft + 'px';
                      }  
                      break;  
                   }
                case 'bottom' :
                  {
                    topPos += ddct;
                    var newTop = ( topPos + wid + margin ), newLeft = left + divWidth / 2 - toolwid / 2;
                    if( ( yscroll + innHeight ) < ( newTop + tool_hgt ) ) {
                        span.classList.remove('lyteBottom');
                         if( !prevent ){
                            this.nonFollowcursor.call(this,event, span,'top', true);
                            break;
                          }
                    }
                    newLeft = this.horicheck( newLeft, xscroll, innWidth, spanClientRect, span, nodeClientRect, lt, ddct, appearance );
                    span.style[ lt ] = newLeft + 'px';
                    span.style.top = newTop + 'px';     
                    break;  
                  }     
                case 'top' :
                  {
                    topPos -= ddct;
                    var newTop = topPos - margin - tool_hgt, newLeft = left + divWidth / 2 - toolwid / 2;
                    if( newTop < yscroll ) {
                       span.classList.remove('lyteTop');
                        if( !prevent ){
                          this.nonFollowcursor.call(this,event, span,'bottom', true);
                          break;
                        }
                    } 
                    newLeft = this.horicheck( newLeft, xscroll, innWidth, spanClientRect, span, nodeClientRect, lt, ddct, appearance );
                    span.style[ lt ] = newLeft + 'px';
                    // span.style.top = newTop + 'px';   
                    _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.mutate( function(){
                          _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.measure( function(){
                              span.style.top = ( topPos - margin - span.offsetHeight ) + 'px';
                          })
                        })
                    break;     
                  }
                 case 'bottomright' :
                  {
                    topPos += ddct;
                    var newLeft = left + divWidth * .75 - ( appearance ? parseFloat( calloutstyle[ lt ] ) + ddct : 0.2 * toolwid ),
                    newTop = topPos + wid + margin;
                    if( this.rightalign( innWidth, xscroll, newLeft, spanClientRect, span, prevent, event, lt, 'lyteBottomright', 'bottomleft', ddct, divWidth, appearance ) ){
                       $span.removeClass('lyteBottomright');
                       break;
                    }     
                   if( ( innHeight + yscroll ) < ( newTop + spanClientRect.height ) ) 
                       {
                         $span.removeClass('lyteBottomright');
                         if( prevent ){
                            $span.addClass( 'lyteTopright' ).css( 'top', ( topPos - ddct - tool_hgt - margin ) );
                         } else {
                            this.nonFollowcursor( event, span,'topright', true );
                         }
                         break
                       }
                     else{
                        span.style.top = newTop + 'px';
                     }  
                    break; 
                  }
                case 'topright' :
                  {
                    topPos -= ddct;
                    var newLeft = left + divWidth * .75 - ( appearance ? parseFloat( calloutstyle[ lt ] ) + ddct : 0.2 * toolwid ),
                    newTop = topPos - tool_hgt - margin;
                    
                    if( this.rightalign( innWidth, xscroll, newLeft, spanClientRect, span, prevent, event, lt, 'lyteTopright', 'topleft', ddct, divWidth, appearance ) ){
                       $span.removeClass( 'lyteTopright' );
                       break;
                    } 

                    if( newTop < yscroll ){
                       $span.removeClass( 'lyteTopright' );
                       if( prevent ){
                          $span.addClass( 'lyteBottomright' ).css( 'top', topPos + ( 2 * ddct ) + wid + margin );
                       } else {
                          this.nonFollowcursor( event, span, 'bottomright', true );
                       }
                    } else {
                       $span.css( 'top', newTop );
                    }
                    break;     
                 }
                case 'bottomleft' :
                   {
                     topPos += ddct;
                     var newLeft = left + divWidth *.25 - ( appearance ? parseFloat( calloutstyle[ lt ] ) : 0.8 * toolwid ) + 'px',
                     newTop =(topPos+wid+margin)+'px';
                     if(parseInt(newLeft) < xscroll)
                        {
                            span.classList.remove('lyteBottomleft');
                            if( !prevent ){
                                this.nonFollowcursor.call(this,event, span,'bottomright', true);
                            }
                            break;
                        }
                    else{
                        span.style[ lt ] = newLeft;
                    } 
                    if(( innHeight + yscroll ) < ( parseInt( newTop ) + tool_hgt ) )
                        {
                            $span.removeClass( 'lyteBottomleft' );
                            if( prevent ){
                               $span.addClass( 'lyteTopleft' ).css( 'top', ( topPos - ddct - tool_hgt - margin ) );
                            } else {
                              this.nonFollowcursor( event, span, 'topleft', true );
                            }
                            break
                       }
                     else{
                        span.style.top = newTop;
                     } 
                     break; 
                    }
                 case 'topleft' :
                    {
                        topPos -= ddct;
                        var newLeft = left + divWidth *.25 - ( appearance ? parseFloat( calloutstyle[ lt ] ) : 0.8 * toolwid ) + 'px',
                        newTop = ( topPos - tool_hgt - margin )+'px';
                        
                        if(parseInt(newLeft)< xscroll) {
                            $span.removeClass('lyteTopleft');
                            if( prevent ){
                               $span.addClass('lyteTopright').css( lt, left + divWidth * .75 - ( appearance ? parseFloat( calloutstyle[ lt ] ) + ddct : 0.2 * toolwid ) );
                            } else {
                               this.nonFollowcursor( event, span,'topright', true);
                            }
                            break;
                        } else {
                          span.style[ lt ] = newLeft;
                        } 
                        
                        if( parseInt( newTop ) < yscroll ) {   
                            $span.removeClass( 'lyteTopleft' );
                            
                            if( prevent ){
                                $span.addClass( 'lyteBottomleft' ).css( 'top', topPos + wid + margin + 2 * ddct );
                            } else {
                                this.nonFollowcursor( event, span, 'bottomleft', true );
                            }
                            break;
                         } else {
                            $span.css( 'top', newTop );
                         }
                        break;    
                       }
                default:
                   {
                      var tooltop = ddct;
                      var newLeft = this.rtlfunc.call( this, 'clientX', event, innWidth ) - toolwid / 2 + xscroll;
                      var newTop = topPos + tooltop + wid + margin;
                      if( ( innHeight + yscroll ) < ( newTop + tool_hgt ) ) {
                          span.classList.remove('lyteBottom');
                          if( !prevent ){
                            this.nonFollowcursor.call(this,event, span,'top', true);
                            break;
                          }
                       }
                      newLeft = this.horicheck( newLeft, xscroll, innWidth, spanClientRect, span, nodeClientRect, lt, ddct, appearance );
                      span.style[ lt ] = newLeft + 'px';
                      span.style.top = newTop + 'px';   
                   }
                }
               span.style[ this.rtlfunc( 'right' ) ] = 'auto'; 

               var __startclass = __config.startClass,
               __endClass = __config.endClass,
               __animationClass = __config.animationClass;

               if( __startclass ){
                  var $span = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( span ).addClass( __startclass );

                  window.requestAnimationFrame( function(){
                    $span.addClass( __animationClass );
                    window.requestAnimationFrame( function(){
                      window.requestAnimationFrame( function(){
                        $span.addClass( __endClass );
                      });
                    });
                  });
               }
          }.bind(this))
    // }.bind(this))
  }

  horicheck(
    newLeft,
    xscroll,
    innWidth,
    spanClientRect,
    span,
    nodeClientRect,
    lt,
    ddct,
    appearance
  ) {
      var flag, flag2
      if( newLeft < xscroll ){
         newLeft = xscroll;
         flag = true
      }else if( innWidth + xscroll < newLeft + spanClientRect.width ) {
          newLeft = innWidth - spanClientRect.width + xscroll;
          flag2 = true;
      }

       if( ( flag || flag2 ) && appearance ){
         var inn = this.createsupp( span ), nodeleft = this.rtlfunc( 'left', nodeClientRect, innWidth ),
         leftVal;
         if( flag ){
            var lft = this.rtlfunc( 'left', nodeClientRect, innWidth );
            inn.style[ lt ] =  ( Math.min( spanClientRect.width, nodeClientRect.width ) + Math.min( lft , 0 ) )/ 2 + Math.max( 0, lft ) + 'px';
         } else {
            var rgt = innWidth - this.rtlfunc( 'right', nodeClientRect, innWidth );
            inn.style[ lt ] = spanClientRect.width - ( Math.max( 0 , rgt ) + ( Math.min( spanClientRect.width, nodeClientRect.width ) + Math.min( rgt, 0 ) ) / 2 ) + 'px';
         }
      }
      return newLeft
  }

  closeAllTooltip(current, frm_down) {

    var tooltips = this.data.tooltips;

    for( var key in tooltips ){
      var item = tooltips[ key ];
      if( item.nodeName1 != current ){
          var tooltip = item.nodeName1.tooltip;

          if( !tooltip ){
             this.removeTooltip( item );
             continue;
          }

          if( frm_down && !tooltip.config.hideOnClick ){
             continue;
          }

          if( tooltip.bodyTimeout == void 0 ){
            tooltip.bodyTimeout = setTimeout( this.removeTooltip.bind( this ), tooltip.config.hidedelay, item );
          }
      }
    }
  }

  removeTooltip(span) {
        if( span.parentNode == document.body ){
            var node = span.nodeName1;
              
            if( !node ){
               return;
            }

            var tooltip = node.tooltip || {},
            config = tooltip.config || {},
            __endClass = config.endClass || "",
            __reuse = config.reuse,
            fn = function(){
                if( __reuse ){
                  var span_style = span.style;

                  span_style.opacity = "0";
                  span_style.pointerEvents = "none";
                } else {
                  document.body.removeChild( span );
                }
                clearTimeout( span.__animetime );

                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( span ).off( 'transitionend' );
            };

            this.clear_time( tooltip );

            if( this.prevTooltipNode == node ){
               delete this.prevTooltipNode;
            }

            delete node.tooltipSpan;
            delete node.tooltip;
            delete span.nodeName1;

            node.setAttribute( 'aria-expanded', "false" );

             if( __endClass ){
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( span ).removeClass( __endClass ).on( 'transitionend', fn );
                span.__animetime = setTimeout( fn, config.maxAnimationLimit );
             } else {
                fn();
             }

            this.tooltipCloseCallback( node );
            delete this.data.tooltips[ span._random ];
        }
  }

  hover_process(node) {
    var tooltip = ( node || {} ).tooltip;
    if( tooltip ){
        this.clear_time( tooltip );
    }
  }

  mousemove(event) {
        if( this._mousedownFlag ) {
          return
        }

        if( this.__dragging ){
            if( event.buttons ){
              return;
            }
            delete this.__dragging;
        }

        var nodeName1 = event.target.correspondingElement || event.target;

        while(nodeName1 && nodeName1.tagName != 'BODY' && nodeName1 != document && nodeName1.tagName != 'HTML' ){
            
            var title = nodeName1.getAttribute ? nodeName1.getAttribute( 'lt-prop-title' ) : "",
            Jnode = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( nodeName1 );

            if( Jnode.hasClass( 'lyteTooltip' ) ){
              var target_node = nodeName1.nodeName1 || {};
              if( ( ( target_node.tooltip || {} ).config || {} ).hidedelay ){
                this.hover_process( target_node );
                return this.closeAllTooltip( target_node );
              }
            }

            if( Jnode.hasClass( this.data.ltPropIgnoreClass ) ){
                delete this.prevTooltipNode;
                nodeName1 = document.body;
                break;
            }

            if( title ){

                  if( nodeName1.getAttribute( 'title' ) ){
                      nodeName1.removeAttribute( 'title' );
                  }

                  nodeName1.tooltip = nodeName1.tooltip || {};

                  nodeName1.tooltip.config = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().extend( { reuse : false, position : '', appearance : 'callout', margin : 0, showdelay : 0, hidedelay : 0, maxdisplaytime : 5000, keeptooltip : false, aria : false, hideOnClick : true, startClass : "", endClass : "", animationClass : "", maxAnimationLimit : 2000 }, this.data.ltPropTooltipConfig || {} );
                  nodeName1.tooltip.title = title;

                  this.propertySetting( nodeName1 );

                  var tooltip = nodeName1.tooltip,
                  __config = tooltip.config,
                  is_reuse = __config.reuse;

                  if( this.prevTooltipNode != nodeName1 && ( !tooltip.tooltipSpan || is_reuse ) ){
                      this.prevTooltipNode = nodeName1;
                      var is_exist = this.__reuse,
                      is_really_exist = is_reuse && is_exist,
                      span = is_really_exist ? is_exist : document.createElement( 'span' ),
                      Jobj = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( span ),
                      toolclass = Jnode.attr( 'lt-prop-tooltip-class' ),
                      ltPropId = __config.id || this.getData( 'ltPropId' ), 
                      ltPropClass = this.getData( 'ltPropClass' ),
                      randomId = Date.now() + 'lytetooltip';

                      if( is_exist ){
                          this.removeTooltip( span );
                      }

                      this.data.tooltips[ randomId ] = span;
                      span._random = randomId;

                      if( !is_exist ){
                        if( is_reuse ){
                           this.__reuse =  span;
                        }
                      } else {
                        Jobj.attr( 'class', 'lyteTooltip' );
                      }

                      if( ltPropId ) {
                         Jobj.attr( 'id', ltPropId );
                      }
                      if( ltPropClass ) {
                         Jobj.addClass( ltPropClass );
                      }  

                      !is_really_exist && Jobj.addClass( 'lyteTooltip lyteTooltipHidden' );
                      if( this._dir ) {
                         Jobj.addClass( 'lyteRTL' );
                      }

                      Jobj.attr( 'style', Jnode.attr( 'lt-prop-tooltip-style' ) || '' );

                      if( !span.style.borderColor ){ 
                          span.style.borderColor = span.style.backgroundColor;
                      }

                      if( tooltip.config.appearance == 'callout' && tooltip.config.position != "followcursor" ) {
                        Jobj.addClass( 'lyteTooltipCallout' );
                        if( !tooltip.config.hideOnClick ){
                          tooltip.refresh = this.refresh.bind( this );
                        }
                      }

                      tooltip.tooltipSpan = span;
                      span.nodeName1 = nodeName1;
                      
                      Jobj.addClass( toolclass || '' );

                      if( tooltip.config.aria ){
                        var __obj = {
                          role : "tooltip",
                          "aria-hidden" : "false"
                        };
                        Jobj.attr( __obj );

                        nodeName1.setAttribute( 'aria-expanded', 'true' );
                      }

                      tooltip.settime = setTimeout( this.createTooltip.bind( this ), tooltip.config.showdelay, event, span, tooltip.config.position == 'followcursor' );
                      span.textContent = tooltip.title; 

                      !is_really_exist && window._lyteUiUtils.appendChild( document.body, span );
                  } else if( tooltip.config.position == 'followcursor' && this.prevTooltipNode == nodeName1 && tooltip.tooltipSpan ){
                      var span = tooltip.tooltipSpan;

                      _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( span ).css({
                         opacity : "",
                         pointerEvents : ""
                      });

                      this.clear_time( tooltip, [ 'maxdisp', 'settime' ] );

                      if( !span._callbackHandled ){
                        tooltip.settime = setTimeout( this.createTooltip.bind( this ), tooltip.config.showdelay, event, span, true );
                      } else {
                        this.followcursor( event, span );
                      }
                  } else if( tooltip.tooltipSpan && tooltip.tooltipSpan.style.display == 'none' ) {
                      
                      _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( tooltip.tooltipSpan ).css({
                         display : "",
                         opacity : "",
                         pointerEvents : ""
                      });

                      this.clear_time( tooltip );
                      
                      tooltip.settime = setTimeout( this.createTooltip.bind( this ),  tooltip.config.showdelay,event,  tooltip.tooltipSpan,  tooltip.config.position == 'followcursor' );
                  } else {
                      this.prevTooltipNode = nodeName1;
                  } 
                  this.closeAllTooltip( nodeName1 );    
                  break;       
                }
              else {
                nodeName1 = nodeName1.parentNode;
              }  
        }
      if(nodeName1 && ( [ 'BODY', 'HTML' ].indexOf( nodeName1.tagName ) != -1 ) && this.prevTooltipNode != nodeName1 ){
          delete this.prevTooltipNode;
          this.closeAllTooltip();
      } 
  }

  static observers(arg1) {
    return Object.assign(super.observers({
      aria_obs : function( arg ){
          if( arg.newValue ){
             this.bind_aria();
          } else {
             this.remove_aria();
          }
      }.observes( 'ltPropAria' )
    }), arg1);
  }

  _() {
    _;
  }
}

LyteTooltipComponent._template = "<template tag-name=\"lyte-tooltip\"> </template>";;
LyteTooltipComponent._dynamicNodes = [];;

LyteTooltipComponent._observedAttributes = [
  "ltPropId",
  "ltPropClass",
  "ltPropKeepAlive",
  "ltPropTooltipConfig",
  "ltPropIgnoreClass",
  "ltPropAria",
  "tooltips"
];

( function(){
   var doc = document,
   __fn = function(){
      var name = 'lyte-tooltip';

      if( !doc.querySelector( name ) ){
          window._lyteUiUtils.appendChild( doc.body, doc.createElement( name ) );
      }
   };

   if( /complete|interactive/i.test( doc.readyState ) ){
      __fn();
   } else {
      doc.addEventListener( 'DOMContentLoaded', __fn );
   }

})();


/**
 * @syntax nonYielded
 * <lyte-tooltip></lyte-tooltip>
 */


LyteTooltipComponent.register("lyte-tooltip", {
  hash: "LyteTooltipComponent_11",
  refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});


/***/ }),

/***/ 66898968:
/*!*************************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/components/javascript/lyte-wormhole.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteWormholeComponent": () => (/* binding */ LyteWormholeComponent)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 93608996);
/* harmony import */ var _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-ui-component/components/component.js */ 18190573);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "prop": function() {
        return _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop;
    },

    "Component": function() {
        return _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component;
    }
});




/**
 * This component is used to append a dom anywhere in the document
 * @component lyte-wormhole
 * @version 2.2.6
 * @methods onBeforeAppend,onAppend
 */


class LyteWormholeComponent extends _node_modules_zoho_lyte_ui_component_components_component_js__WEBPACK_IMPORTED_MODULE_1__.Component {
    constructor() {
        super();
    }

    data(arg1) {
		return Object.assign(super.data({
			/**
			 * @componentProperty {string} ltPropQuery
			 * @version 2.2.6
			 */
			'ltPropQuery' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'string' ),

			'ltPropAppendOnCreation': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': true } ),

			'ltPropAppend': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)( 'boolean', { 'default': false } ),

			'ltPropShow' : (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean' , {	'default' : false }),

			'ltPropFocusOnClose':  (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('boolean' , {	'default' : false }),

			'stackMap': (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.prop)('object',{ default: {
				'LYTE-MODAL': 'modalStack',
				'LYTE-BETA-MODAL': 'betaModalStack',
				'LYTE-BETA-POPOVER': 'betaPopoverStack',
				'LYTE-POPOVER': 'popoverStack',
				'LYTE-MESSAGEBOX': 'messageboxStack',
				'LYTE-ALERT': 'alertStack',
				'LYTE-COLORBOX': 'colorboxStack'
			}})
		}), arg1);
	}

    didDestroy() {
		var utilObj = this.createUtilObj(this);
		this.handleRemovalFromStack( utilObj );

		this.parent = null;
		if( window._lyteUiUtils && 
				window._lyteUiUtils.popupStack && 
					window._lyteUiUtils.popupStack.globalStack && 
						window._lyteUiUtils.popupStack.globalStack.length <= 0 ){
						
			window._lyteUiUtils.popupStack=null;
		}
	}

    appendContent() {
		var ret, 
		outlet = this.data.ltPropQuery ? document.querySelector( this.data.ltPropQuery ) : document.body;

		if( !outlet ) {
			console.error( 'Provide valid outlet to append' );
			return;
		}

		if( this.getMethods( 'onBeforeAppend' ) && this.executeMethod( 'onBeforeAppend', this.$node, outlet ) == false ) {
			return;
		}
		this.parent = this.$node.parentElement;
		window._lyteUiUtils.appendChild( outlet, this.$node );
		this.appended = true;

		if( this.getMethods( 'onAppend' ) ) {
			this.executeMethod( 'onAppend', this.$node, outlet )
		}
	}

    bringContentBack() {
		window._lyteUiUtils.appendChild( this.parent, this.$node );
	}

    createUtilObj(wormhole) {
		var utilObj={};

		if(wormhole.parent){
			utilObj.parentElement=wormhole.parent;
		} else {
			utilObj.parentElement=wormhole.$node.parentElement;
		}
		utilObj.focusedElement=document.activeElement;
		utilObj.childElement = wormhole.$node;

		return utilObj;
	}

    popUtilObj(utilObj, stackName, wormhole) {
        var lyteSelf = this;
        if( !utilObj || !window._lyteUiUtils || !window._lyteUiUtils.popupStack || !window._lyteUiUtils.popupStack[stackName]){
			return;
		}

        if( window._lyteUiUtils.popupStack[stackName].length>=1){
			window._lyteUiUtils.popupStack[stackName].forEach(function(ele,ind){
					if(ele.parentElement==utilObj.parentElement){
						lyteSelf.$addon.arrayUtils( window._lyteUiUtils.popupStack[stackName], 'removeAt' , ind , 1 );
						return;
					}
			}.bind(wormhole));
		}
    }

    handleInsertionIntoStack(utilObj) {

			if( !utilObj || !utilObj.parentElement || !utilObj.parentElement.tagName ){
				return;
			}
			var tagName = utilObj.parentElement.tagName;
			var stackName = this.getData('stackMap')[tagName];

			this.$addon.arrayUtils( window._lyteUiUtils.popupStack.globalStack, 'push', utilObj);

			if( stackName ){
				this.$addon.arrayUtils( window._lyteUiUtils.popupStack[stackName], 'push', utilObj);
			}
	}

    handleRemovalFromStack(utilObj) {
        var lyteSelf = this;

        if( !window._lyteUiUtils || !window._lyteUiUtils.popupStack || !window._lyteUiUtils.popupStack.globalStack ){
			return;
		}
        if( !utilObj || !utilObj.parentElement || !utilObj.parentElement.tagName ){
			return;
		}

        var tagName = utilObj.parentElement.tagName;
        var stackName = this.getData('stackMap')[tagName];
        var lastActiveElement;

        if(window._lyteUiUtils.popupStack.globalStack.length >= 1){

			if( stackName ){
				this.popUtilObj( utilObj, stackName, this );
			}

			var focusElement, changeFocus=true;
			window._lyteUiUtils.popupStack.globalStack.forEach(function(ele,ind){
				if(ele.parentElement==utilObj.parentElement){
					if(ind<window._lyteUiUtils.popupStack.globalStack.length-1){
						changeFocus=false;
						window._lyteUiUtils.popupStack.globalStack[ind+1].focusedElement =	_lyteUiUtils.popupStack.globalStack[ind].focusedElement;
					}
					focusElement = lyteSelf.$addon.arrayUtils( window._lyteUiUtils.popupStack.globalStack , 'removeAt' , ind , 1 );
					return;
				}
			}.bind(this));

			if(focusElement && focusElement[0]){
				lastActiveElement= focusElement[0].focusedElement;
			}
			if(changeFocus && lastActiveElement && this.getData('ltPropFocusOnClose')){
					lastActiveElement.focus();	
			}
		}
    }

    static observers(arg1) {
        return Object.assign(super.observers({
            initFunc: function() {

                if(!window._lyteUiUtils.popupStack){
                    window._lyteUiUtils.popupStack = {
                        globalStack:[],
                        modalStack:[],
                        betaModalStack:[],
                        betaPopoverStack:[],
                        popoverStack:[],
                        alertStack:[],
                        messageboxStack:[],
                        colorboxStack:[]
                    };
                }

                var utilObj = this.createUtilObj(this);

                if(this.$node.getData('ltPropShow')){
                    this.handleInsertionIntoStack( utilObj );
                }
                else {
                    this.handleRemovalFromStack( utilObj );
                }

            }.observes( 'ltPropQuery','ltPropShow' ).on('init'),

            didConnectFunc :function(){
                var appendOnCreation = this.getData( 'ltPropAppendOnCreation' );

                if( !appendOnCreation ) {
                    return ;
                }

                // this.appendContent();
                this.$node.ltProp( 'append', true );
            }.observes( 'ltPropQuery' ).on( 'didConnect' ),

            appendObserver: function() {
                var append = this.getData( 'ltPropAppend' );

                if( append ) {
                    this.appendContent();
                }
                else {
                    this.bringContentBack();
                }
            }.observes( 'ltPropAppend' )
        }), arg1);
    }

    _() {
        _;
    }
}

LyteWormholeComponent._template = "<template tag-name=\"lyte-wormhole\"> <lyte-yield yield-name=\"lyte-content\"></lyte-yield> </template>";;
LyteWormholeComponent._dynamicNodes = [{"t":"i","p":[1],"in":0},{"type":"dc","trans":true,"hc":true,"p":[0]}];;

LyteWormholeComponent._observedAttributes = [
    "ltPropQuery",
    "ltPropAppendOnCreation",
    "ltPropAppend",
    "ltPropShow",
    "ltPropFocusOnClose",
    "stackMap"
];

/**
 * @syntax yielded
 * <lyte-wormhole>
 * 	  <template is = "registerYield" yield-name = "lyte-content">
 * 		 Some wormhole content
 *	  </template>
 * </lyte-wormhole>
 */



LyteWormholeComponent.register("lyte-wormhole", {
    hash: "LyteWormholeComponent_6",
    refHash: "C_lyte-ui-component_@zoho/lyte-ui-component_2"
});

/***/ }),

/***/ 7168042:
/*!****************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/mixins/lyte-table-sortable.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteTableSortableMixin": () => (/* binding */ LyteTableSortableMixin)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @slyte/core/src/lyte-utils */ 93608996);
/* harmony import */ var _node_modules_slyte_core_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 74260201);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "Mixin": function() {
        return _node_modules_slyte_core_index_js__WEBPACK_IMPORTED_MODULE_1__.Mixin;
    }
});




let LyteTableSortableMixin = (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.createCustomClass)(function(arg1, overrides, LyteTableSortableMixin) {
    class _LyteTableSortableMixin extends (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.getClass)([_node_modules_slyte_core_index_js__WEBPACK_IMPORTED_MODULE_1__.Mixin], arg1, LyteTableSortableMixin) {
        rowMouseDown(evt) {
                     
               var _this = this ,
                   tags = _this.data.ltPropTags,
                   tr = evt.target.closest(tags.tr) , 
                   tbody = tr.closest(tags.tbody);
               if( tbody != void 0 ){
                   var table = tbody.closest('lyte-table'),
                       index = Array.from( tr.parentElement.children ).indexOf( tr ),
                       actual_index = index ,
                       cur_index = actual_index  ,
                       data = _this.data.ltPropData , 
                       isFirst = true , 
                       trTransform = tr.style.transform ,
                       content = _this.data.ltPropContent ,
                       boundary = _this._boundary , 
                       isTouch = Boolean(evt.touches),
                       hasContainment = Boolean(_this.data.ltPropContainment) ,
                       containElem = hasContainment ? _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()(_this.$node).find(_this.data.ltPropContainment)[0] : undefined,
                       containElemClient = containElem != void 0 ? containElem.getBoundingClientRect() : undefined , 
                       placeholder = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()(this.$node).find( '.lyteTableSortablePlaceholder' ).get(0),
                       outOfBound = false, yRelatedToElement , reachedTop , reachedEnd , diff = void 0;

                   if(tr.parentElement.tagName.toLowerCase() == _this.data.ltPropTags.tbody){
                       if( this.getMethods( 'onRowSelect' ) ){
                           let ret = this.executeMethod( 'onRowSelect' , evt  , data[actual_index].index  , actual_index , _this.$node );
                           if( ret === false ){
                               return;
                           }
                       } 

                       evt.preventDefault();

                       placeholder.classList.remove( 'lyteTableSortablePlaceholderHidden' );
                   
                       var findElement = function ( isPrev , isMouseUp ){
                           if( isMouseUp ){
                               let arr = Array.from(tbody.children);
                               for( let i = 0 ; i < arr.length ; i++ ){
                                   let cur = arr[i];
                                   if( cur.classList.contains('lyteTableRowSorting') ){
                                       return i;
                                   }
                               }
                           }else{
                               let curIndex =_this.data.ltPropData[cur_index].index ,
                                   findIndex = isPrev ? getIndex(  curIndex == 0 ? data.length-1 : curIndex - 1 ) :
                                                        curIndex == data.length-1 ? curIndex == content.length-1 ? undefined : 0 : getIndex(curIndex + 1 ),
                                   arr = Array.from( tbody.children );
                               if(findIndex == undefined){
                                   return;
                               }
                               for( let i = 0, j = 0 ; i < arr.length ; i ++ ){
                                   let cur = arr[i];
                                   if( !(cur.classList.contains('dummy')) ){
                                       if( j == findIndex ){
                                           return arr[i];
                                       }
                                       j++
                                   }
                               }
                           }
                       },
                       makeElementDraggable = function(){
                           var width = []
                           Array.from( tr.children ).forEach( function(td){
                               width.push( window.getComputedStyle(td).width );
                           }); 
                           tr.classList.add('lyteTableRowSorting'); 
                       },
                       getIndex = function( index ){
                           var find = function(obj){
                               return obj.index === index;
                           }
                           return _this.data.ltPropData.findIndex(  find );
                       },
                       checkLimit = function (num){
                           return 0 <= num && num < _this.data.ltPropData.length ;
                       },
                       changePlaceHolder = function( _tr ){
                           placeholder.style.transform = "";
                           if( _tr.style.transform ){
                               placeholder.style.transform = _tr.style.transform;
                           }
                           placeholder.style.top = _tr.offsetTop + "px";
                           placeholder.style.left = _tr.offsetLeft + "px";
                           placeholder.style.width = _tr.offsetWidth + "px";
                           placeholder.style.height = _tr.offsetHeight + "px";
                       };
                   
                       changePlaceHolder( tr );
                       makeElementDraggable();
                   
                       var initialY = isTouch ? evt.touches[0].clientY : evt.clientY;
                            
                       var mouseup = function(event){
                           let currentIndex = findElement( false , true ) ,
                           scrollTop = _this.scrollDiv.scrollTop;
                           evt.preventDefault();

                           placeholder.classList.add( 'lyteTableSortablePlaceholderHidden' );
                       
                               if(_this.getMethods( 'onBeforeRowDrop' )){
                                   var ret = _this.executeMethod( 'onBeforeRowDrop' , event , currentIndex , data[currentIndex].index , _this.$node  );
                               } 

                               if(ret === false){
                                   let removeIndex = cur_index , 
                                       cur_data = Object.assign( {} , data[removeIndex] );

                                   _this.removeRow(data[removeIndex].index);
                                   _this.insertRow(data[actual_index].index , cur_data.body);

                                   if( _this.data.ltPropContent.length - 2 == _this._boundary.bottom ){
                                       _this.scrollToRecord( data[removeIndex].index , true , scrollTop );
                                   }
                               }
                               tr.style.transform = trTransform;
                               tr.classList.remove('lyteTableRowSorting')

                               _this.getMethods( 'onRowDrop' ) && _this.executeMethod( 'onRowDrop' , event , currentIndex , data[currentIndex].index , _this.$node );
                           
                               let elem = tbody.children[getIndex(actual_index)];
                               if(elem){
                                   elem.style.top = ""; elem.style.right = "";
                               }
                           
                           
                           document.removeEventListener( isTouch ? 'touchmove' : 'mousemove', mousemove)
                           document.removeEventListener( isTouch ? 'touchend' : 'mouseup', mouseup);
                       },

                       parseNum = function (number){
                           let match = number.match(/-?\d+(\.\d+)?/);
                           return match ? parseFloat(match[0]) : 0
                       },
                       isInRange = function( tr , y , isUp){
                           let client = tr.getBoundingClientRect() ,
                               topCheck = containElemClient.top < client.top ,
                               bottomCheck = ( client.top + client.height ) < (containElemClient.top + containElemClient.height );

                           if( isUp == void 0 ){ return topCheck && bottomCheck }

                           reachedTop = false; reachedEnd = false;

                           if( !topCheck ) { 
                                reachedTop = true; }
                           else if( !bottomCheck ) { reachedEnd = true; }

                           if( reachedTop ){ 
                               topCheck = !isUp && ( ( containElemClient.top < y ) && ( y < containElemClient.top + containElemClient.height-diff ) ) && diff >= 0;
                           }else if( reachedEnd ){
                               bottomCheck = isUp && ( containElemClient.top < y && y < (containElemClient.top + containElemClient.height ) ) && diff <= 0
                           }
                            return topCheck && bottomCheck 

                       },
                       fixTop = function ( isUp , returnBoundElem , getDiff){
                           var trClient = tr.getBoundingClientRect(),
                               _diff , transformY ,
                               top = _this._top , bottom = _this._bottom , 
                               contentLength = data.length;

                       
                           _diff = isUp ? containElemClient.top - trClient.top : 
                                        (containElemClient.top + containElemClient.height) - (trClient.top + trClient.height);
                           if( getDiff === true ){ 
                               diff = -_diff;
                               return;
                           };
                           transformY = parseNum( tr.style.transform );
                           tr.style.transform = ""; _this.transform( true , tr , transformY + _diff );
                           trClient = tr.getBoundingClientRect();


                           if( !returnBoundElem ) { return; }

                           let reachedEnd = false;

                           for (let i = isUp ? top : bottom ; isUp ? i < (top+contentLength) : (reachedEnd ? i > bottom + 1 : i >= 0) ; isUp ? i++ : i--) {
                               i = isUp ? i%contentLength : i;
                               const element = tbody.children[i] ,
                                     elemClient = element.getBoundingClientRect();

                               if(isUp ? ( elemClient.top >= ( containElemClient.top ) ) : (elemClient.top < (containElemClient.top+containElemClient.height))){
                                   if( isUp ? trClient.top <= elemClient.top : trClient.top >= elemClient.top ){
                                       if(cur_index != i){
                                           return i;
                                       }
                                       return;
                                    }
                               }


                               if( !isUp && i == 0 ){
                                   reachedEnd = true;
                                   i = contentLength;
                               }
                           }
                       
                       }
                   
                       var mousemove = function( event ){
                           isTouch ? null : event.preventDefault();
                           var y = isTouch ? event.touches[0].clientY : event.clientY ;

                           y = (y < 0) ? 0 : y;

                           var isUp = ( initialY > y) , isDown = ( initialY < y ),
                               isRange , targetIndex , 
                               neighbour = isDown ? findElement( false ) : isUp ? (cur_index == 0 && boundary.top == 0) ? undefined : findElement( true ) : undefined ,
                               check = false;
                           
                           
                           
                           if(isUp || isDown) {

                               let _transform = tr.style.transform;
                               tr.style.transform = "translateY(" + (parseNum(tr.style.transform || "") + ( diff != void 0 ? diff : 0 )- (initialY - y)) + "px)";

                               if(hasContainment){
                                   diff = diff != void 0 ? diff - (initialY - y) : void 0;
                                   isRange = isInRange( tr , y , isUp );
                                   if(!isRange && !outOfBound){
                                       fixTop( isUp , false , true );
                                       check = true ;
                                   }
                               }

                               tr.style.transform = _transform;


                              if( isFirst && _this.getMethods('onRowDragStart') ){
                                  _this.executeMethod( 'onRowDragStart' , event , data[cur_index].index , cur_index , _this.$node );
                              }


                          
                              if( hasContainment && isRange){
                                  if(  outOfBound ){
                                      tr.style.transform = "translateY(" + (parseNum(tr.style.transform || "") + ( diff )) + "px)";
                                      diff = void 0;
                                      outOfBound = false;
                                  }else{
                                      tr.style.transform = "translateY(" + (parseNum(tr.style.transform || "") - (initialY - y)) + "px)";
                                      outOfBound = false;
                                  }
                              }else if( hasContainment && !outOfBound) {
                                  outOfBound = true ;
                                  targetIndex = fixTop( isUp , true );
                              }else if(!hasContainment){
                                  tr.style.transform = "translateY(" + (parseNum(tr.style.transform || "") - (initialY - y)) + "px)";
                              }

                              isFirst = false;  
                              var trClient = tr.getBoundingClientRect();

                              if( (neighbour != void 0 && !outOfBound) || (targetIndex != void 0) ){
                                   let isExceeds = targetIndex == void 0 ? isDown ? ( neighbour.getBoundingClientRect().top < trClient.top ) :
                                                   isUp ?   ( neighbour.getBoundingClientRect().top > trClient.top ) : false : false;

                                   if( (neighbour != void 0 && isExceeds) || (targetIndex != void 0)){
                                       let curData = Object.assign( {} , _this.data.ltPropData[cur_index] ) , 
                                           heightDiff = parseNum(tr.style.transform) - parseNum(trTransform) + ( (isDown ? -1 : 1 ) * tr.offsetHeight ) ,
                                           _curIndex = data[cur_index].index, 
                                           hasTarget = targetIndex != void 0;

                                       tr.style.setProperty('transform' , trTransform ) ;
                                       let scrollTop = _this.scrollDiv.scrollTop;

                                       clearTimeout(_this._ignoreTimeout)
                                       _this.__ignore_scroll = true;

                                       let insertIndex = ( targetIndex != void 0 ? data[targetIndex].index : isDown ? _curIndex+1 : _curIndex-1  ),
                                           removeIndex = _curIndex!=void 0 ? _curIndex : cur_index;

                                       _this.removeRow( removeIndex );
                                       _this.insertRow( insertIndex , curData.body );


                                       if( _this.data.ltPropContent.length - 2 == _this._boundary.bottom ){
                                           if( _this._rowHgt == undefined ){
                                               _this.__allow_scroll = true;
                                           }
                                           _this.scrollToRecord( _curIndex, true , scrollTop );
                                           _this.__allow_scroll = false;
                                       }

                                       if( hasTarget ){
                                           tr.classList.remove('lyteTableRowSorting');
                                           tr = tbody.children[targetIndex];

                                           changePlaceHolder( tr );

                                           trTransform = tr.style.transform;
                                           tr.classList.add('lyteTableRowSorting');
                                           fixTop(isUp);
                                           cur_index = targetIndex;
                                       }else{
                                           tr = tbody.children[getIndex(removeIndex)] ; neighbour = tbody.children[getIndex(insertIndex)];

                                           changePlaceHolder( neighbour );

                                           tr.classList.remove('lyteTableRowSorting');
                                           neighbour.classList.add('lyteTableRowSorting');
                                           trTransform = neighbour.style.transform;
                                           cur_index = isDown ? checkLimit( cur_index + 1 ) ? cur_index + 1 : 0 : checkLimit( cur_index - 1 ) ? cur_index - 1 : data.length-1;
                                           neighbour.style.transform = "translateY(" + ( ( isDown ? ( cur_index == 0 ) : ( cur_index == data.length - 1 ) ) ?  (parseNum(neighbour.style.transform) + heightDiff ) : heightDiff + parseNum(trTransform) ) + "px)";
                                           tr = neighbour; 
                                       }


                                       index = isDown ? (index + 1) : (index - 1);

                                       _this._ignoreTimeout = setTimeout(() => {
                                           _this.__ignore_scroll = false;
                                       }, 100);
                                   }

                              }
                           }                   
                       
                        initialY =  y;
                       }
                   
                       document.addEventListener( 'mousemove' , mousemove , evt );
                       document.addEventListener( 'mouseup' , mouseup , evt);

                       document.addEventListener( 'touchmove' , mousemove , false );
                       document.addEventListener( 'touchend' , mouseup , false);
                   }   
               }
     
       }

        _() {
            _;
        }
    }

    return overrides(_LyteTableSortableMixin);
});



LyteTableSortableMixin.register({
    hash: "LyteTableSortableMixin_5",
    refHash: "@zoho/lyte-ui-component_3"
});



/***/ }),

/***/ 72325315:
/*!*************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/mixins/lyte-table-utils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LyteTableUtilsMixin": () => (/* binding */ LyteTableUtilsMixin)
/* harmony export */ });
/* harmony import */ var _slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @slyte/core/src/lyte-utils */ 93608996);
/* harmony import */ var _node_modules_slyte_core_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../node_modules/@slyte/core/index.js */ 74260201);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../node_modules/@zoho/lyte-dom/modules/lyte-dom-utils.js */ 10891274);
/* harmony import */ var _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2__);

var _ = {};

(0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__._defineProperty)(_, {
    "Mixin": function() {
        return _node_modules_slyte_core_index_js__WEBPACK_IMPORTED_MODULE_1__.Mixin;
    }
});




let LyteTableUtilsMixin = (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.createCustomClass)(function(arg1, overrides, LyteTableUtilsMixin) {
    class _LyteTableUtilsMixin extends (0,_slyte_core_src_lyte_utils__WEBPACK_IMPORTED_MODULE_0__.getClass)([_node_modules_slyte_core_index_js__WEBPACK_IMPORTED_MODULE_1__.Mixin], arg1, LyteTableUtilsMixin) {
        getScrollDiv() {
            return this.$node.getElementsByClassName( 'lyteTableScroll' )[ 0 ];
        }

        registerInterSection(scrollDiv) {
             this._intersectionObs = new window.IntersectionObserver( this.intersection.bind( this ), { threshold : [ 1 ], root : scrollDiv } )
        }

        detectBrowsers() {
            var userAgent = window.navigator.userAgent
            this._isSafari = /safari/ig.test( userAgent );
            this._FF = /firefox/ig.test( userAgent );
            this._chrome = /Chrome/i.test( userAgent ) && /Google Inc/i.test( window.navigator.vendor );
        }

        getHeaderWidths(headerCells) {
            return headerCells.map( function( cell ){
                return cell.getBoundingClientRect().width;
            });
        }

        getTbody() {
            return this._tbody || this.$node.getElementsByTagName( this.data.ltPropTags.tbody );
        }

        getThead() {
            return this.$node.getElementsByTagName( this.data.ltPropTags.thead )[ 0 ];
        }

        getRows() {
            return this.$node.getElementsByTagName( this.data.ltPropTags.tr );
        }

        makeFixedColumn(rows, index, left, value) {

            rows.forEach( function( row ){
                var _$L = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( row );
                if( !_$L.hasClass( 'dummy' ) ) {
                    _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( this.get_nth_cell( row, index ) ).css( left, value ).addClass( 'lyteFixedColumn' );
                }
            }.bind( this ) );
        }

        observe(intersection) {
            if( !intersection._observed ){
                this._intersectionObs.observe( intersection );
                intersection._observed = true;
            }
        }

        _setLeftForInterSection(reset) {

            var fastdom = (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom),
            __this = this;


            fastdom.clear( __this._setmeasure );

            __this._setmeasure = fastdom.measure( function(){

                var __tags = __this.data.ltPropTags,
                th_rows = Array.from( __this.$node.querySelectorAll( __tags.thead + ' ' + __tags.tr ) ),
                accumulatedTop = 0;

                th_rows.forEach( function( row, ___index ){
                    var headerCells = __this.get_children( row ),
                    __length = headerCells.length - 1;

                    if( __length + 1 ){
                        var width = __this.getHeaderWidths( headerCells ),
                        top_to_set = accumulatedTop,
                        check_right = true,
                        left = __this.rtlfunc( 'left' );

                        accumulatedTop += row.getBoundingClientRect().height;

                        fastdom.mutate( function(){
                            var tbody = __this.getTbody(),
                            rows = ___index ? [] : __this.get_children( tbody ),
                            intersectionDivs = [],
                            accumulatedWidth = 0,
                            accumulatedLeft = 0,
                            fn = function( cell, index ){
                                var intersection = cell._horizontalIntersectionDiv,
                                __index = check_right ? index : ( __length - index );

                                if( intersection ){
                                    var _hasClass = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( cell ).hasClass( 'lyteTableRightFixed' );
                                    if( ( check_right && _hasClass ) || ( !check_right && !_hasClass ) ){
                                        intersection = void 0;
                                    }
                                }

                                if( intersection ){
                                    intersectionDivs.push( intersection );
                                    intersection.style[ left ] = accumulatedLeft + 'px';
                                    cell.style[ left ] = accumulatedWidth + 'px';

                                    __this.throwEvent( "intersectionSet", cell, left, accumulatedWidth );

                                    __this.makeFixedColumn( rows, __index, left, accumulatedWidth );

                                    accumulatedWidth += width[ __index ];

                                    __this.observe( intersection );

                                    if( intersection._sticked && reset ){
                                        __this.addFixedClass( cell );
                                    }
                                } else {
                                    accumulatedLeft +=  width[ __index ];
                                }

                                if( ___index ){
                                    cell.style.top = top_to_set + 'px';
                                }
                            };

                            headerCells.forEach( fn );
                            check_right = false;
                            left = __this.rtlfunc( 'right' );
                            accumulatedLeft = 0;
                            accumulatedWidth = 0;

                            headerCells.reverse().forEach( fn );

                             ___index ? void 0 : ( __this._intersections = intersectionDivs );
                        });
                    }
                }); 
            });
        }

        intersection(intersections) {
            
            intersections.forEach( function( intersection ){
                this.singleIntersection( intersection );
            }.bind( this ) );
        }

        singleIntersection(intersection) {
            var cell = intersection.target._cell,
            __this = this,
            ns = intersection.intersectionRatio ? 'processUnfix' : 'processFix';

            __this._fixedWidth = __this._fixedWidth || 0;
            __this._rightFixedWidth = __this._rightFixedWidth || 0;
            __this[ ns ]( cell, intersection );
        }

        common_fn(cell, intersection, __remove) {
            var __this = this;

            __this[ __remove ? 'removeFixedClass' : 'addFixedClass' ]( cell );
            intersection.target._sticked = !__remove;
            __this[ __remove ? 'callUnfix' : "callFix" ]( cell );

            if( cell.parentNode.previousElementSibling ){
                return;
            }

            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.measure( function(){
                var bcr = cell._bcr || cell.getBoundingClientRect(),
                ns = cell.classList.contains( 'lyteTableRightFixed' ) ? '_rightFixedWidth' : "_fixedWidth";

                if( ( __this[ ns ] += ( bcr.width * ( __remove ? -1 : 1 ) ) ) < 0 && __remove ){
                    __this[ ns ] = 0;
                }
            });
        }

        processUnfix(cell, intersection) {
            this.common_fn( cell, intersection, true );
        }

        processFix(cell, intersection) {
            this.common_fn( cell, intersection );
        }

        execute(cb) {
            return this.getMethods( cb ) && this.executeMethod.apply( this, arguments );
        }

        callUnfix(cell) {
            this.execute( 'onUnFix', cell, this.$node );
        }

        callFix(cell) {
            this.execute( 'onFix', cell, this.$node );
        }

        callDrop(selectedCell, next, startIndex, endIndex, header, evt) {
            this.execute( 'onDrop', selectedCell, next, startIndex, endIndex, header, evt, this.$node );
        }

        callRelease(evt, selectedCell) {
           this.execute( 'onRelease', evt, selectedCell, this.$node );
        }

        callOnBeforeSelect(selectedCell, ev, index) {
            return this.execute( 'onBeforeSelect', selectedCell, ev, this.$node, index ) == false;
        }

        callOnSelect(selectedCell, ev, index) {
            return this.execute('onSelect', selectedCell, ev, this.$node, index ) === false;
        }

        stickyFunction(cell, isCss, property, value) {
            var index = this.getIndex( cell ),
            tbody = this.getTbody(),
            rows = cell.parentNode.previousElementSibling ? [] : this.get_children( tbody ),
            fnName = isCss ? 'css' : property,
            fnValue = value;

            if( isCss ){
                fnValue = {};
                fnValue[ property ] = value;
            }

            _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( cell )[ fnName ]( fnValue );

            rows.forEach( row => {
                _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( this.get_nth_cell( row, index ) )[ fnName ]( fnValue );
            });
        }

        removeFixedClass(cell) {
            this.stickyFunction( cell, false, 'removeClass', 'lyteTableFixed' );
        }

        addFixedClass(cell) {
            this.stickyFunction( cell, false, 'addClass', 'lyteTableFixed' );
        }

        removeSticky(cell) {
            var is_right = cell.classList.contains( 'lyteTableRightFixed' );

            this.stickyFunction( cell, true, this.rtlfunc( is_right ? 'right' : 'left' ), '' );
            this.stickyFunction( cell, false, 'removeClass', 'lyteFixedColumn' );
        }

        makeSticky(cell) {
            var __left = this.rtlfunc( 'left' );

            this.stickyFunction( cell, true, __left, cell.style[ __left ] );
        }

        stickyScroll(evt) {
            var __target = evt.target;

            if( __target == this.scrollDiv ){
                var __intersections = this._intersections;

                if( __intersections.length  ){
                    _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.measure( function(){
                        var scrollTop = __target.scrollTop;
                        _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom.mutate( function(){
                           __target.closest( 'lyte-table' ).style.setProperty( '--lyte-table-intersection', scrollTop + 'px' );
                        });
                    });
                }
            }
        }

        sortablemousedown(ev) {
            var evt = ev,
            isTch,
            __target = ev.target;

            if( /lyte-tablehead-resize/i.test( __target.tagName ) || ev.button != 0 ){
                return
            }

            if( /touch/i.test( ev.type ) ){
                if( ev.touches.length > 1 ){
                    return;
                }
                isTch = true;
                evt = ev.touches[ 0 ];
            }
            var target = __target,
            selectedCell = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( target ).closest( this.data.ltPropTags.th ).get( 0 ),
            index = this.getIndex( selectedCell );

            if( _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( selectedCell ).hasClass( 'lyteTableFixed' ) ){
                return;
            }

            if( this.callOnBeforeSelect( selectedCell, ev, index ) ){
                return;
            }

            this._ww = window.innerWidth;

            // no need to pass this._ww inside rtlfunc. its already available inside it == > here only its available in this. In other places i am passing. So i need to pass here too. Here i am storing because of window dimension wont change during mousemove. So no need to measure that in mousemove
            var clientX = this.rtlfunc( 'clientX', evt, this._ww ),
            offleft = 0,
            tbody = this.getTbody(),
            thead = this.getThead(),
            cells = [],
            rows = this.get_children( tbody ),
            scrollDiv = this.getScrollDiv(),
            scrollTop = scrollDiv.scrollTop;

            this._elem = selectedCell;

            this._originalIndex = index;
            this._sortmousemove = this.sortmousemove.bind( this );
            this._sortmouseup = this.sortmouseup.bind( this );
            this._currentIndex = index;
            this._tbody = tbody;
            this._cells = cells;
            this._affectedIndex = [];

            this._scrolldivBcr = scrollDiv.getBoundingClientRect();
            this._scrollwidth = scrollDiv.scrollWidth;

            this._prevx = clientX;
            this._originalDiv = scrollDiv;
            this._originalDiv._sL = scrollDiv.scrollLeft;

            var headerCells = Array.from( this.get_children( selectedCell.parentNode ) ),
            rowBcr = selectedCell.parentNode.getBoundingClientRect(),
            __dir = this._dir;

            headerCells.forEach( function( cell, index, originalArray ){
                var previousCell = ( originalArray[ index - 1 ] || {} )._bcr,
                cellBcr = cell.getBoundingClientRect(),
                __width = cellBcr.width;

                // Feels like this calculation might not be needed. ===> Actual position( If not sticked ) and sticked positions will be different. here i am calculating Actual position. getBounding will give sticked position

                if( index == 0 ){
                    if( __dir ){
                        var __right = rowBcr.right;
                        cell._bcr = { left : __right - __width, right : __right, width : __width };
                    } else {
                        var __left = rowBcr.left;
                        cell._bcr = { left : __left, right : __left + __width, width : __width };
                    }
                } else {
                    if( __dir ){
                        var __left = previousCell.left;
                        cell._bcr = { left : __left - __width, right : __left, width : __width };
                    } else {
                        var __right = previousCell.right;
                        cell._bcr = { left : __right, right : __right + __width, width : __width };
                    }
                }
            });

            // don't understand this part either ==> converting event client value with respect to right( in rtl )
            
            this._xoffset = clientX - this.rtlfunc( 'right', selectedCell._bcr, this._ww );

            if( !this.data.ltPropPreventTableModify ){
                var height = 0;

                rows.every( function( row ){
                    var cell = this.get_nth_cell( row, index ),
                    cellHeight = cell.getBoundingClientRect().height;
                    height += cellHeight;

                    if( height < scrollTop - rowBcr.height ){
                        return true;
                    }

                     cell._translateX = 0;
                     cells.push( cell );
                     // may this can be this._currentEndIndex ===> its just virtual movement. So i named this as transformed index
                     cell._transformedindex = index;
                     cell.classList.add( 'lyteStickyTableColumnSortSelect' );

                     if( height >= this._scrolldivBcr.height + scrollTop ){
                        return false;
                    }
                    return true;
                }.bind( this ) );

                selectedCell._translateX = offleft;
                cells.push( selectedCell );
                selectedCell._transformedindex = index;
            } else {
                selectedCell._transformedindex = index;
            }

            document.addEventListener( isTch ? 'touchmove' : 'mousemove', this._sortmousemove, true );
            document.addEventListener( isTch ? 'touchend' : 'mouseup', this._sortmouseup, true );
            this.$node.classList.add( 'lyteTableSortSelected' );
            selectedCell.classList.add( 'lyteStickyTableColumnSortSelect' );
            ev.preventDefault();

            this.callOnSelect( selectedCell, ev, index );
        }

        isIncrement(increment, isRightEdge) {
            return increment > 0 || ( increment == 0 && isRightEdge );
        }

        isDecrement(increment, isRightEdge) {
            return increment < 0 || ( increment == 0 && isRightEdge === false );
        }

        getTd(cell, increment, isRightEdge) {
            // what is transformedindex ==> while moving columns are interchanged. here transformed index is virtual new index
            var transindex = cell._transformedindex,
            __index = -1,
            ori_index = this._originalIndex;

            if( this.isIncrement( increment, isRightEdge ) ){
                if( ori_index <= transindex ){
                    __index = transindex + 1;
                } else{
                    __index = transindex;
                }
            } else if( this.isDecrement( increment, isRightEdge ) ) {
                if( ori_index < transindex ){
                    __index = transindex;
                } else {
                    __index = transindex - 1;
                }
            }

            return this.get_nth_cell( cell.parentNode, __index );

        }

        findFromClosest(evt, cell) {
            var __tags = this.data.ltPropTags,
            closestCell = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( evt.target ).closest( __tags.th + ', ' + __tags.td ).get( 0 );
            if( this.isHeader( closestCell ) ){
                var index = this.getIndex( closestCell );
                closestCell = this.get_nth_cell( cell.parentNode, index );
            }
            return closestCell;
        }

        isHeader(cell) {
            return cell && ( cell.tagName.toLowerCase() == this.data.ltPropTags.td );
        }

        isSortEnabled() {
            return this._elem;
        }

        isMoved() {
            return this._moved;
        }

        getIndex(cell) {
            return Array.from( this.get_children( cell.parentNode ) ).indexOf( cell );
        }

        getClassForFake() {
            return 'lyteTableSortHelper ' + this.data.ltPropSortDummyColumClass;
        }

        createFakeColum(cell) {
            var __doc = document,
            __element = __doc.documentElement,
            originaldiv = __doc.createElement( 'div' ),
            div = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( originaldiv ),
            cellObj = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( cell ),
            bcr = cell.getBoundingClientRect(),
            xscroll = __element.scrollLeft,
            yscroll = __element.scrollTop,
            cb = "onFakeColumnCreate";

            cellObj.data( 'sortElement', originaldiv );
            originaldiv._bcr = { left : bcr.left, right : bcr.right, width : bcr.width };
            originaldiv._translateX = bcr.left;
            originaldiv._translateY = bcr.top;

            div.attr( 'style', cellObj.attr( 'style' ) );
            div.text( cell.textContent )
                .addClass( this.getClassForFake() )
                .data( 'relatedElement', cell )
                .css({ 
                        height : bcr.height, 
                        width : bcr.width,
                        left : xscroll * ( this._dir ? -1 : 1 ),
                        top : yscroll,
                        pointerEvents : "none",
                        transform : 'translate(' + originaldiv._translateX + 'px,' + originaldiv._translateY + 'px)'
                    });


            this.getMethods( cb ) && this.executeMethod( cb, originaldiv, cell, this.$node );

            __doc.body.appendChild( originaldiv );
            this._moved = true;
        }

        sortmousemove(ev, allowAtSame, isRightEdge) {
            if( !this.isSortEnabled() ){
                return;
            }

            var evt = ev,
            ww = this._ww,
            // maybe the rtlfunc needs a better name ==> its a old function can't change its name right now
            clientX = this.rtlfunc( 'clientX', evt, ww ),
            left = this.rtlfunc( 'left' ),
            selectedCell = this._elem,
            tbody = this.getTbody(),
            cells = this._cells,

            // don't understand the xoffset == > initial mouse position during mousedown. Increment calculated based on this
            xoffset = this._xoffset,
            preventable = this.data.ltPropPreventTableModify;

            // evt = this.getProperEvent() ==> if touch length is more than one i need to stop the function. if i write this as additional function it again leads to write one more function. Right now i can't write this as a fucntion
            if( /touch/i.test( ev.type ) ){
                if( ev.touches.length > 1 ){
                    return;
                }
                evt = ev.touches[ 0 ];
            }

            if( preventable && !this.isMoved() ){
                return this.createFakeColum( selectedCell );
            }

            if( this._prevx == evt.clientX && !allowAtSame ){
                return;
            }

            window.$selectedCell = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( selectedCell );

            if( this.getMethods( 'onBeforeDrag' ) && this.executeMethod( 'onBeforeDrag', selectedCell, $selectedCell.data( 'sortElement' ), ev, this.$node, this._originalIndex, selectedCell._transformedindex ) === false ){
                return;
            }

            this._prevx = evt.clientX;

            var fakeCell = $selectedCell.data( 'sortElement' ),
            // won't div._bcr be present? In one type it wont present
            bcr = preventable ? fakeCell._bcr : selectedCell._bcr,
            increment = ( clientX - this.rtlfunc( 'right', bcr, ww ) - xoffset ),
            is_increment = this.isIncrement( increment, isRightEdge ),
            is_decrement = this.isDecrement( increment, isRightEdge ),

            closestCell = preventable ? this.findFromClosest( evt, selectedCell ) : this.getTd( selectedCell, increment, isRightEdge ),

            closestbcr = closestCell ? closestCell._bcr : {},

            newone, closestCellIndex, 

            scrollLeft = this._originalDiv._sL,

            fact = this._dir ? -1 : 1,

            interchangeprevent, 
            offLeft = 0,
            cb = 'onBeforeInterChange',
            __affectedIndex = this._affectedIndex;

            if( selectedCell == closestCell && !fakeCell ){
                closestCell = undefined;
            }

            if( closestCell && this.isSortEnabled() ){
                closestCellIndex = this.getIndex( closestCell );

                if( closestCellIndex != this._originalIndex || preventable ){
                    var allow = false,
                    close_index = closestCell._transformedindex,
                    transindex = !isNaN( close_index ) ? close_index : closestCellIndex,
                    __limit = this.rtlfunc( 'left', closestbcr, ww ) + closestbcr.width * 0.5,
                    __transformedindex = selectedCell._transformedindex;

                    if( fakeCell && selectedCell == closestCell ){
                        transindex = closestCellIndex;
                    } 
                    
                    if( is_increment ) {
                        if( this.rtlfunc( 'right', bcr, ww ) + increment > __limit ){
                            allow = transindex > __transformedindex;
                        }
                    } else if( is_decrement ){
                        if( this.rtlfunc( 'left', bcr, ww ) + increment < __limit ){
                            allow = transindex < __transformedindex;
                            if( allow && ( closestCell._horizontalIntersectionDiv || {} )._sticked ){
                                allow = false;
                            }
                        }
                    }
                    if( allow ){
                        if( !preventable ){
                            newone = __affectedIndex.indexOf( closestCellIndex ) == -1;
                            if( newone ){
                                offLeft = 0;
                                __affectedIndex.push( closestCellIndex );
                            }
                        }
                    } else {
                        closestCell = undefined;
                    }
                }
            } else {
                closestCell = undefined;
            }
            if( closestCell && this.getMethods( cb ) ){
                interchangeprevent = this.executeMethod( cb, ev, selectedCell, closestCell, this.$node ) === false;
                if( interchangeprevent && newone ){
                    this.$addon.arrayUtils( __affectedIndex, 'removeAt', __affectedIndex.indexOf( closestCellIndex ) );
                }
            }

            if( preventable ){
                fakeCell.style.transform = 'translate( ' + ( fakeCell._translateX += ( increment * fact ) ) + 'px,' + fakeCell._translateY + 'px)';
                if( closestCell && !interchangeprevent ){
                    if( closestCell != selectedCell ){
                       var __fact = 0;
                       if( is_decrement ){
                         __fact = -1;
                       } else if( is_increment ){
                         __fact = 1;
                       }
                       selectedCell._transformedindex += __fact;
                    }
                }
            } else {
                cells.forEach( function( cell, indexVal ){
                    cell.style.transform = "translateX(" + ( cell._translateX += ( increment * fact ) ) + "px)";
                    // if( !this.isSortEnabled() ){
                        cell.classList.add( 'lyteStickyTableColumnMoving' );
                    // }
                    if( closestCell && !interchangeprevent ){
                        var newcell = this.get_nth_cell( cell.parentNode, closestCellIndex ),
                        __fact = 0,
                        ___ns = '_transformedindex';

                        if( newone ){
                            newcell.classList.add( 'lyteStickyTableColumnSortAnimate' );
                            newcell._translateX = 0;
                        }
                        newcell.style.transform = "translateX(" + ( newcell._translateX += ( bcr.width * ( this.isIncrement( increment, isRightEdge ) ? -1 : 1 ) * fact ) ) + "px)";

                        if( newcell[ ___ns ] == undefined ){
                            newcell[ ___ns ] = closestCellIndex;
                        }

                        if( is_decrement ){
                            __fact = 1;
                        } else if( is_increment ){
                            __fact = -1;
                        }

                        newcell[ ___ns ] += __fact;
                        cell[ ___ns ] -= __fact
                    }
                }.bind( this ));
            }

            if( fakeCell ){
                var __fakecell = fakeCell._bcr;

                __fakecell.left += ( increment* fact );
                __fakecell.right += ( increment * fact );
            } else {
                var __selected_bcr = selectedCell._bcr;

                __selected_bcr.left += ( increment * fact );
                __selected_bcr.right += ( increment * fact );
                if( closestCell && !interchangeprevent ){
                    var close_bcr = closestCell._bcr;

                    close_bcr.left += ( bcr.width * ( is_increment ? -1 : 1 ) * fact );
                    close_bcr.right += ( bcr.width * ( is_decrement ? -1 : 1 ) * fact );
                }
            }
            this.clearFastdom();

            this.sorthorizontalscroll( { left : bcr.left, width : bcr.width, right :  bcr.right }, scrollLeft, is_increment );

            if( closestCell ){
                this.callInterChange( ev, selectedCell, closestCell );
            }
            this.callDrag( selectedCell, ev );
            this._moved = true;
        }

        callInterChange(ev, selectedCell, closestCell) {
            this.execute( 'onInterChange', ev, selectedCell, closestCell, this.$node );
        }

        callDrag(selectedCell, ev) {
            this.execute( 'onDrag', selectedCell, _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( selectedCell ).data( 'sortElement' ), ev, this.$node, this._originalIndex, selectedCell._transformedindex );
        }

        clearFastdom() {
            var fastdom = (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom);
            fastdom.clear( this._reqId );
            fastdom.clear( this._measure );
            delete this._measure;
            delete this._reqId;
        }

        sorthorizontalscroll(bcr, scrollLeft, isIncrement) {
            var left = this.rtlfunc( 'left' ),
            ww = this._ww,
            _scrolldivBcr = this._scrolldivBcr,
            _scrollwidth = this._scrollwidth,
            _thisBccr = this._thisBccr,
            _originalDiv = this._originalDiv,
            _FF = this._FF,
            _dir = this._dir,
            _chrome = this._chrome,
            _isSafari = this._isSafari,
            isLeft = !isIncrement && ( this.rtlfunc( 'left', bcr, ww ) < Math.max( this._fixedWidth + this.rtlfunc( 'left', _scrolldivBcr, ww ), 0 ) ),
            isRight = isIncrement && ( ( this.rtlfunc( 'left', bcr, ww ) + bcr.width ) > Math.min( this.rtlfunc( 'right', _scrolldivBcr, ww ), ww ) ),
            selectedCell = this._elem;

            if( _FF && isRight ){
                // is this like checking if currentEndIndex is on the last node? == > firefox behaves weirdly. If we keep moving scrollwidth gradully increases. So if it reaches its end i am returning false

                if( selectedCell._transformedindex == this.get_children( selectedCell.parentNode ).length - 1 ){
                    if( _dir ){
                         // why scrollwidth + scrollleft <= widthofscrolldiv? - Firefox rtl behaviour
                         if( _scrollwidth + window.sL <= _thisBccr.width ){
                            return;
                        }
                    } if( window.sL + _thisBccr.width >= _scrollwidth ){
                        return;
                    }
                }
            }

            var value;

            if( isLeft ){
                value = scrollLeft - this.getCrctScrollValue();
                if( _dir ){
                    if( _chrome ){
                        // why does this Math.min need to be taken ==> In Rtl scrollLeft value will be lower than initial value. Setting Higher value change its scroll width value automatically in rtl
                        value = Math.min( value, _scrollwidth - _scrolldivBcr.width );
                    } else if( _FF || _isSafari ){
                        value = Math.min( value, 0 );
                    }
                } else {
                    value = Math.max( value, 0 );
                }
            } else if( isRight ){
                value = scrollLeft + this.getCrctScrollValue();
                if( _dir ){
                    if( _chrome ){
                        value = Math.max( value, 0 );
                        isRight = value != 0;
                    } else if( _FF || _isSafari ){
                        value = Math.max( value, _scrolldivBcr.width - _scrollwidth );
                        isRight = value != _scrolldivBcr.width - _scrollwidth;
                    } else {
                        value = Math.min( value, _scrollwidth - _scrolldivBcr.width ); 
                        isRight = value != _scrollwidth - _scrolldivBcr.width;
                    }
                } else {
                    value = Math.min( value, _scrollwidth - _scrolldivBcr.width );
                }
            } else {
                this.clearFastdom();
            } 
            if( isLeft || isRight ){
                _originalDiv.scrollLeft = value;
                var headerCells = Array.from( this.get_children( selectedCell.parentNode ) ),
                scrollIncrement = value - scrollLeft

                if( scrollIncrement ){

                    // why (value - sL) === > Updating my reference value without dom measure
                    _originalDiv._sL += scrollIncrement;

                    headerCells.forEach( cell => {
                        cell._bcr.left -= scrollIncrement;
                        cell._bcr.right -= scrollIncrement;
                    });

                    var fastdom = (_node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default().fastdom);

                    this._measure = fastdom.measure( () => {
                        delete this._measure;
                        this._reqId = fastdom.mutate( () => {
                            delete this._reqId;
                            this.sortmousemove( { clientX : this._prevx }, true, isRight );
                        });
                    });
                }
             }
        }

        getCrctScrollValue() {
            return this.data.ltPropScrollStep * ( this._dir ? -1 : 1 );
        }

        swapColumnsInData(header, startIndex, endIndex) {
            var La = this.$addon.arrayUtils,
            current = La( header, 'removeAt', startIndex );
            La( header, 'insertAt', endIndex, current );
        }

        swapColumnsInDom(startIndex, endIndex) {
            this._preventCustomdelete = true;

            var rows = Array.from( this.getRows() );

            rows.forEach( row => {
                this.$component[ startIndex < endIndex ? 'insertAfter' : 'insertBefore' ]( this.get_nth_cell( row, endIndex ), this.get_nth_cell( row, startIndex ) );
            });
            delete this._preventCustomdelete;
        }

        removeEvents(evt) {
            var isTch = /touch/i.test( evt.type ),
            rel = 'removeEventListener',
            __doc = document;

            __doc[ rel ]( isTch ? 'touchmove' : 'mousemove', this._sortmousemove, true );
            __doc[ rel ]( isTch ? 'touchend' : 'mouseup', this._sortmouseup, true );

            delete this._sortmouseup; 
            delete this._sortmousemove; 
        }

        clearVariables() {
            delete this._elem; 
            delete this._xoffset; 
            delete this._originalIndex; 
            delete this._moved;
            delete this._affectedIndex; 
            delete this._tbody;
            delete this._cells; 
            delete this._prevx; 
            delete this._scrolldivBcr; 
            delete this._ww; 
            delete this._scrollwidth;
            delete this._originalDiv;
        }

        sortmouseup(evt) {
            var startIndex = this._originalIndex,
            selectedCell = this._elem,
            endIndex = selectedCell._transformedindex;

            this.resetcells();
            if( this.isSortEnabled() ){
                var failed,
                header = this.getData( 'ltPropHeader' ),
                next = this.get_nth_cell( selectedCell.parentNode, endIndex ),
                cb = "onBeforeDrop",
                failed = this.getMethods( cb ) && this.executeMethod( cb, selectedCell, next, startIndex, endIndex, header, evt ) == false;

                if( !failed && startIndex != endIndex ){
                    if( header.length ){
                        this.swapColumnsInData( header, startIndex, endIndex );
                    } else {
                        this.swapColumnsInDom( startIndex, endIndex );
                    }
                }
                this._setLeftForInterSection();
                !failed && this.callDrop( selectedCell, next, startIndex, endIndex, header, evt )
            } else {
                // Is onRelease a callback which gets fired when the element has not been moved? This sounds like a very special case callback. I want to know more about the use case of this

                // Generally all are adding some class to selected element in mousedown and want to remove the same in mouseup. If its not moved those classes will not be removed( or they have to write that in first mousemove ). In my case too i need to call reset cells. Thats why i here provided one extra callback
                this.callRelease( evt, selectedCell )
            }

            this.removeEvents( evt );
            this.clearFastdom();
            this.clearVariables();

            this.$node.classList.remove( 'lyteTableSortSelected' );
        }

        removeFakeCell(selectedCell) {
            var $node = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( selectedCell ),
            ns = 'sortElement',
            div = $node.data( ns );
            if( div ){
              div.remove();
              _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( div ).data( 'relatedElement', void 0 );
            }
            $node.data( ns, void 0 );
        }

        resetcells(cells) {
            var affected = this._affectedIndex,
            cells = this._cells,
            selectedCell = this._elem;

            if( this.data.ltPropPreventTableModify ){
                this.removeFakeCell( selectedCell );
                this.resetSingleCell( selectedCell );
            } else {
                cells.forEach( function( cell ){
                    var rowChildren = this.get_children( cell.parentNode );
                    this.resetSingleCell( cell );
                     affected.forEach( function( affIndex ){
                        this.resetSingleCell( rowChildren[ affIndex ] );
                    }.bind( this ) );
                }.bind( this ) );
            }
        }

        resetSingleCell(cell) {                
            cell.style.transform = "";
            cell.classList.remove( 'lyteStickyTableColumnSortSelect', 'lyteStickyTableColumnMoving', 'lyteStickyTableColumnSortAnimate' );
            delete cell._transformedindex;
            delete cell._translateX;
        }

        checkIntersection(arg, ignore_removal) {
            var table = this.__table,
            __this = table.component;

            if( table.ltProp( 'stickyTable' ) && __this.data.ltPropScroll.horizontal ){
                var __elem = this._horizontalIntersectionDiv;
                if( arg && !__elem ){
                    __this.createIntersection.call( this, table );
                } else if( !arg && __elem ){
                    var intersection = __elem;
                    __this.removeIntersection.call( this, intersection, table );
                    __this.removeSticky( this );
                    __this.removeFixedClass( this );

                    if( ignore_removal ){
                        __this.createIntersection.call( this, table );
                    }
                }
            }
        }

        createIntersection(table) {
            var div = _node_modules_zoho_lyte_dom_modules_lyte_dom_utils_js__WEBPACK_IMPORTED_MODULE_2___default()( document.createElement( 'div' ) ).addClass( 'lyteIntersectionDiv' ).get( 0 );
            table.getElementsByTagName( table.ltProp( 'tags' ).table )[ 0 ].appendChild( div );
            this._horizontalIntersectionDiv = div;
            div._cell = this;
            table.component._setLeftForInterSection();
        }

        disconnectedCallback() {
            var intersection = this._horizontalIntersectionDiv;
            if( intersection ){
                var table = this.__table,
                __this = table.component;

                if( table && __this._preventCustomdelete ){
                    return;
                }
                delete this.__table;
                __this.removeIntersection.call( this, intersection, table );
            }
        }

        removeIntersection(intersection, table) {
            if( table ){
                var ins = table.component._intersectionObs;
                if( ins ){
                    ins.unobserve( intersection );
                }
            }
            intersection.remove();

            delete intersection._cell;
            delete this._horizontalIntersectionDiv;
        }

        static observers(arg1) {
            return Object.assign(super.observers({
                stickyTable : function(){
                    var __this = this,
                    __data = __this.data;

                    if( __data.ltPropStickyTable ){
                        var $node = __this.$node,
                        scroll = __data.ltPropScroll,
                        scrollDiv = __this.getScrollDiv();

                        __this.__mixinAdded = true;
                        $node.classList.add( 'lyteStickyTable' );

                        if( scroll.horizontal ){
                            __this.registerInterSection( scrollDiv );
                            scrollDiv.addEventListener( 'scroll', __this.stickyScroll.bind( __this ), true );
                        }

                       $node.reset = function(){
                            __this._setLeftForInterSection( true );
                            if( !__this.__from_collapse ){
                                __this.update_collapse( true );
                            }
                       }.bind( __this );

                        __this.detectBrowsers();
                    }
                }.on( 'didConnect' ),

                setLeftForInterSection : function(){
                    if( this.data.ltPropStickyTable ){ 
                        this.$node.reset();
                    }
                }.observes( 'ltPropContent.[]', 'ltPropHeader.[]', 'ltPropContent', 'ltPropHeader' ).on( 'didConnect' ),

                bindingEvts : function(){
                   var data = this.data;

                   if( !data.ltPropStickyTable ){
                       return;
                   }

                   var header = this.getThead();
                   if( header ){
                       var fn,
                       ns = "addEventListener";
                       if( data.ltPropColumnSortable ){
                           fn = ( this._sortmousedown = this.sortablemousedown.bind( this ) );
                       } else {
                            if( fn = this._sortmousedown ){
                               ns = "removeEventListener";
                               delete this._sortmousedown;
                           }
                       }
                       if( fn ){
                           header[ ns ]( 'mousedown', fn, true );
                           header[ ns ]( 'touchstart', fn, true );
                       }
                   }

               }.observes( 'ltPropColumnSortable' ).on( 'didConnect' )
            }), arg1);
        }

        _() {
            _;
        }
    }

    return overrides(_LyteTableUtilsMixin);
});



LyteTableUtilsMixin.register({
    hash: "LyteTableUtilsMixin_4",
    refHash: "@zoho/lyte-ui-component_3"
});

/***/ }),

/***/ 8595206:
/*!********************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/plugins/lyte-moment-additional.js ***!
  \********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;( function( cb ){
	if( true ){
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! @zoho/lyte-dom */ 10891274) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (cb),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $L ){
	if( $L && $L.moment ) {
		var proto = $L.moment.lyteMoment.prototype;
		var standardDate = [
			{ val : 'YYYY-MM-DD', regex : /^(\d{4}-\d{2}-\d{2})/ },
			{ val : 'GGGG-['+ proto.week + ']WW-E', regex : new RegExp( '\^(\\d{4}-'+ proto.week + '\\d{2}-\\d)' ) },
			{ val : 'GGGG-['+ proto.week + ']WW', regex : new RegExp( '\^(\\d{4}-'+ proto.week + '\\d{2})' ) },
			{ val : 'YYYY-DDD', regex : /^(\d{4}-\d{3})/ },
			{ val : 'YYYY-MM', regex : /^(\d{4}-\d{2})/ },
			{ val : 'YYYYMMDD', regex : /^(\d{8})/},
			{ val : 'GGGG['+ proto.week + ']WWE', regex : new RegExp( '\^(\\d{4}'+ proto.week + '\\d{2}\\d)' ) },
			{ val : 'GGGG['+ proto.week + ']WW', regex : new RegExp( '\^(\\d{4}'+ proto.week + '\\d{2})' ) },
			{ val : 'YYYYDDD', regex : /^(\d{4}\d{3})/ }
		],
		standardTime = [
			{ val : 'HH:mm:ss.SSSS', regex : /^\d{2}:\d{2}:\d{2}\.[0-9]{1,}$/ },
			{ val : 'HH:mm:ss,SSSS', regex : /^\d{2}:\d{2}:\d{2},[0-9]{1,}$/ },
			{ val : 'HH:mm:ss', regex : /^\d{2}:\d{2}:\d{2}$/ },
			{ val : 'HH:mm', regex : /^\d{2}:\d{2}$/ },
			{ val : 'HHmmss.SSSS', regex : /^\d{6}\.[0-9]{1,}$/ },
			{ val : 'HHmmss,SSSS', regex : /^\d{6},[0-9]{1,}$/ },
			{ val : 'HHmmss', regex : /^\d{6}$/ },
			{ val : 'HHmm', regex : /^\d{4}$/ },
			{ val : 'HH', regex : /^\d{2}$/ }
		];
		function constructFormatCopy( arg, isTime ) {
			var cpForm = this.formats.slice(), obj = {}, dummy = arg, isWEG = new RegExp(  this.week + '|G|E' , 'i' ).test( arg );
			for( var i = 0; i < cpForm.length; i++ ) {
				var cur = cpForm[ i ];
				if( isTime != cur.time ) {
					continue;
				}
				if( cur.regex.test( dummy ) && isWEG == !!cur.isWEG && !this.isDef( obj[ cur.type ] ) ) {
					if( cur.ignore && !cur.ignore.test( dummy ) ) {
						var dd = this.dayArr[ obj.month ] || 30;
						if( parseInt( dummy.match( cur.regex )[ 0 ] ) < dd ){
							continue;
						}
					}
					if( cur.str ) {
						var matches = this.find( cur.array, dummy.replace( /(Y|G)+/, '' ) ).mon;
						if( matches ){
							arg = this.replace( arg, matches, false, cur.val );
							obj[ cur.type ] = cur.array ? this.find( cur.array, matches ).index : matches;
						}
					} else {
						var matches = dummy.match( cur.regex )[ 0 ];
						arg = this.replace( arg, cur.regex, cur.suff, cur.val );
						obj[ cur.type ] = parseInt( matches );
						if( cur.type == 'week' ) {
							arg = this.replace( arg, new RegExp( this.week + '(?=\\\[' + this.week + ')') );
						}
					}
					dummy = dummy.replace( matches, '' );
				}
			}
			return arg;
		}

		function iterate( array, arg ) {
			for( var i = 0; i < array.length; i++ ) {
				if( array[ i ].regex.test( arg ) ) {
					return array[ i ];
				}
			}
		}

		function get_day( month, year ){
			var dayArr = this.dayArr,
			isLeap = this.isLeap( year );

			return dayArr[ month ] + ( month == 1 && isLeap ? 1 : 0 );
		}

		function constructFormat( arg ) {
			var dateFormat = iterate.call( this, standardDate, arg ), timeFormat;
			if( dateFormat ) {
				timeFormat = iterate.call( this, standardTime, arg.replace( dateFormat.regex, '' ) );
				if( timeFormat ) {
					arg = dateFormat.val + timeFormat.val;
				} else {
					arg = constructFormatCopy.call( this, arg.replace( dateFormat.regex, dateFormat.val ), true );
				}
			} else {
				arg = constructFormatCopy.call( this, arg )
				arg = constructFormatCopy.call( this, arg, true )
			}
			return arg;
		}

		proto.additional = true;

		$L.extend( proto, {

			 inbuiltFormats : {
			 	localDatetime: 'YYYY-MM-DDTHH:mm',            
		        localSecondDatetime: 'YYYY-MM-DDTHH:mm:ss',
		        localMillisecondDatetime: 'YYYY-MM-DDTHH:mm:ss.SSS',   
		        defaultDate: 'YYYY-MM-DD',                             
		        defaultTime: 'HH:mm',                                
		        defaultTimeSecond: 'HH:mm:ss',                 
		        defaultTimeMillisecond: 'HH:mm:ss.SSS',           
		        defaultWeek: 'GGGG-[W]WW',    
		        defaultMonth: 'YYYY-MM'
			 },

			get : function( arg ){
				if( arg ){
					return this[ arg ]();
				}
			},

			set : function( arg, val ) {
				if( arg ) {
					if( val.constructor == Object ) {
						for( var key in val ) {
							this[ key ]( val[ key ] );
						}
						return this
					} else {
						return this[ arg ]( val );
					}
				}
			},

			constructFormat : constructFormat,

			i18N : i18N
		})

		new Array( { prop : 'date', array : [ proto.weekLong, proto.weekShort, proto.weekMid] }, { prop : 'day', array : [ proto.weekLong, proto.weekShort, proto.weekMid] } , { prop : 'month', array : [ proto.shortMon, proto.longMon ] }, { prop : 'year'}, { prop : 'fullYear' }, { prop : 'hours' }, { prop : 'minutes' }, { prop : 'seconds' }, { prop : 'milliseconds' },{ prop : 'UTCMilliseconds' }, { prop : 'time' } ).forEach( function( val ) {
			
			proto[ val.prop ] = function( arg ){
				if( this.validate() ) {
					var dob = this.toDate();
					var prop = val.prop[ 0 ].toUpperCase() + val.prop.slice( 1 );
					if( this.isDef( arg ) ) {
						if( arg.constructor == String ) {
							for( var i = 0; i < val.array.length; i++ ) {
								var ret = this.find( val.array[ i ], arg )
								if( ret.mon ) {
									arg = ret.index;
									break;
								}
							}
						} else if( arg.constructor == Number && Math.floor( arg ) != arg ) {
							if( val.prop == 'year' ) {
								val.prop = 'month';
								arg = Math.round( arg * 12 );
							} else {
								arg = Math.round( arg )
							}
						}
						if( val.prop == 'day' ) {
							dob.setDate( dob.getDate() + ( arg - dob.getDay() ) );
						} else{
							dob[ 'set' + prop ]( arg );
						}
						return this;
					} else {
						return dob[ 'get' + prop ]();
					}
				}
			}
		});

		$L.extend( proto, {
			week : function( arg ) {
				if( this.validate() ) {
					var dob = this.toDate();
					if( this.isDef( arg ) ) {
						dob.setDate( dob.getDate() + ( arg - this.week() ) * 7 );
						return this;
					} else{
						return this.getWeekReverse( dob, 1 ).week;
					}
				}
			},

			quarter : function( arg ) {
				if( this.validate() ) {
					var dob = this.toDate();
					if( this.isDef( arg ) ) {
						var mon = dob.getMonth();
						dob.setMonth( dob.getMonth() + ( arg - this.quarter() ) * 3 );
						return this;
					} else{
						return Math.ceil( dob.getMonth() / 3 );
					}
				}
			},

			add : function( val, prop, cyclic ) {

				if( val < 0 ){
					return this.subtract( Math.abs( val ), prop, cyclic );
				}

				if( this.validate() ) {
					var dob = this.toDate();
					if( this.isDef( prop ) ) {
					 	var old_time = dob.getTimezoneOffset(),
					 	newmoment = this.set( prop, this.get( prop ) + val );
					 	if( cyclic ){
							return convertCyclic.call( this, newmoment );
						}
						return newmoment;
					}
				}
			},

			subtract : function( val, prop, cyclic ) {

				if( val < 0 ){
					return this.add( Math.abs( val ), prop, cyclic );
				}

				if( this.validate() ) {
					var dob = this.toDate();
					if( this.isDef( prop ) ) {
						var newmoment = this.set( prop, this.get( prop ) - val );
						if( cyclic ){
							return convertCyclic.call( this, newmoment );
						}
						return newmoment;
					}
				}
			},

			modify : function( val, prop, cyclic ){

				if( this.validate() ){

					if( prop == "month" ){
						if( val > 0 ){
							add_value.call( this, val );
						} else {
							deduct_value.call( this, Math.abs( val ) );
						}
					} else{
						this.add( val, prop, cyclic );
					}

					if( cyclic ){
						convertCyclic.call( this, this );
					}

					return this;
				}
			},

			startOf : function( prop ){
				if( this.validate() ){
					var dob = this.toDate(),
					flag,
					format = this.format(),
					replace = [],
					year = Number( format.slice( 0, 4 ) ),
					month = Number( format.slice( 5, 7 ) ),
					date = Number( format.slice( 8, 10 ) ),
					hour = Number( format.slice( 11, 13 ) ),
					minute = Number( format.slice( 14, 16 ) ),
					second = Number( format.slice( 17, 19 ) ),
					milliseconds = dob.getMilliseconds(),
					to_deduct = 0,
					old_time = this.timezoneOffset( dob );

					prop = ( prop || "" ).toLowerCase();

					if( prop == "week" ){
						var weekLong = this.weekLong,
						name = this.format( 'dddd' ),
						wod = this.wod,
						__index = weekLong.indexOf( name ),
						diff = ( __index - wod + 7 ) % 7;
						to_deduct = diff * 24 * 60 * 60 * 1e3;
						flag = true;
						prop = "hour";
					}

					switch( prop ){
						case "year" : {
							flag = true;
						}
						case "month" : {
							if( flag ){
								to_deduct += this.totdate( month - 1, this.isLeap( year ) ) * 24 * 60 * 60 * 1e3;
							}
							flag = true;
						}
						case "date" : 
						case "day" : {
							if( flag ){
								to_deduct += ( date - 1 ) * 24 * 60 * 60 * 1e3;
							}
							flag = true;
						}
						case "hour" : {
							if( flag ){
								to_deduct += hour * 60 * 60 * 1e3;
							}
							flag = true;
						}
						case "minute" : {
							if( flag ){
								to_deduct += minute * 60 * 1e3;
							}
							flag = true;
						}
						case "second" : {
							if( flag ){
								to_deduct += second * 1e3;
							}
						}
					}

					if( to_deduct ){
						dob.setTime( dob.getTime() - to_deduct - milliseconds );

						var new_time = this.timezoneOffset( dob ),
						diff = new_time - old_time;

						if( diff ){
							dob.setTime( dob.getTime() + diff * 60 * 1e3 );
						}
					}

					return this;
				}
			},

			endOf : function( prop ){
				if( this.validate() ){

					this.startOf( prop );

					var dob = this.toDate(),
					format = this.format(),
					replace = [],
					year = Number( format.slice( 0, 4 ) ),
					month = Number( format.slice( 5, 7 ) ),
					date = Number( format.slice( 8, 10 ) ),
					hour = Number( format.slice( 11, 13 ) ),
					minute = Number( format.slice( 14, 16 ) ),
					second = Number( format.slice( 17, 19 ) ),
					milliseconds = dob.getMilliseconds(),
					to_add = 0,
					old_time = this.timezoneOffset( dob );

					prop = ( prop || "" ).toLowerCase();

					if( prop == "week" ){
						to_add += 7 * 24 * 60 * 60 * 1e3;
					}

					switch( prop ){
						case "year" : {
							to_add += this.totdate( 12, this.isLeap( year ) ) * 24 * 60 * 60 * 1e3;
						}
						break;
						case "month" : {
							var is_leap = this.isLeap( year );

							to_add += ( this.totdate( month, is_leap ) - this.totdate( month - 1, is_leap ) ) * 24 * 60 * 60 * 1e3;	
						}
						break;
						case "date" : 
						case "day" : {
							to_add += ( 24 - hour ) * 60 * 60 * 1e3;
						}
						break;
						case "hour" : {
							to_add += ( 60 - minute ) * 60 * 1e3;
						}
						break
						case "minute" : {
							to_add += ( 60 - second ) * 1e3;
						}
						break;
						case 'second' : {
							to_add += 1e3;
						}
					}

					if( to_add ){
						dob.setTime( dob.getTime() + to_add - 1 );

						var new_time = this.timezoneOffset( dob ),
						diff = new_time - old_time;

						if( diff ){
							dob.setTime( dob.getTime() + diff * 60 * 1e3 );
						}
					}

					return this;
				}
			},

			fromNow : function( arg, to_accurate ){
				if( this.validate() ){
					var today = this,
					past_date = $L.moment( arg );

					if( !past_date.validate() ){
						return;
					}

					var old_time = today.get( 'time' ),
					new_time = past_date.get(  'time' ),
					diff = parseInt( ( new_time - old_time ) / 1000 ),
					past = diff < 0,
					limits = { years : { val : 320 * 24 * 60 * 60, conv : 365 * 24 * 60 * 60 }, months : { val : 26 * 24 * 60 * 60, conv : 30 * 24 * 60 * 60 }, days : { val : 22 * 60 * 60, conv : 24 * 60 * 60 }, hours : { val : 45 * 60, conv : 60 * 60 }, minutes : { val : 44, conv : 60 }, seconds : { val : 0, conv : 1 } },
					timestamp = new_time - old_time,
					ns1 = to_accurate ? 'conv' : 'val',
					ns2 = to_accurate ? 'floor' : 'round',
					fn = function( _diff, obj ){
						var key,
						value;

						for( key in limits ){
							if( _diff >= limits[ key ][ ns1 ] ) {
								window.val = Math[ ns2 ]( _diff / limits[ key ].conv );
								value = val;

								var new_diff = _diff - val * limits[ key ].conv;
								if( new_diff > 0 ){
									fn( new_diff, obj );
								}
								break;
							}
						}

						obj[ key ] = { value : value };

						return {
							property : key,
							value : value
						};
					},
					obj = { past : past, timestamp : timestamp };

					diff = Math.abs( diff ); 

					return $L.extend( obj, fn( diff, obj ) );
				}
			},

			isDst : function(){

				if( this.validate() ){
					var __start = $L.moment( this ).startOf( 'day' ),
					__end = $L.moment( this ).endOf( 'day' );

					this.__start = __start;
					this.__end = __end;
					
					return __start.format( 'Z' ) != __end.format( 'Z' );
				}

				return false;
			},

			dstPoint : function( time_format, increment ){
				if( this.validate() && this.isDst() ){
					var start = $L.moment( this.__start ),
					format = start.format( 'Z' ),
					change,
					count = 0,
					limit;

					increment = increment || 30;
					limit = 1440 / increment;
					time_format = time_format || "HH:mm:ss";

					while( count < limit ){
						var new_format = start.add( increment, 'minutes' ).format( 'Z' ),
						rgx = /(\+|\-)(\d{2}):(\d{2})$/;
						if( format !=  new_format ){
							var diff = this.convertTimeZone( format.match( rgx ) ) - this.convertTimeZone( new_format.match( rgx ) );

							change = {
								moment : $L.moment( start ).subtract( 1, 'seconds' ),
								time : start.add( 1, 'day' ).subtract( diff, 'minutes' ).format( time_format ),
								value : diff,
								timeZoneOld : format,
								timeZoneNew : new_format
							};

							break;
						}
						count++;
					}	

					return change;
				}
			},

			getWeekDays : function( start, end ){

				if( this.validate() ){
					start = start == void 0 ? 1 : start;
					end = end == void 0 ? 5 : end;

					if( end < start ){
						end += 7;
					}

					var dobj = this.getDObj(),
					__time = dobj.getTime(),
					__day = dobj.getDay(),
					final = [],
					diff = end - start,
					off = __day - start,
					one_day = 24 * 60 * 60 * 1e3;

					for( var i = 0; i <= diff; i++ ){
						final.push( $L.moment( new Date( __time - ( off - i ) * one_day ) ) );
					}

					return final;
				}
			}
		} );

		function convertCyclic( newmoment ){
			var dob = this.toDate();
			
			dob.setFullYear( parseInt( this.getCorrectYear( this.crctLength( Number( this.format( 'YYYY' ) ) % 100, 2 ) ) ) );
			return this;
		}

		function i18N( format, callBack, convert_numbers ){
			if( this.validate() ){

				if( callBack == true ){
					convert_numbers = callBack;
					callBack = void 0;
				} else if( format == true ){
					convert_numbers = format;
					format = void 0;
				}

				format = format || "YYYY-MM-DDTHH:mm:ssZ";

				var parsed = this.parseFormat( this.replaceTxt( format ) ).reverse();
				format = format.replace( /{{|}}/g, '' );

				if( convert_numbers ){
					convert_numbers = window._lyteUiUtils ? window._lyteUiUtils.i18n( "1" ) != "1" : false;
				}

				parsed.forEach( function( item ){
					var __format = item.format,
					value = __format.val,
					formatted = this.format( value ),
					i18ned = window._lyteUiUtils && !/^[0-9]$/.test( formatted || "" ) ? window._lyteUiUtils.i18n( formatted ) : formatted,
					index = item.index;

					if( convert_numbers && !__format.str ){
						for( var i = 0; i < 10; i++ ){
							i18ned = i18ned.replace( new RegExp( i, "g" ) , window._lyteUiUtils.i18n( i.toString() ) );
						}
					}

					format = format.slice( 0, index ) + ( callBack ? callBack( formatted, i18ned, value ) : i18ned ) + format.slice( index + value.length );
				}.bind( this ) );

				return format;
			}
		}

		function add_value( value ){

			var ref_date = parseInt( this.format( 'DD' ) );

			while( value-- ){
				var ref_moment = $L.moment( this ).endOf( 'month' ), 
				cur_end = parseInt( ref_moment.format( 'DD' ) ),
				end = parseInt( ref_moment.add( 1, 'milliseconds' ).endOf( 'month' ).format( 'DD' ) ),
				to_add = Math.max( cur_end, ref_date ) - ref_date + Math.min( ref_date, end );

				this.add( to_add, 'day' );
			}

		}

		function deduct_value( value ){
			
			var ref_date = parseInt( this.format( 'DD' ) );

			while( value-- ){
				var ref_moment = $L.moment( this ).startOf( 'month' ), 
				cur_date = parseInt( this.format( 'DD' ) ),
				end = parseInt( ref_moment.subtract( 1, 'milliseconds' ).format( 'DD' ) ),
				to_subtract = cur_date + Math.max( 0, end - ref_date );

				this.subtract( to_subtract, 'day' );
			}
		}

	}
} );

/***/ }),

/***/ 84342124:
/*!***************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/plugins/lyte-moment-basic.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;( function( cb ){
	if( true ){
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! @zoho/lyte-dom */ 10891274) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (cb),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
} )( function( $L ){
	if( $L ){
		var shortMon = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ],
		longMon = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'  ],
		weekLong = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
		weekMid = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
		weekShort = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
		dayArr = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
		week = 'W', wod = 1,
		lm = "lyteMoment",
		uLimit = 19,
		lLimit = 80,
		timeZoneOffsets = {"Etc/GMT+12":-720,"Etc/GMT+11":-660,"Pacific/Midway":-660,"Pacific/Niue":-660,"Pacific/Pago_Pago":-660,"Pacific/Samoa":-660,"US/Samoa":-660,"America/Adak":-540,"America/Atka":-540,"Etc/GMT+10":-600,"HST":-600,"Pacific/Honolulu":-600,"Pacific/Johnston":-600,"Pacific/Rarotonga":-600,"Pacific/Tahiti":-600,"SystemV/HST10":-600,"US/Aleutian":-540,"US/Hawaii":-600,"Pacific/Marquesas":-510,"AST":-480,"America/Anchorage":-480,"America/Juneau":-480,"America/Metlakatla":-480,"America/Nome":-480,"America/Sitka":-480,"America/Yakutat":-480,"Etc/GMT+9":-540,"Pacific/Gambier":-540,"SystemV/YST9":-540,"SystemV/YST9YDT":-480,"US/Alaska":-480,"America/Ensenada":-420,"America/Los_Angeles":-420,"America/Santa_Isabel":-420,"America/Tijuana":-420,"America/Vancouver":-420,"Canada/Pacific":-420,"Etc/GMT+8":-480,"Mexico/BajaNorte":-420,"PST":-480,"PST8PDT":-420,"Pacific/Pitcairn":-480,"SystemV/PST8":-480,"SystemV/PST8PDT":-420,"US/Pacific":-420,"America/Boise":-360,"America/Cambridge_Bay":-360,"America/Chihuahua":-360,"America/Creston":-420,"America/Dawson":-420,"America/Dawson_Creek":-420,"America/Denver":-360,"America/Edmonton":-360,"America/Fort_Nelson":-420,"America/Hermosillo":-420,"America/Inuvik":-360,"America/Mazatlan":-360,"America/Ojinaga":-360,"America/Phoenix":-420,"America/Shiprock":-360,"America/Whitehorse":-420,"America/Yellowknife":-360,"Canada/Mountain":-360,"Canada/Yukon":-420,"Etc/GMT+7":-420,"MST":-420,"MST7MDT":-360,"Mexico/BajaSur":-360,"Navajo":-360,"PNT":-420,"SystemV/MST7":-420,"SystemV/MST7MDT":-360,"US/Arizona":-420,"US/Mountain":-360,"America/Bahia_Banderas":-300,"America/Belize":-360,"America/Chicago":-300,"America/Costa_Rica":-360,"America/El_Salvador":-360,"America/Guatemala":-360,"America/Indiana/Knox":-300,"America/Indiana/Tell_City":-300,"America/Knox_IN":-300,"America/Managua":-360,"America/Matamoros":-300,"America/Menominee":-300,"America/Merida":-300,"America/Mexico_City":-300,"America/Monterrey":-300,"America/North_Dakota/Beulah":-300,"America/North_Dakota/Center":-300,"America/North_Dakota/New_Salem":-300,"America/Rainy_River":-300,"America/Rankin_Inlet":-300,"America/Regina":-360,"America/Resolute":-300,"America/Swift_Current":-360,"America/Tegucigalpa":-360,"America/Winnipeg":-300,"CST":-360,"CST6CDT":-300,"Canada/Central":-300,"Canada/Saskatchewan":-360,"Chile/EasterIsland":-360,"Etc/GMT+6":-360,"Mexico/General":-300,"Pacific/Easter":-360,"Pacific/Galapagos":-360,"SystemV/CST6":-360,"SystemV/CST6CDT":-300,"US/Central":-300,"US/Indiana-Starke":-300,"America/Atikokan":-300,"America/Bogota":-300,"America/Cancun":-300,"America/Cayman":-300,"America/Coral_Harbour":-300,"America/Detroit":-240,"America/Eirunepe":-300,"America/Fort_Wayne":-240,"America/Grand_Turk":-240,"America/Guayaquil":-300,"America/Havana":-240,"America/Indiana/Indianapolis":-240,"America/Indiana/Marengo":-240,"America/Indiana/Petersburg":-240,"America/Indiana/Vevay":-240,"America/Indiana/Vincennes":-240,"America/Indiana/Winamac":-240,"America/Indianapolis":-240,"America/Iqaluit":-240,"America/Jamaica":-300,"America/Kentucky/Louisville":-240,"America/Kentucky/Monticello":-240,"America/Lima":-300,"America/Louisville":-240,"America/Montreal":-240,"America/Nassau":-240,"America/New_York":-240,"America/Nipigon":-240,"America/Panama":-300,"America/Pangnirtung":-240,"America/Port-au-Prince":-240,"America/Porto_Acre":-300,"America/Rio_Branco":-300,"America/Thunder_Bay":-240,"America/Toronto":-240,"Brazil/Acre":-300,"Canada/Eastern":-240,"Cuba":-240,"EST":-300,"EST5EDT":-240,"Etc/GMT+5":-300,"IET":-240,"Jamaica":-300,"SystemV/EST5":-300,"SystemV/EST5EDT":-240,"US/East-Indiana":-240,"US/Eastern":-240,"US/Michigan":-240,"America/Anguilla":-240,"America/Antigua":-240,"America/Aruba":-240,"America/Asuncion":-240,"America/Barbados":-240,"America/Blanc-Sablon":-240,"America/Boa_Vista":-240,"America/Campo_Grande":-240,"America/Caracas":-240,"America/Cuiaba":-240,"America/Curacao":-240,"America/Dominica":-240,"America/Glace_Bay":-180,"America/Goose_Bay":-180,"America/Grenada":-240,"America/Guadeloupe":-240,"America/Guyana":-240,"America/Halifax":-180,"America/Kralendijk":-240,"America/La_Paz":-240,"America/Lower_Princes":-240,"America/Manaus":-240,"America/Marigot":-240,"America/Martinique":-240,"America/Moncton":-180,"America/Montserrat":-240,"America/Port_of_Spain":-240,"America/Porto_Velho":-240,"America/Puerto_Rico":-240,"America/Santiago":-240,"America/Santo_Domingo":-240,"America/St_Barthelemy":-240,"America/St_Kitts":-240,"America/St_Lucia":-240,"America/St_Thomas":-240,"America/St_Vincent":-240,"America/Thule":-180,"America/Tortola":-240,"America/Virgin":-240,"Atlantic/Bermuda":-180,"Brazil/West":-240,"Canada/Atlantic":-180,"Chile/Continental":-240,"Etc/GMT+4":-240,"PRT":-240,"SystemV/AST4":-240,"SystemV/AST4ADT":-180,"America/St_Johns":-90,"CNT":-90,"Canada/Newfoundland":-90,"AGT":-180,"America/Araguaina":-180,"America/Argentina/Buenos_Aires":-180,"America/Argentina/Catamarca":-180,"America/Argentina/ComodRivadavia":-180,"America/Argentina/Cordoba":-180,"America/Argentina/Jujuy":-180,"America/Argentina/La_Rioja":-180,"America/Argentina/Mendoza":-180,"America/Argentina/Rio_Gallegos":-180,"America/Argentina/Salta":-180,"America/Argentina/San_Juan":-180,"America/Argentina/San_Luis":-180,"America/Argentina/Tucuman":-180,"America/Argentina/Ushuaia":-180,"America/Bahia":-180,"America/Belem":-180,"America/Buenos_Aires":-180,"America/Catamarca":-180,"America/Cayenne":-180,"America/Cordoba":-180,"America/Fortaleza":-180,"America/Godthab":-120,"America/Jujuy":-180,"America/Maceio":-180,"America/Mendoza":-180,"America/Miquelon":-120,"America/Montevideo":-180,"America/Nuuk":-120,"America/Paramaribo":-180,"America/Punta_Arenas":-180,"America/Recife":-180,"America/Rosario":-180,"America/Santarem":-180,"America/Sao_Paulo":-180,"Antarctica/Palmer":-180,"Antarctica/Rothera":-180,"Atlantic/Stanley":-180,"BET":-180,"Brazil/East":-180,"Etc/GMT+3":-180,"America/Noronha":-120,"Atlantic/South_Georgia":-120,"Brazil/DeNoronha":-120,"Etc/GMT+2":-120,"America/Scoresbysund":0,"Atlantic/Azores":0,"Atlantic/Cape_Verde":-60,"Etc/GMT+1":-60,"Africa/Abidjan":0,"Africa/Accra":0,"Africa/Bamako":0,"Africa/Banjul":0,"Africa/Bissau":0,"Africa/Casablanca":0,"Africa/Conakry":0,"Africa/Dakar":0,"Africa/El_Aaiun":0,"Africa/Freetown":0,"Africa/Lome":0,"Africa/Monrovia":0,"Africa/Nouakchott":0,"Africa/Ouagadougou":0,"Africa/Sao_Tome":0,"Africa/Timbuktu":0,"America/Danmarkshavn":0,"Antarctica/Troll":120,"Atlantic/Canary":60,"Atlantic/Faeroe":60,"Atlantic/Faroe":60,"Atlantic/Madeira":60,"Atlantic/Reykjavik":0,"Atlantic/St_Helena":0,"Eire":60,"Etc/GMT":-0,"Etc/GMT+0":-0,"Etc/GMT-0":-0,"Etc/GMT0":-0,"Etc/Greenwich":-0,"Etc/UCT":-0,"Etc/UTC":-0,"Etc/Universal":-0,"Etc/Zulu":-0,"Europe/Belfast":60,"Europe/Dublin":60,"Europe/Guernsey":60,"Europe/Isle_of_Man":60,"Europe/Jersey":60,"Europe/Lisbon":60,"Europe/London":60,"GB":60,"GB-Eire":60,"GMT":0,"GMT0":0,"Greenwich":0,"Iceland":0,"Portugal":60,"UCT":0,"UTC":0,"Universal":0,"WET":60,"Zulu":0,"Africa/Algiers":60,"Africa/Bangui":60,"Africa/Brazzaville":60,"Africa/Ceuta":120,"Africa/Douala":60,"Africa/Kinshasa":60,"Africa/Lagos":60,"Africa/Libreville":60,"Africa/Luanda":60,"Africa/Malabo":60,"Africa/Ndjamena":60,"Africa/Niamey":60,"Africa/Porto-Novo":60,"Africa/Tunis":60,"Arctic/Longyearbyen":120,"Atlantic/Jan_Mayen":120,"CET":120,"ECT":120,"Etc/GMT-1":60,"Europe/Amsterdam":120,"Europe/Andorra":120,"Europe/Belgrade":120,"Europe/Berlin":120,"Europe/Bratislava":120,"Europe/Brussels":120,"Europe/Budapest":120,"Europe/Busingen":120,"Europe/Copenhagen":120,"Europe/Gibraltar":120,"Europe/Ljubljana":120,"Europe/Luxembourg":120,"Europe/Madrid":120,"Europe/Malta":120,"Europe/Monaco":120,"Europe/Oslo":120,"Europe/Paris":120,"Europe/Podgorica":120,"Europe/Prague":120,"Europe/Rome":120,"Europe/San_Marino":120,"Europe/Sarajevo":120,"Europe/Skopje":120,"Europe/Stockholm":120,"Europe/Tirane":120,"Europe/Vaduz":120,"Europe/Vatican":120,"Europe/Vienna":120,"Europe/Warsaw":120,"Europe/Zagreb":120,"Europe/Zurich":120,"MET":120,"Poland":120,"ART":120,"Africa/Blantyre":120,"Africa/Bujumbura":120,"Africa/Cairo":120,"Africa/Gaborone":120,"Africa/Harare":120,"Africa/Johannesburg":120,"Africa/Khartoum":120,"Africa/Kigali":120,"Africa/Lubumbashi":120,"Africa/Lusaka":120,"Africa/Maputo":120,"Africa/Maseru":120,"Africa/Mbabane":120,"Africa/Tripoli":120,"Africa/Windhoek":120,"Asia/Amman":180,"Asia/Beirut":180,"Asia/Damascus":180,"Asia/Famagusta":180,"Asia/Gaza":180,"Asia/Hebron":180,"Asia/Jerusalem":180,"Asia/Nicosia":180,"Asia/Tel_Aviv":180,"CAT":120,"EET":180,"Egypt":120,"Etc/GMT-2":120,"Europe/Athens":180,"Europe/Bucharest":180,"Europe/Chisinau":180,"Europe/Helsinki":180,"Europe/Kaliningrad":120,"Europe/Kiev":180,"Europe/Mariehamn":180,"Europe/Nicosia":180,"Europe/Riga":180,"Europe/Sofia":180,"Europe/Tallinn":180,"Europe/Tiraspol":180,"Europe/Uzhgorod":180,"Europe/Vilnius":180,"Europe/Zaporozhye":180,"Israel":180,"Libya":120,"Africa/Addis_Ababa":180,"Africa/Asmara":180,"Africa/Asmera":180,"Africa/Dar_es_Salaam":180,"Africa/Djibouti":180,"Africa/Juba":180,"Africa/Kampala":180,"Africa/Mogadishu":180,"Africa/Nairobi":180,"Antarctica/Syowa":180,"Asia/Aden":180,"Asia/Baghdad":180,"Asia/Bahrain":180,"Asia/Istanbul":180,"Asia/Kuwait":180,"Asia/Qatar":180,"Asia/Riyadh":180,"EAT":180,"Etc/GMT-3":180,"Europe/Istanbul":180,"Europe/Kirov":180,"Europe/Minsk":180,"Europe/Moscow":180,"Europe/Simferopol":180,"Indian/Antananarivo":180,"Indian/Comoro":180,"Indian/Mayotte":180,"Turkey":180,"W-SU":180,"Asia/Tehran":270,"Iran":270,"Asia/Baku":240,"Asia/Dubai":240,"Asia/Muscat":240,"Asia/Tbilisi":240,"Asia/Yerevan":240,"Etc/GMT-4":240,"Europe/Astrakhan":240,"Europe/Samara":240,"Europe/Saratov":240,"Europe/Ulyanovsk":240,"Europe/Volgograd":240,"Indian/Mahe":240,"Indian/Mauritius":240,"Indian/Reunion":240,"NET":240,"Asia/Kabul":270,"Antarctica/Mawson":300,"Asia/Aqtau":300,"Asia/Aqtobe":300,"Asia/Ashgabat":300,"Asia/Ashkhabad":300,"Asia/Atyrau":300,"Asia/Dushanbe":300,"Asia/Karachi":300,"Asia/Oral":300,"Asia/Qyzylorda":300,"Asia/Samarkand":300,"Asia/Tashkent":300,"Asia/Yekaterinburg":300,"Etc/GMT-5":300,"Indian/Kerguelen":300,"Indian/Maldives":300,"PLT":300,"Asia/Calcutta":330,"Asia/Colombo":330,"Asia/Kolkata":330,"IST":330,"Asia/Kathmandu":345,"Asia/Katmandu":345,"Antarctica/Vostok":360,"Asia/Almaty":360,"Asia/Bishkek":360,"Asia/Dacca":360,"Asia/Dhaka":360,"Asia/Kashgar":360,"Asia/Omsk":360,"Asia/Qostanay":360,"Asia/Thimbu":360,"Asia/Thimphu":360,"Asia/Urumqi":360,"BST":360,"Etc/GMT-6":360,"Indian/Chagos":360,"Asia/Rangoon":390,"Asia/Yangon":390,"Indian/Cocos":390,"Antarctica/Davis":420,"Asia/Bangkok":420,"Asia/Barnaul":420,"Asia/Ho_Chi_Minh":420,"Asia/Hovd":420,"Asia/Jakarta":420,"Asia/Krasnoyarsk":420,"Asia/Novokuznetsk":420,"Asia/Novosibirsk":420,"Asia/Phnom_Penh":420,"Asia/Pontianak":420,"Asia/Saigon":420,"Asia/Tomsk":420,"Asia/Vientiane":420,"Etc/GMT-7":420,"Indian/Christmas":420,"VST":420,"Asia/Brunei":480,"Asia/Choibalsan":480,"Asia/Chongqing":480,"Asia/Chungking":480,"Asia/Harbin":480,"Asia/Hong_Kong":480,"Asia/Irkutsk":480,"Asia/Kuala_Lumpur":480,"Asia/Kuching":480,"Asia/Macao":480,"Asia/Macau":480,"Asia/Makassar":480,"Asia/Manila":480,"Asia/Shanghai":480,"Asia/Singapore":480,"Asia/Taipei":480,"Asia/Ujung_Pandang":480,"Asia/Ulaanbaatar":480,"Asia/Ulan_Bator":480,"Australia/Perth":480,"Australia/West":480,"CTT":480,"Etc/GMT-8":480,"Hongkong":480,"PRC":480,"Singapore":480,"Australia/Eucla":525,"Asia/Chita":540,"Asia/Dili":540,"Asia/Jayapura":540,"Asia/Khandyga":540,"Asia/Pyongyang":540,"Asia/Seoul":540,"Asia/Tokyo":540,"Asia/Yakutsk":540,"Etc/GMT-9":540,"JST":540,"Japan":540,"Pacific/Palau":540,"ROK":540,"ACT":570,"Australia/Adelaide":570,"Australia/Broken_Hill":570,"Australia/Darwin":570,"Australia/North":570,"Australia/South":570,"Australia/Yancowinna":570,"AET":600,"Antarctica/DumontDUrville":600,"Antarctica/Macquarie":600,"Asia/Ust-Nera":600,"Asia/Vladivostok":600,"Australia/ACT":600,"Australia/Brisbane":600,"Australia/Canberra":600,"Australia/Currie":600,"Australia/Hobart":600,"Australia/Lindeman":600,"Australia/Melbourne":600,"Australia/NSW":600,"Australia/Queensland":600,"Australia/Sydney":600,"Australia/Tasmania":600,"Australia/Victoria":600,"Etc/GMT-10":600,"Pacific/Chuuk":600,"Pacific/Guam":600,"Pacific/Port_Moresby":600,"Pacific/Saipan":600,"Pacific/Truk":600,"Pacific/Yap":600,"Australia/LHI":630,"Australia/Lord_Howe":630,"Antarctica/Casey":660,"Asia/Magadan":660,"Asia/Sakhalin":660,"Asia/Srednekolymsk":660,"Etc/GMT-11":660,"Pacific/Bougainville":660,"Pacific/Efate":660,"Pacific/Guadalcanal":660,"Pacific/Kosrae":660,"Pacific/Norfolk":660,"Pacific/Noumea":660,"Pacific/Pohnpei":660,"Pacific/Ponape":660,"SST":660,"Antarctica/McMurdo":720,"Antarctica/South_Pole":720,"Asia/Anadyr":720,"Asia/Kamchatka":720,"Etc/GMT-12":720,"Kwajalein":720,"NST":720,"NZ":720,"Pacific/Auckland":720,"Pacific/Fiji":720,"Pacific/Funafuti":720,"Pacific/Kwajalein":720,"Pacific/Majuro":720,"Pacific/Nauru":720,"Pacific/Tarawa":720,"Pacific/Wake":720,"Pacific/Wallis":720,"NZ-CHAT":765,"Pacific/Chatham":765,"Etc/GMT-13":780,"MIT":780,"Pacific/Apia":780,"Pacific/Enderbury":780,"Pacific/Fakaofo":780,"Pacific/Tongatapu":780,"Etc/GMT-14":840,"Pacific/Kiritimati":840,"UT":0,"EDT":-240,"CDT":-300,"MDT":-360,"PDT":-420},
		
		timezone_regex = new RegExp( '(' + Object.keys( timeZoneOffsets ).join('|') + ')' ),

		default_timezone,
		default_offset,

		is_IE,

		formats = [
			{ val :'YYYY', type : 'year', regex : /\d{4}/, len : 4 },
			{ val : 'GGGG', type : 'year', regex : /\d{4}/, len : 4, isWEG : true }, 
			{ val : 'gggg', type : 'year', regex : /\d{4}/, len : 4, isWEG : true }, 
			{ val : 'YY', type : 'year', regex : /\d{2}/, len : 2 }, 
			{ val : 'GG', type : 'year', regex : /\d{2}/, len : 2, isWEG : true}, 
			{ val : 'gg', type : 'year', regex : /\d{2}/, len : 2, isWEG : true}, 
			{ val : 'MMMM', type : "month", regex : /[A-z]{3,}/, long : true, str : true, array : longMon }, 
			{ val : 'MMM', str : true, type : "month", regex : /[A-z]{3,}/, array : shortMon }, 
			{ val : 'Mo', suff : true, type : "month", regex : /\d{1,2}(?=st|nd|rd|th)/, max : 12 }, 
			{ val : 'MM', type : "month", regex : /\d{2}/, len : 2, max : 12, alt : true }, 
			{ val : 'M', type : "month", regex : /\d{1,2}/, max : 12 }, 
			{ val : 'DDDD', type : 'date', regex : /\d{3}/, len : 3, year : true }, 
			{ val : 'DDDo', type : 'date', suff : true, regex : /\d{1,3}(?=st|nd|rd|th)/, len : 3, year : true, ignore : /\d{3}(?=st|nd|rd|th)/ }, 
			{ val : 'DDD', type : 'date', regex : /\d{1,3}/, year : true, ignore : /\d{3}/}, 
			{ val : 'Do', type : 'date', suff : true , regex : /\d{1,2}(?=st|nd|rd|th)/ }, 
			{ val : 'DD', type : 'date', regex : /\d{2}/, len : 2, alt : true }, 
			{ val : 'D', type : 'date', regex : /\d{1,2}/ }, 
			{ val : '[' + week + ']Wo', type : 'week', suff : true, regex : new RegExp('\[' + week + '\]\d{1,2}(?=st|nd|th|rd)'), isWEG : true },
			{ val : '[' + week + ']wo', ignore : 1, type : 'week', suff : true, regex : new RegExp('\[' + week + '\]\d{1,2}(?=st|nd|th|rd)'), isWEG : true }, 
			{ val : '[' + week + ']WW', type : 'week', regex : new RegExp( week +'(\\d{2})'), len : 2, isWEG : true, match : 1 }, 
			{ val : '[' + week + ']ww', ignore : 1, type : 'week', regex : new RegExp( week +'(\\d{2})'), len : 2, isWEG : true, match : 1 }, 
			{ val : '[' + week + ']W', type : 'week', regex : new RegExp( week +'(\\d{1,2})'), isWEG : true, match : 1 }, 
			{ val : '[' + week + ']w', ignore : 1, type : 'week', regex : new RegExp( week +'(\\d{1,2})'), isWEG : true, match : 1 }, 
			{ val : 'Wo', type : 'week', pref : 0, suff : true, regex : new RegExp('\[' + week + '\]\d{1,2}(?=st|nd|th|rd)'), isWEG : true },
			{ val : 'wo', type : 'week', pref : 0, ignore : 1, suff : true, regex : new RegExp('\[' + week + '\]\d{1,2}(?=st|nd|th|rd)'), isWEG : true }, 
			{ val : 'WW', type : 'week', pref : 0, regex : new RegExp( '(\\d{2})'), len : 2, isWEG : true, match : 1 }, 
			{ val : 'ww', type : 'week', pref : 0, ignore : 1, regex : new RegExp( '(\\d{2})'), len : 2, isWEG : true, match : 1 }, 
			{ val : 'W', type : 'week', pref : 0, regex : new RegExp( '(\\d{1,2})'), isWEG : true, match : 1 }, 
			{ val : 'w', type : 'week', pref : 0, ignore : 1, regex : new RegExp( '(\\d{1,2})'), isWEG : true, match : 1 }, 
			{ val : 'E', type : 'day', regex : /\d{1}/, isWEG : true }, 
			{ val : 'e', type : 'day', regex : /\d{1}/, isWEG : true, local : true }, 
			{ val : 'A', type : 'meridian', regex : /AM|PM/, str : true, time : true },
			{ val : 'a', type : 'meridian', regex : /am|pm/, str : true, time : true, lower : true },
			{ val : 'ZZ', type : 'timezone', regex : /(\+|\-)(\d{2})(\d{2})$/, time : true, len : 2 },
			{ val : 'Z', type : 'timezone', regex : /(\+|\-)(\d{2}):(\d{2})$/, time : true, len : 2 },
			{ val : 'HH', type : 'hour', regex : /\d{2}/, railway : true, time : true, len : 2, max : 23 },
			{ val : 'H', type : 'hour', regex : /\d{1,2}/, railway : true, time : true, max : 23 },
			{ val : 'hh', type : 'hour', regex : /\d{2}/, time : true, len : 2, max : 12, min : 1 },
			{ val : 'h', type : 'hour', regex : /\d{1,2}/, time : true, max : 12, min : 1 },
			{ val : 'kk', type : 'hour', regex : /\d{2}/, railway : true, time : true, len : 2, max : 24, deduct : -1 },
			{ val : 'k', type : 'hour', regex : /\d{1,2}/, railway : true, time : true, max : 24, deduct : -1 },
			{ val : 'mm', type : 'minute', regex : /\d{2}/, time : true, len : 2, max : 59 },
			{ val : 'm', type : 'minute', regex : /\d{1,2}/, time : true, max : 59 },
			{ val : 'ss', type : 'second', regex : /\d{2}/, time : true, len : 2, max : 59 },
			{ val : 's', type : 'second', regex : /\d{1,2}/, time : true, max : 59 },
			{ val : 'S', type : 'millisecond', regex : /[0-9]{1,}/, time : true, valForm : /[S]+/ },
			{ val : 'zz', type : 'timezone', regex : timezone_regex, str : true, time : true },
			{ val : 'z', type : 'timezone', regex : timezone_regex, str : true, time : true },
			{ val : 'X', type : 'timestamp', regex : /\d{10}/, time : true},
			{ val : 'x', type : 'timestamp', regex : /\d{13,}/, time : true, milli : true}, 
			{ val : 'dddd', type : "longdate", regex : /[A-z]{3,}/, long : true, str : true, array : weekLong },
			{ val : 'ddd', type : "longdate", regex : /[A-z]{3}/, str : true, array : weekMid },
			{ val : 'dd', type : "longdate", regex : /[A-z]{2}/, str : true, array : weekShort },
			{ val : 'do', type : "longdate", regex : /\d{1}(?=st|nd|rd|th)/, suff : true},
			{ val : 'd', type : 'longdate', regex : /\d{1}/ },
			{ val : 'Qo', type : 'quarter', regex : /\d{1}(?=st|nd|rd|th)/, suff : true }, 
			{ val : 'Q', type : 'quarter', regex : /\d{1}/ }
			];

			( function(){
			try{
				new Date().toLocaleString( "en-US", { timeZone: 'Europe/London' } )
				//    new Intl.DateTimeFormat('en-US', {
				//   year: 'numeric', month: 'numeric', day: 'numeric',
				//   hour: 'numeric', minute: 'numeric', second: 'numeric',
				//   timeZone: 'Europe/London'
				// }).format( new Date() );
			} catch( e ){
				is_IE = true;
			}
			})();

		function convert_frm_i18n( format, arg, number_conversion, callback ){

			var parsed = this.parseFormat( this.replaceTxt( format ) ).reverse();
			format = format.replace( /{{|}}/g, '' );

			parsed.forEach( function( item ){
				var arr = item.format.array || [],
				fn = window._lyteUiUtils;

				if( item.format.type == 'meridian' ){
					arr = item.format.lower ? [ 'am', 'pm' ] : [ 'AM', 'PM' ];
				}

				if( number_conversion && !item.format.str && fn && fn.i18n( "1" ) != "1" ){
					arr = [ "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ];
				}

				Array.from( arr ).reverse().forEach( function( _item ){
					var conv = fn ? fn.i18n( _item ) : _item ;

					if( callback ){
						conv = callback( arg, _item, conv, item.format.val ) || conv;
					}

					if( _item == conv ){
						return;
					}

					arg = replace_original( arg, _item, conv );
				});
			});
			return arg;
		}

		function replace_original( arg, original, i18n ){
			var index = arg.indexOf( i18n );
			if( index != -1 ){
				return replace_original( arg.replace( i18n, original ), original, i18n );
			}
			return arg;
		}

		function lyteMoment( arg, format, uL, lL ){

			if( arg ){
				this._arg = arg; 
			}
			this._format = format;
			var ret = isEmpty( arg ),
			convert_i18n,
			i18n_callback,
			ignore_timezone,
			instance_timezone,
			instance_offset,
			number_conversion,
			__wod;

			if( ret ) {
				arg = new Date();
			}

			if( uL && uL.constructor == Object ){
				lL = uL.lL;
				convert_i18n = uL.i18n;
				i18n_callback = uL.i18n_callback;
				ignore_timezone = uL.ignore_timezone;
				instance_timezone = uL.timezone;
				instance_offset = uL.timezoneOffset;
				__wod = uL.wod;
				number_conversion = uL.number_conversion;
				uL = uL.uL;
			}

			if( !ignore_timezone ){
				this.timezone( instance_timezone || default_timezone, instance_offset == void 0 ? default_offset : instance_offset );
			}

			if( convert_i18n && format && arg && arg.constructor == String ){
				arg = convert_frm_i18n.call( this, format, arg, number_conversion, i18n_callback );
			}

			this.uL = uL == undefined ? uLimit : uL;
			this.lL = lL == undefined ? lLimit : lL;
			this.wod = __wod == void 0 ? wod : __wod;

			if( !( isDef( uL ) && isDef( lL ) ) ){
				if( uL ){
					this.alt = true;		
				} else { 
					this.alt = false;
				}
			}
			this._isValid = validate.call( this, arg, format )
		}

		function isDef( arg ) {
			return arg != undefined;
		}

		function totdate( month, isLeap1, day ){
			var total = 0;
			for(var i = 0; i < month; i++ ) {
				total += dayArr[ i ];
				if( isLeap1 && i == 1 ) {
					total += 1;
				}
			} 
			return total + ( day || 0 );
		}

		function isEmpty( arg ){
			if( !arg ){
				return true;
			}
			var cons = arg.constructor;
			if( cons == Array && !cons.length ){
				return true;
			} else if( cons == Object && !Object.keys( arg ).length ){
				return true;
			}
			return false;

		}

		function isLeap( year ) {
			year = year + '';
			if( year.length == 2 ) {
				year = getCorrectYear( parseInt( year ) );
			}
			year = parseInt( year );
			return ( ( year % 4 == 0 ) && ( year % 100 != 0 ) ) || ( year % 400 == 0 );
		}

		function nthconv( date ) {
				if( date > 3 && date < 21 ) {
					return 'th'
				}
				switch ( date % 10 ) {
				case 1 :  return "st";
					case 2 :  return "nd";
					case 3 :  return "rd";
				default : return "th";
				}
		}

		function replaceTxt( format ) {
			var matches = format.match( /{{/ ), matches1 = format.match( /}}/ );
			if( !( matches && matches1 ) ) {
				return format;
			}
			format = format.replace( format.slice( matches.index, matches1.index + 2 ), function( arg ){
				var ret = ""
				for( var j = 0; j < arg.length - 4; j++ ) {
					ret += '*';
				}
				return ret;
			} )
			return replaceTxt( format );
		}

		function parseFormat( format, validate ) { 
			var forCopy = formats, order = [],
			prev;
			for( var i = 0; i < forCopy.length; i++ ) {
				var cur = forCopy[ i ];
				if( !format.length ) {
					break;
				}
				if( format.indexOf( cur.val ) > -1 ) {
					if( validate && cur.alt ){
						prev = true;
						continue;
					}

					cur = $L.extend( true, {}, cur );

					if( prev ){
						cur.val = forCopy[ i - 1 ].val;
					}
					prev = false;
					order.push( { format : cur, index : format.indexOf( cur.val ) });
					format = format.replace( cur.val, Math.pow( 10, cur.val.length - 1 ) );
					i--;
					continue;
				} 
			}
			return order.sort(function( a, b ){
					return a.index - b.index
				});
		}

		function fmReplace( arg, arr ) {
			var length = 0;
			for( var i = 0; i < arr.length; i++ ) {
				arg = arg.slice( 0, arr[ i ].index + length ) + arr[ i ].format.val + lm + arg.slice( arr[ i ].index + length + arr[ i ].format.val.length );
				length += 10;
			}
			return arg;
		}

		function replace( arg, val, suff, rep ) {
			arg = arg.replace( val, rep || "" );
			if( suff ) {
				arg = arg.replace( /st|nd|rd|th/, '' )
			}
			return arg;
		}

		function find( array, val ){
			array = array || [];

			var crct, i,
			__length = array.length;

			for( i = 0; i < __length; i++ ) {
				var __cur = array[ i ];

				if( new RegExp( __cur ).test( val ) ) {
					crct = __cur;
					break;
				}
			}
			return  { mon : crct, index : i };
		}

		function getMonth( val, suff, str, long ) {
			var mon;
			if( str ) {
				var ret = find( long ? longMon : shortMon, val );
				mon = ret.mon;
				val = ret.index;
				if( !mon || val > 11 ){
					val = "Invalid";
				}
			} else {
				val = parseInt( val ) - 1;
				if( val > 11 ) {
					val = 'Invalid';
				} 
			}

			return { val : val, mon : mon };
		}

		function convertTimeZone( arg ) {
			var ret,
			hour = parseInt( arg[ 2 ] ),
			minute = parseInt( arg[ 3 ] );

			ret = hour * 60 + minute;
			return arg[ 1 ] == '+' ? ( ret * -1 ) : ret;
		}

		function convertRailway( hour, pm ) {
			if( pm && hour < 12 ) {
				hour += 12;
			} else if( hour == 12 && !pm ) {
				hour = 0;
			}
			return hour;
		}

		function getDay( val, isLeap ) {
			var val = parseInt( val ), ini = 0, ind = 0, inc = dayArr[ 0 ];
			if( val > ( 365 + ( isLeap ? 1 : 0 ) ) ){
				return {};
			}
			while( ini + inc < val ) {
				ini += inc;
				ind++;
				inc = dayArr[ ind ]
				if( isLeap && ind == 1 ) {
					inc += 1;
				}
			}
			return { day : val - ini , mon : ind };
		}

		function getWeek( obj ) {
			if( obj.day != undefined || obj.week ) {
				// var dtt = new Date( obj.year , 0 ,1 );
				// if( !validate.call( this, dtt ) ) {
				// 	return {};
				// }
				// var dt = dtt.getDay(), isLeap1 = isLeap( obj.year || dtt.getFullYear() ),
				// total = wod + obj.week == 1 ? ( obj.day - dt + wod ) : ( obj.week == 2 ? ( 7 + wod - dt + obj.day ) : ( 7 + wod - dt + obj.day + ( obj.week - 2 ) * 7 ) )
				// if( total > ( 365 + ( isLeap1 ? 1 : 0 ) ) ) {
				// 	var newStart = new Date( obj.year + 1 , 0 ,1 ).getDay();
				// 	if( newStart > 4 ) {
				// 		obj.year += 1;
				// 		total = total - ( ( 365 + ( isLeap1 ? 1 : 0 ) ) );
				// 	}
				// }
				// if( total > ( 365 + ( isLeap1 ? 1 : 0 ) ) || obj.day == 0 || obj.day > 7 ) {
				// 	obj.month = obj.year = obj.date = 'Invalid';
				// 	return;
				// }
				// var ret = getDay( total, isLeap1 );
				// obj.month = ret.mon; obj.date = ret.day;

				var start = new Date( obj.year, 0, 1 );
				start.setDate( wod + ( ( obj.week || 1 ) - 1 ) * 7 + ( obj.day || 0 ) );

				if( obj.year == start.getFullYear() ){
					obj.month = start.getMonth();
					obj.date = start.getDate();
				} else {
					obj.month = obj.date = "Invalid";
				}
			}

			if( obj.year ) {
				var yr = parseInt( obj.year );
				if( yr < 100 ) {
					obj.year = getCorrectYear( yr );
				}
			}
			if( obj.month < 0 ) {
				obj.month = 'Invalid';
			}
			if( obj.date < 1 ) {
				obj.date = 'Invalid';
			}
		}

		function getWeekReverse( dobj, ignore ){
			var __wod = wod,
			timezone = this._timezone;

			if( timezone ){
				dobj = new Date( $L.moment( dobj ).timezone( timezone ).format( 'YYYY-MM-DD' ) );
			}

			if( __wod ){
				dobj = new Date( dobj );
				dobj.setDate( dobj.getDate() - __wod );
			}

			var ret = __getWeekReverse( dobj, ignore );

			return ret;
		}

		function __getWeekReverse( dobj, ignore ){
			var year = dobj.getFullYear(),
			is_leap = isLeap( year ),
			month = dobj.getMonth(),
			date = dobj.getDate(),
			__week_start = 0,
			__week_end = ( __week_start - 1 + 7 ) % 7,
			year_start = new Date( year, 0, __week_start + 1 ),
			startday = year_start.getDay(),
			start_date = year_start.getDate(),
			cur_day = dobj.getDay(),
			total = totdate( month, is_leap ) + date,
			days_without_ends = total - ( 7 - startday + __week_start ) - ( cur_day + 1 ),
			__weeks = ( days_without_ends / 7 ) + 1;

			if( month == 11 ){
				var year_end = new Date( year, 11, 31 + __week_start ),
				endday = year_end.getDay(),
				enddate = year_end.getDate(),
				exp_end = date + ( __week_end - endday + 7 ) % 7;

				if( exp_end > 31 + __week_start ){
					return {
						week : 1,
						day : cur_day
					};
				}
			} 

			__weeks++;

			return {
				week : __weeks,
				day : cur_day
			};
		}

		// function getWeekReverse( dobj, ignore ) {
		// 	var isLeap1 = isLeap( dobj.getFullYear() ), month = dobj.getMonth(), date = dobj.getDate(),
		// 	total = ignore ? 0 : - wod, startday = new Date( dobj.getFullYear(), 0 ).getDay();
		// 	total += totdate( month, isLeap1 );

		// 	if( !ignore ) {
		// 		if( month == 0 && startday > 4 && date < 3 ){

		// 			// isLeap1 = isLeap( dobj.getFullYear() - 1 );
		// 			// total = total + 365 + ( isLeap1 ? 1 : 0 );
		// 			// startday = new Date( dobj.getFullYear() - 1, 0 ).getDay();
		// 			// repYear = true;

		// 			var ret = getWeekReverse( new Date( dobj.getFullYear() - 1, 11, 31 ) );
		// 			ret.repYear = true;
		// 			ret.day = ret.day + date;

		// 			return ret;
		// 		} 
		// 	}

		// 		return { week : Math.ceil( ( total + startday + date ) / 7 ), day : dobj.getDay() + 1};
		// }	

		function getCorrectYear( year ){
			var copyYear = year + '';
			year = parseInt( year );

			if( copyYear.length == 2 ){
				var today = Number( $L.moment().format( 'YYYY' ) ),
				prefix = parseInt( today / 100 ),
				curTwodigit = today % 100,
				upperLimit = ( curTwodigit + ( this.uL || uLimit ) ) % 100,
				lowerLimit = ( curTwodigit - ( this.lL || lLimit ) + 100 ) % 100;

				if( curTwodigit > lowerLimit ){
					if( year < lowerLimit ){
						year = ( prefix + 1 ) + '' + crctLength( year, 2 );
					} else {
						year = prefix + '' + crctLength( year, 2 );
					}
				} else {
					if( year < lowerLimit ){
						year = prefix + '' + crctLength( year, 2 );
					} else {
						year = ( prefix - 1 ) + '' + crctLength( year, 2 );
					}
				}
			}
			return year;
		}

		function valFormat( arg, format ){
			var copyFormat = {}, 
			ret, 
			date,
			__new = new Date(),
			prseVal = parseFormat( replaceTxt( format ), true ), 
			copyArg = arg,
			format = format.replace(/{{|}}/g, ''),
			copyFormat1 = format,
			to_ret;

			for( var i = 0; i < prseVal.length; i++ ) {
				var ret, cur = prseVal[ i ].format;
				switch( cur.type ) {
					case 'date' :
					case 'year':
					case 'week' :
					case 'day' : {
						if( cur.regex.test(arg) ) {
							if( cur.type == "year" ){
								ret = arg.match( cur.regex )[ cur.match || 0 ];
							} else {
								ret = parseInt( arg.match( cur.regex )[ cur.match || 0 ] );
							}
							copyFormat[ cur.type ] = ret;
							arg = replace( arg, cur.regex, cur.suff );
							copyArg = replace( copyArg, cur.regex, cur.suff, cur.val );
							if( cur.type == 'week' ) {
								arg = replace( arg, week );
							}
							if( cur.type == 'day' && cur.local ) {
								copyFormat.day++;
							}
							if( cur.year ) {
								copyFormat.date = getDay( copyFormat.date ).day;
							}
						} else {
							if( copyFormat.year && copyFormat.week ) {
								copyFormat[ cur.type ] = wod;
								format = format.replace( cur.val, '' );
								copyFormat1 = copyFormat1.replace( cur.val, '' );
							} else {
								copyFormat[ cur.type ] = 'Invalid';
							}
						}
						if( /date/i.test( cur.type ) ){
							if( copyFormat[ cur.type ] == 0 ){
								copyFormat[ cur.type ] = 'Invalid';
							}
						}
						break;
					}
					case 'month' : {
						if( cur.regex.test(arg) ) {
							ret = getMonth( arg.match(  cur.regex )[ 0 ], cur.suff, cur.str, cur.long );
							copyFormat.month = ret.val;
							arg = replace( arg, ret.mon || ( cur.regex ), cur.suff );
							copyArg = replace( copyArg, ret.mon || ( cur.regex ), cur.suff, cur.val );
						} else {
							copyFormat.month = 'Invalid';
						}
						if( copyFormat.month < 0 ){
							copyFormat.month = 'Invalid';
						}
						break;
					}
					case 'quarter' : {
						if( cur.regex.test(arg) ) {
							ret = arg.match(  cur.regex )[ 0 ];
							copyFormat.quarter = ret;
							arg = replace( arg, ret, cur.suff );
							copyArg = replace( copyArg, ret, cur.suff, cur.val );
						}
						break;
					}
					case 'longdate' : {
						if( cur.regex.test(arg) ) {
							if( cur.str ) {
								ret = find( cur.array, arg.match(  cur.regex )[ 0 ] );
							} else {
								ret = parseInt( arg.match( cur.regex )[ 0 ] );
							}
							copyFormat.longdate = !isDef( ret.index ) ? ret : ret.index;
							arg = replace( arg, ret.mon || ret, cur.suff )
							copyArg = replace( copyArg, ret.mon || ret, cur.suff, cur.val );
						}
						break;
					}
					case 'hour' : 
					case 'minute' : 
					case 'second' :
					case 'meridian' : {
						if( cur.regex.test(arg) ) {
							if( cur.str ) {
								ret = arg.match( cur.regex )[ 0 ];
							} else {
								ret = parseInt( arg.match( cur.regex )[ 0 ] );
								if( cur.railway ) {
									copyFormat.railway = true;
								}
							}
							if( cur.deduct ) {
								ret--;
							}

							var __min = cur.min;

							if( ( cur.max && ret > cur.max ) || ( __min != void 0 && ret < __min ) ) {
								ret = 'Invalid';
							}

							copyFormat[ cur.type ] = ret;

							arg = replace( arg, cur.regex );
							copyArg = replace( copyArg, cur.regex, cur.suff, cur.val );
						}
						break;
					}
					case 'millisecond' : {
						if( cur.regex.test(arg) ) {
							ret = arg.match( cur.regex )[ 0 ];
							copyFormat.millisecond = parseFloat( ret );
							arg = replace( arg, ret ).replace(/[S]+/, '');
							copyArg = replace( copyArg, cur.regex, cur.suff, cur.val );
							copyFormat1 = copyFormat1.replace(/[S]+/, 'S');
						}
						break;
					}
					case 'timestamp' : {
						if( cur.regex.test(arg) ) {
							ret = parseInt( arg.match( cur.regex )[ 0 ] );
							copyFormat.timestamp = ret * ( cur.milli ? 1 : 1000 );
							arg = replace( arg, ret );
							copyArg = replace( copyArg, ret, cur.suff, cur.val );
						}
						break;
					}
					case 'timezone' : {
						if( cur.regex.test(arg) ) {
							if( cur.str ) {
								ret = arg.match( cur.regex )[ 0 ];
								ret = -timeZoneOffsets[ ret ];
							} else {
								ret = convertTimeZone( arg.match( cur.regex ) )
							}
							copyFormat.timezone = ret;
							arg = replace( arg, cur.regex );
							copyArg = replace( copyArg, cur.regex, cur.suff, cur.val );
						}
						break;
					}
				}
			format = format.replace( cur.valForm || cur.val, '' );
			}
				
			// date = new Date( __new.getFullYear(), isDef( copyFormat.month ) ? copyFormat.month : __new.getMonth(), copyFormat.date || 1 );
			// date = new Date( __new.getFullYear(), 0 );

			date = new Date( __new.getFullYear(), isDef( copyFormat.month ) ? copyFormat.month : __new.getMonth(), copyFormat.date || 1, copyFormat.hour || ( copyFormat.meridian == "PM" ? 12 : 0 ), copyFormat.minute || 0, copyFormat.second || 0 );

			if( isDef( copyFormat.day ) || isDef( copyFormat.week ) ){
				var oriDate = copyFormat.date
				if( !isDef( copyFormat.year ) ) {
					copyFormat.year = date.getFullYear();
				}
				if( !isDef( copyFormat.day ) ) {
					copyFormat.day = wod;
				} 
				getWeek.call( this, copyFormat );
				if( isDef( oriDate ) ){
					if( copyFormat.date > oriDate ) {
						copyFormat.month++;
					} 
					copyFormat.date = oriDate;
				}
			}
			if( isDef( copyFormat.longdate ) && copyFormat.day && copyFormat.day != copyFormat.longdate ) {
				date.setFullYear( 'Invalid' );
			} else if( isDef( copyFormat.year ) ) {
				date.setFullYear( getCorrectYear( copyFormat.year ) );
			}
			if( isDef( copyFormat.month ) ) {
				date.setMonth( copyFormat.month );
			}
			if( isDef( copyFormat.date ) ) {
				date.setDate( copyFormat.date <= ( dayArr[ date.getMonth() ] + ( date.getMonth() == 1 && isLeap( date.getFullYear() ) ? 1 : 0 ) ) ? copyFormat.date : 'Invalid');
			}
			if( isDef( copyFormat.hour ) ) {
				var mer = copyFormat.meridian;
				date.setHours( copyFormat.railway ? convertRailway( copyFormat.hour, mer ? ( /pm/i.test( mer ) ) : ( copyFormat.hour > 11 ) ) : ( /pm/i.test( mer ) ? ( copyFormat.hour < 12 ? ( copyFormat.hour + 12 ) : copyFormat.hour ) : copyFormat.hour % 12 ) )
			}
			if( isDef( copyFormat.minute ) ) {
				date.setMinutes( copyFormat.minute )
			}
			if( isDef( copyFormat.second ) ) {
				date.setSeconds( copyFormat.second )
			}
			if( isDef( copyFormat.millisecond ) ){
				date.setMilliseconds( copyFormat.millisecond )
			}
			if( isDef( copyFormat.timestamp ) ) {
				date = new Date( copyFormat.timestamp )
			}

			if( validate.call( this, date ) ){
				if( isDef( copyFormat.timezone ) ){
					// to_ret = true;
					var act_diff = date.getTimezoneOffset();

					copyFormat.timezone -= act_diff;
					date.setMinutes( date.getMinutes() + copyFormat.timezone );

					var new_diff = date.getTimezoneOffset();

					if( act_diff != new_diff ){

						/* Daylight saving time causing many issues.
								Here when we are passing wrong timezone date Ex. '2021-11-07T02:30:00-04:00' new date reads it correctly ( In -04:00 timezone machine ). But setting the timezone difference in setMinutes causing problem.
							Dont know the exact fix. So wrote this as temporary fix. Assuming string contains timezone is readable in new Date()*/

						var new_date = new Date( this._arg );
						// May be we can create a date object by passing already available data

						if( new_date.toString() == 'Invalid Date' ){
							/* In this case can't do anything from moment side. Need to change the input date string */ 
							date.setMinutes( date.getMinutes() - copyFormat.timezone );
						} else{
							date = new_date;
						}
					}

				} else if( isDef( this._timezone ) ){
					var ori_timezone = this.timezoneOffset( date );

					copyFormat.timezone =  ori_timezone - date.getTimezoneOffset();
					date.setMinutes( date.getMinutes() + copyFormat.timezone );

					/*
						* This below code is written for reading a time in different timezone without timezone present in date string.
						* My machine is in Asia/Calcutta timezone 'Mar 11, 2022'. Niru <nirmala.b@zohocorp.com> reported this for input type date.
						* Here DST changes on 'Mar 13, 2022 02:00 AM' in "US/Pacific" 
						* ex . 'Mar 13, 2022 03:00 AM'
						* In this case if i use normal functions setting hour 3 will automatically changes to hour 4 of -07:00 timezone
						* To fix this issue after changing date again finding offset and subtracting the same for getting 3 of -07:00 timezone
						*/

					var new_timezone = this.timezoneOffset( date ),
					diff = ori_timezone - new_timezone;

					if( diff ){
						date.setMinutes( date.getMinutes() - diff );
					}

					/*
						* Here same as above
						* 'Mar 13, 2022 02:59 AM' is an invalid date for "US/Pacific" timezone.
						* correct output is generally assumed as 03:59 of -07:00 timezone
						* if i deduct timezone change it goes to 01:59 of -08:00 timezone
						* if converted hour and inputed hour are not matching we having an invalid hour value
						* so here i am adding it again for getting 03:59 of -07:00 timezone value
						*/

					var __hour = copyFormat.hour;

					if( isDef( __hour ) && __hour != parseInt( $L.moment( date ).format( 'h' ) ) ){
						date.setMinutes( date.getMinutes() + diff );
					}
					/* ends */
				}
			}

			var def_format = "YYYY-MM-DDTHH:mm:ssZ"; 

			if( copyFormat1 != def_format && arg.length == format.length && copyFormat1 == copyArg && validate.call( this, date ) ) {
				return this._isCorrectFormat = true;
			} else if( !this._format || copyFormat1 == def_format ) {
				return validate.call( this, new Date( this._arg ) );
			}

			return to_ret;
		}

		function crctLength( val, length, suff, deduct ) {
			var sfx = ''
			if( deduct ) {
				val++;
			}
			if( suff ) {
				sfx = nthconv( val );
			}
			if( length ) {
				val = val.toString();
				for( var i = 1; i < length; i++ ) {
					if( val.length <= i ) {
						val = '0' + val;
					}
				}
			}
			return val + sfx;
		}

		function getDObj(){
			var date = this._dateObj,
			timeZone = this._timezone;

			if( timeZone ) {
				if( this.is_IE ){
					date.setMinutes( date.getMinutes() + date.getTimezoneOffset() - this.timezoneOffset( date ) );
				} else{
					var new_date = new Date( convert_timezone_DLS.call( this, date, timeZone ) );

					if( validate.call( this, new_date, true ) ){
						return new_date;
					}
				}
			}
			return date;
		}

		function setTimezoneName(date_obj, _this) {
			var mod_obj;

			try {  
				if( _this._timezone ){ 
					mod_obj = date_obj.toLocaleString('en-US', { timeZone: _this._timezone, timeZoneName: "long" }).split(/AM|PM/)[1];
				} else {
					mod_obj = new Date().toTimeString().match(/\(([^)]+)\)/)[1];	
				}
			} catch (err) {
				mod_obj = new Date().toTimeString().match(/\(([^)]+)\)/)[1];
			}
			if( date_obj ){
				return mod_obj.trim().match(/\b\w/g).join('');
			} 
			return mod_obj;
		}

		function convertFormat( arg ) {
			var parseVal = parseFormat( replaceTxt( arg ) ), isWeek = {},
			act_date = this.toDate(),
			obj = this.split_date( act_date ),
			fake_time,
			create_fake = function(){
				return new Date( act_date.getTime() + ( act_date.getTimezoneOffset() - obj.timezone ) * 1e3 * 60 );
			}.bind( this );

			arg = fmReplace( arg.replace(/{{|}}/g, ''), parseVal );
			for( var i = 0; i < parseVal.length; i++ ) {
				var ret, cur = parseVal[ i ].format;
				switch( cur.type ) {
					case "date" : {
						arg = arg.replace( cur.val + lm, crctLength( ( cur.year ? totdate( obj.month - 1, isLeap( obj.year ), obj.date ) : obj.date ), cur.len, cur.suff ) )
					}
					break;
					case "month" : {
						if( cur.str ) {
							arg = arg.replace( cur.val + lm, cur.array[ obj.month - 1 ] );
						} else {
							arg = arg.replace( cur.val + lm, crctLength( obj.month, cur.len, cur.suff ) );
						}
					}
					break;
					case "year" : {
						arg = arg.replace( cur.val + lm, cur.len == 2 ? crctLength( obj.year % 100, 2 ) : ( ( obj.year + '' ).length == 4 ) ? obj.year : crctLength( obj.year, 4 ) );
						isWeek.year = isWeek.year || [];
						isWeek.year.push( cur );
					}
					break;
					case "day" :
					case "week" : {
						isWeek.flag = true
						isWeek[ cur.type ] = isWeek[ cur.type ] || [];
						isWeek[ cur.type ].push( cur );
					}	
					break;
					case "quarter" : {
						arg = arg.replace( cur.val + lm, crctLength( Math.ceil( ( obj.month ) / 3 ), null , cur.suff ) )
					}
					break;
					case 'longdate' : {
						fake_time =  fake_time || create_fake();
						var __day = fake_time.getDay();
						if( cur.str ) {
							arg = arg.replace( cur.val + lm, cur.array[ __day ]);
						} else {
							arg = arg.replace( cur.val + lm, crctLength( __day, null , cur.suff ) )
						}
					}
					break;
					case 'hour' : {
						var hr = obj.hour;
						arg = arg.replace( cur.val + lm, crctLength( !cur.railway ? ( hr > 12 ? hr % 12 : ( hr || 12 ) ) : hr, cur.len, null, cur.deduct ) )
					}
					break;
					case 'minute' : {
						arg = arg.replace( cur.val + lm, crctLength( obj.minute, cur.len ) );
					}
					break;
					case 'second' : {
						arg = arg.replace( cur.val + lm, crctLength( obj.second, cur.len ) );
					}
					break;
					case 'millisecond' : {
						arg = arg.replace( cur.val + lm, crctLength( act_date.getMilliseconds(), 3 ) ).replace( /\\S+/, '' )
					}
					break;
					case 'timezone' : {
						var val = '';
						if( !cur.str ) {
							var off = obj.timezone, hr = crctLength( Math.abs( parseInt( off / 60 ) ), 2 ), min = crctLength( Math.abs( off % 60 ), 2 ), sign = off <= 0 ? '+' : '-';
							if( cur.val == 'ZZ' ) {
								val = sign + hr + min;
							} else {
								val = sign + hr + ':' + min;
							}
						} else if( cur.val == "z" ){
							val = obj.timezoneName || setTimezoneName(act_date, this) || "";
						}
						arg = arg.replace( cur.val + lm, val );
					}
					break;
					case 'timestamp' : {
						var val = '';
						if( cur.val == 'X' ) {
								val += parseInt( act_date.getTime() / 1000 )
						} else {
							val += act_date.getTime();
						}
						arg = arg.replace( cur.val + lm, val );
					}
					break;
					case 'meridian' : {
						var forr = obj.meridian;
						if( cur.lower ) {
							forr = forr.toLowerCase();
						}
						arg = arg.replace( cur.val + lm, forr );
					}
				}
			}
			if( isWeek.flag ) {
				fake_time = fake_time || create_fake();
				var ret = getWeekReverse( fake_time );
				if( isWeek.week ){
					for( var j = 0; j < isWeek.week.length; j++ ){
						var __cur = isWeek.week[ j ],
						__ret = getWeekReverse( fake_time, __cur.ignore );
						arg = arg.replace( __cur.val + lm, ( __cur.pref == 0 ? "" : week ) + crctLength( __ret.week, __cur.len, __cur.suff ) );
					}
				}
				if( isWeek.day ) {
					for( var j = 0; j < isWeek.day.length; j++ ){
						arg = arg.replace( isWeek.day[ j ].val + lm, ret.day - ( isWeek.day[ j ].local ? 1 : 0 ) );
					}
				}
				if( ret.repYear && isWeek.year ) {
					for( var j = 0; j < isWeek.year.length; j++ ){
						arg = arg.replace( ( isWeek.year[ j ].len == 2 ? obj.year % 100 : obj.year ), ( isWeek.year[ j ].len == 2 ? obj.year % 100 : obj.year ) - 1 );
					}
				}
			}
			return arg.replace(/{{|}}/g, '');
		}

		function validate( arg, format ) {
			var cons = arg.constructor;
			
			if( cons == Date || cons == ( new Date().constructor ) ) {
				if( format != true ){
					this._dateObj = arg;
					this._isMoment = true;
				}
				if( arg.toString() == 'Invalid Date' ) {
					return false;
				} else {
					return true;
				}
			} else if( typeof arg == "string" ) {
				if( format ) {
					var ret = valFormat.call( this, arg, format );
					if( ret && this._isCorrectFormat ) {
						this._format = format;
					}
					return ret;
				} else {
					if( this.constructFormat ){
						return validate.call( this, arg, this.constructFormat.call( this, arg ) );
					} else {
						console.warn( 'Its not supported in lyte-moment-basic.js. Add lyte-moment-additional.js for format construction' );
					}
				}
			} else if( Array.isArray( arg ) ) {
				// new (Function.prototype.bind.apply(Date, [null].concat([1996,04,28])))
				return validate.call( this, new Date( Date.parse( Date.apply( Date, cons ) ) ).getTime() );
			} else if( typeof arg == "number" ) {
				arg *= /^\d{10}$/.test( arg ) ? 1000 : 1;
				return validate.call( this, new Date( arg ) );
			} else if( arg._isMoment ) {

				this.name_space = arg.name_space;
				this.dls_check_map = arg.dls_check_map;
				this._timezone = arg._timezone; 

				return validate.call( this, arg._dateObj.getTime() );
			}
		}

		function create_dls( date_obj, name ){
			var date = date_obj.getDate(),
			month = date_obj.getMonth() + 1,
			year = date_obj.getFullYear(),
			hour = date_obj.getHours(),
			minute = date_obj.getMinutes(),
			second = date_obj.getSeconds(),
			str = crctLength( month, 2 ) + "/" + crctLength( date, 2 ) + "/" + year + ", " + crctLength( hour > 12 ? ( hour % 12 ) : ( hour || 12 ), 2 ) + ":" + crctLength( minute, 2 ) + ":" + crctLength( second, 2 ) + " " + ( hour > 11 ? 'PM' : "AM" ) + " ",
			offset = -date_obj.getTimezoneOffset();

			if( name == "long" ){
				str += setTimezoneName();
			} else {
				str += ( "GMT" + ( offset >= 0 ? '+' : "" ) +  crctLength( parseInt( offset / 60 ), 2 ) + ":" + crctLength( offset % 60, 2 ) );
			}

			return str;
		}

		function convert_timezone_DLS( date_obj, name, short ){

			short = short || "short";

			var ns = date_obj.getTime() + '_' + name + "_" + short;

			if( ns == this.name_space ){
				return this.dls_check_map;
			}

			this.name_space = ns;

			return ( this.dls_check_map = ( name ? date_obj.toLocaleString( "en-US", { timeZone: name, timeZoneName: short } ) : create_dls( date_obj, short ) ) );
		}

		lyteMoment.prototype = {

			isDef : isDef, 

			find : find,

			totdate : totdate,

			isLeap : isLeap,

			dayArr : dayArr,

			getDObj : getDObj,

			getWeekReverse : getWeekReverse,

			weekShort : weekShort,

			weekMid : weekMid,

			weekLong : weekLong,

			longMon : longMon,

			shortMon : shortMon,

			week : week,

			crctLength : crctLength,

			formats : formats,

			replace : replace,

			inbuiltFormats : {},

			getCorrectYear : getCorrectYear,

			parseFormat : parseFormat,

			replaceTxt : replaceTxt,

			is_IE : is_IE,

			convertTimeZone : convertTimeZone,

			validate : function(){
				return !!this._isValid;
			},

			toDate : function(){
				return this._dateObj;
			},

			isSame : function( arg ){
				if( this.validate() && arg && arg._isMoment && arg._isValid ) {
					return this._dateObj.getTime() == arg._dateObj.getTime();
				}
				return false;
			},

			format : function( arg ) {
				if( this.validate() ) {
					arg = this.inbuiltFormats[ arg ] || arg || "YYYY-MM-DDTHH:mm:ssZ";
					return convertFormat.call( this, arg );	
				}
			},

			utc : function( arg ) {
				return this.timezone( 'UTC' );
			},

			local : function( arg ){
				return this.timezone( void 0 );
			},

			timezone : function( arg, off ){
				this._timezone = arg;

				if( isDef( off ) ){
					if( typeof off == 'string' ){
						timeZoneOffsets[ arg ] = -convertTimeZone( off.match( /(\+|\-)(\d{2}):(\d{2})$/ ) ); 
					} else{
						timeZoneOffsets[ arg ] = off;
					}

					this.is_IE = true;
				}

				return this;
			},	

			getCurrentTimeZone : function(){
				return this._timezone;
			},

			parseDate : function( str, date_obj, timezone ){
				var date_rgx = /(\d+)\/(\d+)\/(\d+),\s(\d+):(\d+):(\d+)\s(AM|PM)/,
				match = str.match( date_rgx ),
				obj = {
					timezoneName : ""
				},
				gmt_rgx = /GMT(\+|-)(\d+):(\d+):(\d+)$/,
				hr_min_rgx = /GMT(\+|-)(\d+):(\d+)$/,
				hr_only_gmt = /GMT(\+|-)(\d+)$/,
				end_rgx = /\s([A-Z]+)$/;

				[ 'month', 'date', 'year', 'hour', 'minute', 'second' ].forEach( function( item, index ){
					obj[ item ] = parseInt( match[ index + 1 ] );
				});

				obj.meridian = match[ 7 ];

				var hr = obj.hour,
				ns = {"ACDT":"GMT+10:30","ACST":"GMT+9:30","ACT":"GMT-5","ACWST":"GMT+8:45","ADT":"GMT-3","AEDT":"GMT+11","AEST":"GMT+10","AFT":"GMT+4:30","AKDT":"GMT-8","AKST":"GMT-9","AMST":"GMT-3","AMT":"GMT+4","ART":"GMT-3","AST":"GMT+3","AT":"GMT-4/GMT-3","AWST":"GMT+8","AZOST":"GMT+0","AZOT":"GMT-1","AZT":"GMT+4","BDT":"GMT+8","BIT":"GMT-12","BNT":"GMT+8","BOT":"GMT-4","BRST":"GMT-2","BRT":"GMT-3","BST":"GMT+11","BTT":"GMT+6","CAT":"GMT+2","CCT":"GMT+6:30","CDT":"GMT-4","CEST":"GMT+2","CET":"GMT+1","CHADT":"GMT+13:45","CHAST":"GMT+12:45","CHOST":"GMT+9","CHOT":"GMT+8","CHST":"GMT+10","CHUT":"GMT+10","CIST":"GMT-8","CIT":"GMT+8","CKT":"GMT-10","CLST":"GMT-3","CLT":"GMT-4","COST":"GMT-4","COT":"GMT-5","CST":"GMT+8","CT":"GMT-6/GMT-5","CVT":"GMT-1","CWST":"GMT+8:45","CXT":"GMT+7","DAVT":"GMT+7","DDUT":"GMT+10","EASST":"GMT-5","EAST":"GMT-6","EAT":"GMT+3","ECT":"GMT-5","EDT":"GMT-4","EEST":"GMT+3","EET":"GMT+2","EGST":"GMT+0","EGT":"GMT-1","EIT":"GMT+9","EST":"GMT-5","ET":"GMT-5/GMT-4","FET":"GMT+3","FJT":"GMT+12","FKST":"GMT-3","FKT":"GMT-4","FNT":"GMT-2","GALT":"GMT-6","GAMT":"GMT-9","GET":"GMT+4","GFT":"GMT-3","GILT":"GMT+12","GIT":"GMT-9","GMT":"GMT+0","GST":"GMT-2","GYT":"GMT-4","HADT":"GMT-9","HAST":"GMT-10","HKT":"GMT+8","HMT":"GMT+5","HOVST":"GMT+8","HOVT":"GMT+7","ICT":"GMT+7","IDT":"GMT+3","IOT":"GMT+6","IRDT":"GMT+4:30","IRKT":"GMT+8","IRST":"GMT+3:30","IST":"GMT+2","JST":"GMT+9","KGT":"GMT+6","KOST":"GMT+11","KRAT":"GMT+7","KST":"GMT+9","LHDT":"GMT+11","LHST":"GMT+10:30","LINT":"GMT+14","MAGT":"GMT+11","MART":"GMT-9:30","MAWT":"GMT+5","MDT":"GMT-6","MHT":"GMT+12","MIST":"GMT+11","MIT":"GMT-9:30","MMT":"GMT+6:30","MSK":"GMT+3","MST":"GMT+8","MT":"GMT-7/GMT-6","MUT":"GMT+4","MVT":"GMT+5","MYT":"GMT+8","NCT":"GMT+11","NDT":"GMT-2:30","NFT":"GMT+11","NPT":"GMT+5:45","NRT":"GMT+12","NST":"GMT-3:30","NT":"GMT-3:30","NUT":"GMT-11","NZDT":"GMT+13","NZST":"GMT+12","OMST":"GMT+6","ORAT":"GMT+5","PDT":"GMT-7","PET":"GMT-5","PETT":"GMT+12","PGT":"GMT+10","PHOT":"GMT+13","PhST":"GMT+8","PHT":"GMT+8","PKT":"GMT+5","PMDT":"GMT-2","PMST":"GMT-3","PONT":"GMT+11","PST":"GMT-8","PT":"GMT-8/GMT-7","PWT":"GMT+9","PYST":"GMT-3","PYT":"GMT-4","RET":"GMT+4","ROTT":"GMT-3","SAKT":"GMT+11","SAMT":"GMT+4","SAST":"GMT+2","SBT":"GMT+11","SCT":"GMT+4","SGT":"GMT+8","SLST":"GMT+5:30","SRET":"GMT+11","SRT":"GMT-3","SST":"GMT-11","SYOT":"GMT+3","TAHT":"GMT-10","TFT":"GMT+5","THA":"GMT+7","TJT":"GMT+5","TKT":"GMT+13","TLT":"GMT+9","TMT":"GMT+5","TOT":"GMT+13","TRT":"GMT+3","TVT":"GMT+12","ULAST":"GMT+9","ULAT":"GMT+8","USZ1":"GMT+2","UTC":"GMT+0","UYST":"GMT-2","UYT":"GMT-3","UZT":"GMT+5","VET":"GMT-4","VLAT":"GMT+10","VOLT":"GMT+4","VOST":"GMT+6","VUT":"GMT+11","WAKT":"GMT+12","WAST":"GMT+2","WAT":"GMT+1","WEST":"GMT+1","WET":"GMT+0","WFT":"GMT+12","WGST":"GMT-2","WIB":"GMT+7","WIT":"GMT+9","WST":"GMT+8","YAKT":"GMT+9","YEKT":"GMT+5"},
				_this = this;

				if( match[ 7 ] == 'PM' ){
					if( hr != 12 ){
						obj.hour += 12;
					}
				} else{
					if( hr == 12 ){
						obj.hour = 0;
					}
				}

				function fn( str, frm_recursive, frm_long ){
					if( gmt_rgx.test( str ) ){
						var gmt_match = str.match( gmt_rgx );
						obj.timezone = ( parseInt( gmt_match[ 2 ] ) * 60 + parseInt( gmt_match[ 3 ] ) ) * ( gmt_match[ 1 ] == '-' ? 1 : -1 );
					} else if( hr_min_rgx.test( str ) ){
						var gmt_match = str.match( hr_min_rgx );
						obj.timezone = ( parseInt( gmt_match[ 2 ] ) * 60 + parseInt( gmt_match[ 3 ] ) ) * ( gmt_match[ 1 ] == '-' ? 1 : -1 );
					} else if( hr_only_gmt.test( str ) ){
						var gmt_match = str.match( hr_only_gmt );
						obj.timezone = ( parseInt( gmt_match[ 2 ] ) * 60 ) * ( gmt_match[ 1 ] == '-' ? 1 : -1 );
					} else{
						if( frm_recursive ){
							if( frm_long ){
								var __cur = timeZoneOffsets[ frm_long ];
								if( __cur ){
									var final_str = "GMT",
									hr = parseInt( __cur / 60 ),
									min = Math.abs( __cur % 60 );

									if( __cur > 0 ){
										final_str += "+";
									}

									final_str += ( hr + ":" + min );

									return fn( final_str, true );
								}
							}
							obj.timezone = 0;
						} else{
							if( end_rgx.test( str ) ){

								var clone = {
									"AMT" : {
										"Amazon Time" : "GMT-4",
										"Armenia Time" : "GMT+4"
									},
									"AST" : {
										"Atlantic Standard Time" : "GMT-4",
										"Arabia Standard Time" : "GMT+3"
									},
									"BST" : {
										"British Summer Time" : "GMT+1",
										"Bangladesh Standard Time" : "GMT+6",
										"Bougainville Standard Time" : "GMT+11"
									},
									"CDT" : {
										"Central Daylight Time" : "GMT-5",
										"Cuba Daylight Time" : "GMT-4"
									},
									"CST" : {
										"Central Standard Time" : "GMT-6",
										"Cuba Standard Time" : "GMT-5",
										"China Standard Time" : "GMT+8"
									},
									"GST" : {
										"Gulf Standard Time" : "GMT+4",
										"South Georgia Time" : "GMT-2"
									},
									"IST" : {
										"Indian Standard Time" : "GMT+5:30",
										"Irish Standard Time" : "GMT+1",
										"Israel Standard Time" : "GMT+2"
									},
									"MST" : {
										"Mountain Standard Time" : "GMT-7",
										"Malaysia Standard Time" : "GMT+8"
									},
									"WGST" : {
										"West Greenland Time" : "GMT-3",
										"West Greenland Summer Time" : "GMT-2"
									}
								},
								value = str.match( end_rgx )[ 1 ],
								clone_value = clone[ value ],
								to_send = ns[ value ],
								frm_long;

								obj.timezoneName = value;

								if( clone_value ){
									var return_str = convert_timezone_DLS.call( _this, date_obj, timezone, 'long' );
									for( var key in clone_value ){
										if( return_str.indexOf( key ) != -1 ){
											to_send = clone_value[ key ];
											break;
										}
									}
								} else if( !to_send ){
									to_send = convert_timezone_DLS.call( _this, date_obj, timezone, 'long' );
									frm_long = value;
								} else {
									var dual = [ 'AT', 'CT', 'ET', 'MT', 'PT' ];
									if( dual.indexOf( value ) != -1 ){
										to_send = to_send.replace( /\/(.+)/, '' );
									}
								}

								fn( to_send, true, frm_long );
							}
						}
					}
				};

				fn( str );

				return obj;
			},

			split_date : function( date_obj ){
				if( this.is_IE ){
					var dobj = this.getDObj(),
					hr = dobj.getHours(),
					obj = {
						year : dobj.getFullYear(),
						month : dobj.getMonth() + 1,
						date : dobj.getDate(),
						hour : hr,
						minute : dobj.getMinutes(),
						second : dobj.getSeconds(),
						meridian : hr > 11 ? "PM" : "AM",
						timezone : this.timezoneOffset( date_obj )
					};
					return obj;
				} else {
					try{
						var timezone_date = convert_timezone_DLS.call( this, date_obj, this._timezone ),
						timezone_split = this.parseDate( timezone_date, date_obj, this._timezone );
						return timezone_split;
					} catch( e ){
						this.is_IE = true;
						return this.split_date( date_obj );
					}
				}
			},

			timezoneOffset : function( date_obj ){
				if( isDef( this._timezone ) ){
					if( this.is_IE ){
						var value = timeZoneOffsets[ this._timezone ];
						return -( isDef( value ) ? value : this._timezone );
					}

					var timezone_split = this.split_date( date_obj );

					return timezone_split.timezone;
				}

				if( this.validate() ){
					return this.toDate().getTimezoneOffset();
				}

				return new Date().getTimezoneOffset();
			},

			utcOffset : function( arg ) {
				if( this._isValid ) {
					return this.timezoneOffset( this.toDate() );
				}
			}	

		}

		$L.moment = function( arg, format, uL, lL ){
			return new lyteMoment( arg, format, uL, lL );
		}

		$L.moment.lyteMoment = lyteMoment;

		$L.moment.setLimits = function( a, b ){
			uLimit = a;
			lLimit = b;
		}

		$L.moment.setTimezone = function( arg, off ){
			default_timezone = arg;
			if( isDef( off ) ){
				default_offset = off;
			}
		}

		$L.moment.setWod = function( value ){
			wod = value;
		}
	}
} );

/***/ }),

/***/ 44690572:
/*!************************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/plugins/lyte-scrollbar.js ***!
  \************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;( function( cb ){
	if( true ){
		  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! @zoho/lyte-dom */ 10891274) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (cb),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {}
} )( function( $L ){
   if( $L ) {
    var uA = window.navigator.userAgent, 
    isSaf =  { 
        uA : uA, 
        isUbuntu : /ubuntu/ig.test( uA ), 
        isIpad : /ipad/ig.test( uA ), 
        safari : /safari/ig.test( uA ), 
        isIE11Lyte : /rv:11/ig.test( uA ), 
        isEdgeLyte : /Edge/ig.test( uA ), 
        mode : {}, 
        chrome  : !!window.chrome , 
        firefox : /firefox/ig.test( uA ) 
    };

    function appendDiv( className, obj, dir, is_parent ) {
        var div = document.createElement( 'div' ), innerDiv;
        div.className = className;
        div._scrolldiv = this;
        div.style.visibility = 'hidden';
        innerDiv = document.createElement( 'div' );
        innerDiv.classList.add( 'lyteScrollDiv' );
        if( obj.handlerClass ) {
            innerDiv.classList.add( obj.handlerClass );
        }
        if( obj.containerClass ) {
            div.classList.add( obj.containerClass )
        }
        div.appendChild(innerDiv);
        if( dir ) {
            innerDiv._direction = dir;
            if( obj.horizontalContainerClass ){
                div.classList.add( obj.horizontalContainerClass );
            }
            if( obj.horizontalHandlerClass ) {
                innerDiv.classList.add( obj.horizontalHandlerClass );
            }
            this._horiDiv = div;
        } else {
            if( obj.verticalContainerClass  ) {
                div.classList.add( obj.verticalContainerClass );
            }
            if( obj.verticalHandlerClass ){
                innerDiv.classList.add( obj.verticalHandlerClass );
            }
            this._vertDiv = div;
        }

        ( is_parent ? this.parentElement : this ).appendChild( div )
        
        div.addEventListener( 'click', outerDivClick, true );
        innerDiv.addEventListener( 'mousedown', innerDivClick );
        if( !this._infiniteScroll ){        
            innerDiv.addEventListener( 'touchstart', innerDivClick );       
        }
        return div;
    }   

    function set( elem, prop, val ) {
        if( elem.style[ prop ] != val ){
            elem.style[ prop ] = val
        }
    }

    function checkscrollable( evt ){
        evt = evt || { target : this };
        var target = evt.target.correspondingElement || evt.target, ret;

        if( target.closest( '.lyteConnectWrapper.preventWheel' ) ){
            return true;
        }
        
        while( target && target != this ) {
            if( target.classList.contains( 'preventWheel' ) ) {
                ret = true;
                break;
            }
            target = target.parentElement
        }
        return ret
    }

    function check( flag, elem, obj, mode, evt ){
        var fg;
        evt = evt || {};

        window.fn = function( elem ){
            set( elem, 'visibility', 'hidden' );
            elem.classList.remove( 'visible' );
        };

        if( !flag.scroll ) {
            var is_showon_scroll = this._scrollData.showOn == 'scroll';
            if( !( [ 'mouseenter', 'touchstart' ].indexOf( evt.type ) != -1 && is_showon_scroll ) ){
                var from_reset = ( this._enableScroll = !flag.frm_reset ),
                is_event_added = $L( this ).hasClass( "eventBinded" );

                if( elem && ( !is_showon_scroll || !flag.frm_reset ) ) {
                    clearTimeout( elem._entertimeout );
                    clearTimeout( elem._leavetimeout );
                    delete elem._entertimeout; delete elem._leavetimeout;
                    if( !flag.scrollbar ){

                        if( !from_reset && !is_event_added ){
                            return;
                        }

                        if( evt.type == "touchstart" ){
                            elem._entertimeout = setTimeout( set.bind( this, elem, 'visibility', 'visible' ), 150 );
                        } else {
                            set( elem, 'visibility', 'visible' );
                        }
                        elem.classList.add( 'visible' );
                        updatePos.call( this, mode, undefined, {}, obj );
                    } else{
                        window.fn( elem );
                    }
                }
            }
            fg = true
        } else {
            if( elem ) {
               window.fn( elem );
            }
        }
        return fg
    }

    function initialWheel( evt ){
        this.removeEventListener( 'wheel', initialWheel, true )
        if( !this.classList.contains( 'eventBinded' ) ){
            var close_connect = this.closest( "lyte-connect" );
            if( !close_connect ){
                mouseenter.call( this, { type : 'mouseenter' } );
            }
        }
        evt.preventDefault()
    }

    function format_bcr( bcr ){
        var obj = {};
        [ 'x', 'y', 'bottom', 'height', 'top', 'width', 'left', 'right' ].forEach( function( item ){
            obj[ item ] = Math.round( bcr[ item ] );
        });
        return obj;
    }

    function mouseenter( evt, frm_reset ) {
        // console.log( evt.target, evt.type, evt.currentTarget );
        if( this.classList.contains( 'eventBinded' ) && evt != true ){
            return
        }
        if( evt.type == 'mouseenter' && this._prtmseenr ){
            return;
        }
        var flag, 
        obj = { scrollLeft : Math.round( this.scrollLeft ), scrollTop : Math.round( this.scrollTop ), scrollWidth : this.scrollWidth, scrollHeight : this.scrollHeight, bcr : format_bcr( this.getBoundingClientRect() ) },
        scrolldata = this._scrollData;

        this._wheelObj = obj
        if( this.classList.contains( 'lyteTableScroll' ) ){
            forTable.call( this, obj )
        }
        this._direction = window.getComputedStyle(  this ).direction;
        obj.vertbcr = this._vertDiv ?  this._vertDiv.getBoundingClientRect() : {}
        obj.horbcr = this._horiDiv ?  this._horiDiv.getBoundingClientRect() : {}
        flag = check.call( this, fitForScroll.call( this, true, obj, frm_reset ), this._vertDiv, obj, true, evt )
        flag = check.call( this, fitForScroll.call( this, false, obj, frm_reset ), this._horiDiv, obj, false, evt ) || flag
        if( flag && evt ) {
            this._mouseleave = this._mouseleave || mouseleave.bind( scrolldata.appendTo == "parent" ? this.parentElement : this );
            if( evt.type == "touchstart" ) {
               if( evt.touches.length == 1 ){
                    clearTimeout( this._tchtime );
                    document.addEventListener( 'touchcancel', this._mouseleave, true )
                } else {
                    return;
                }
            } else {
                this.addEventListener( 'wheel', wheelEvent, true );
                this.addEventListener('keydown', keydownFunc, true);
                if( this._scrollData.showOn == 'scroll' ){
                    this.addEventListener( 'mousemove', hideScrollbar, true );
                }
            }
            this._allowTouch = true;
            document.addEventListener( 'touchend', this._mouseleave, true )
            this.classList.add( 'eventBinded' )
            this._tabindex = this._tabindex == undefined ? this.tabIndex : this._tabindex;
            if(this.tabIndex == -1){
                this.tabIndex = scrolldata.tabIndex || 0;
            }
        }
    } 

    function keydownFunc( evt ) {
        if( evt.target != this ){
            return
        }

        var key = evt.key,
        elem = this,
        sL =  Math.round( elem.scrollLeft ),
        sT = Math.round( elem.scrollTop ),
        wd = elem.offsetWidth,
        hgt = elem.offsetHeight,
        s_wd = elem.scrollWidth,
        s_hgt = elem.scrollHeight,
        obj = { 
            scrollLeft : sL, 
            scrollTop : sT, 
            scrollWidth : s_wd, 
            scrollHeight : s_hgt, 
            bcr : elem.getBoundingClientRect() 
        },
        step = this._scrollData.keyStep,
        dir = this._direction == 'rtl',
        pos,
        mode,
        __new,
        is_negative = dir && ( !window._lyteUiUtils || window._lyteUiUtils.isNegativeScroll() ),
        meta = evt.metaKey || evt.ctrlKey;

        switch( key ){
            case "ArrowLeft" : {
                mode = false;

                if( meta ){
                    if( dir ){
                        if( is_negative ){
                            __new = wd - s_wd;
                        } else {
                            __new = s_wd - wd;
                        }
                    } else {
                        __new = 0;
                    }
                } else {
                    if( dir && is_negative ){
                        dir = false;
                    }
                    __new = sL - step * ( dir ? -1 : 1 );
                }
            }
            break;
            case "ArrowRight" : {
                mode = false;
                
                if( meta ){
                    if( dir ){
                        if( is_negative ){
                            __new = 0;
                        } else {
                            __new = wd - s_wd;
                        }
                    } else {
                        __new = s_wd - wd;
                    }
                } else {
                    if( dir && is_negative ){
                        dir = false;
                    }
                    __new = sL + step * ( dir ? -1 : 1 );
                }
            }
            break;
            case "ArrowDown" : {
                __new = Math.min( sT + step, s_hgt - hgt );
                mode = true;
            }
            break;
            case "ArrowUp" : {
                __new = Math.max( 0, sT - step );
                mode = true;
            }
            break;
            case "PageDown" : {
                __new = Math.min( sT + hgt, s_hgt - hgt );
                mode = true;
            }
            break;
            case "PageUp" : {
                __new = Math.max( sT - hgt, 0 );
                mode = true;
            }
            break;
            case "Home" : {
                __new = 0;
                mode = true;
            }
            break;
            case "End" : {
                __new = s_hgt - hgt;
                mode = true;
            }
            break;
        }

        if( mode != void 0 && shouldPrevent.call( elem, obj, mode, __new - ( mode ? sT : sL ) ) ){
            elem[ mode ? 'scrollTop' : 'scrollLeft' ] = __new;
            scroll.call( elem, evt )
            evt.preventDefault();
        }
    }

    function mouseleave( evt ){
        evt = evt || {};
        if( ( evt.relatedTarget && this.contains( evt.relatedTarget ) ) || document._scrollmouseup ){
            return
        }
        if( evt.type == 'touchend' ) {     
            var tar = evt.target.correspondingElement || evt.target;        
            if( tar && tar.classList.contains( 'lyteScrollContainer' ) ) {      
                return;     
            }       
        }
        var bars = $L( this ).children( '.lyteScrollContainer' ), scrlDiv = this._scrolldiv || this;
        if( bars.length ) {
            for(  var i = 0; i < bars.length; i++ ) {
                var __cur_bar = bars[ i ];

                clearTimeout( __cur_bar._entertimeout );
                clearTimeout( __cur_bar._leavetimeout );
                delete __cur_bar._entertimeout;
                delete __cur_bar._leavetimeout;

                __cur_bar.classList.remove( 'visible' )
                if( evt.type == 'touchend' ){
                    __cur_bar._leavetimeout = setTimeout( set.bind( this, __cur_bar, 'visibility', 'hidden'), 150 )
                } else {
                    __cur_bar.style.visibility = 'hidden';
                }
            }
            if( evt.type == 'mouseleave' ) {
                scrlDiv.removeEventListener('wheel', wheelEvent, true);
                scrlDiv.removeEventListener('keydown', keydownFunc, true);
                scrlDiv.removeEventListener( 'mousemove', hideScrollbar, true );
                scrlDiv.addEventListener( 'wheel', initialWheel, true );
            } else if( evt.type == 'touchend' || evt.type == "touchcancel" ) {
                scrlDiv._prtmseenr = true;
                scrlDiv._tchtime = setTimeout( function(){
                    delete scrlDiv._prtmseenr;
                }, 500 )
                document.removeEventListener( 'touchcancel', scrlDiv._mouseleave, true )
            }
            if( evt.type ){
                document.removeEventListener( 'touchend', scrlDiv._mouseleave, true )
                delete scrlDiv._allowTouch;
                scrlDiv.classList.remove( 'eventBinded' );
                // scrlDiv.tabIndex = this._scrolldiv._tabindex;
                // delete scrlDiv._tabindex;
                 delete scrlDiv._wheelObj;
                delete scrlDiv._prevPosY; delete scrlDiv._mouseleave;
                delete scrlDiv._prevPosX; delete scrlDiv._wheelEvt;
            }
            delete scrlDiv._enableScroll;
        }
    }

    function outerDivClick( evt ) {
        if( !this.classList.contains( 'visible' ) ){
            return
        }
        var isTch = evt.type == "touchmove";       
        if( isTch ) {       
            if( evt.touches.length > 1 ){       
                return;     
            } else {        
                evt.preventDefault();       
                evt = evt.touches[ 0 ]      
            }       
        }       
        var elem = this._scrolldiv, mode, inn = this.children[ 0 ], outBcr = this.getBoundingClientRect(), inBcr = inn.getBoundingClientRect(),
        obj = { scrollLeft : Math.round( elem.scrollLeft ), scrollTop : Math.round( elem.scrollTop ), scrollWidth : elem.scrollWidth, scrollHeight : elem.scrollHeight, bcr : elem.getBoundingClientRect() },
        hgt = 'width', top1 = 'left', sT = 'scrollLeft', sH = 'scrollWidth', bt = 'right', cY = 'clientX';
        if( this.classList.contains( 'lyteTableScroll' ) && !obj.$nodeClient ){
            forTable.call( this, obj )
        }
        obj.vertbcr = this._vertDiv ?  this._vertDiv.getBoundingClientRect() : {}
        obj.horbcr = this._vertDiv ?  this._horiDiv.getBoundingClientRect() : {}
        if(!inn._direction){
            mode = true;
            hgt = 'height', top1 = 'top', sT = 'scrollTop', sH = 'scrollHeight', bt = 'bottom', cY = 'clientY';
        }
        var scramt = evt.type != 'click' ? ( evt[ cY ] - ( this.prev || evt[ cY ] ) ) : ( evt[ cY ] - ( inBcr[ top1 ] + inBcr[ hgt ] / 2 ) ), newsL;
        newsL = ( scramt / ( obj.bcr[ hgt ] + obj.bcr[ top1 ] - outBcr[ top1 ] ) * obj[ sH ] )
        elem[ sT ] += ( newsL ) ;
        scroll.call( elem, evt );
        this.prev = evt[ cY ];
    }

    function innerDivClick( evt ) {
       var isTch = evt.type == "touchstart",
       __parentNode = this.parentNode,
       __document = document,
       ael = 'addEventListener';

        __document[ ael ]( isTch ? 'touchmove' : 'mousemove', __document._scrollmousemove = outerDivClick.bind( __parentNode ), true );
        __document[ ael ]( isTch ? 'touchend' : 'mouseup', __document._scrollmouseup = mouseup.bind( __parentNode ), true );

        evt.preventDefault();
        evt.stopPropagation();
    }

    function mouseup( evt ) {
        var isTch = evt.type == "touchend",
        __document = document,
        rel = "removeEventListener",
        scroll_elem = this._scrolldiv || this,
        target = evt.target,
        scrolldata = scroll_elem._scrollData;

        __document[ rel ]( isTch ? 'touchmove' : 'mousemove', __document._scrollmousemove, true );
        __document[ rel ]( isTch ? 'touchend' : 'mouseup', __document._scrollmouseup, true );

        delete __document._scrollmousemove;
        delete __document._scrollmouseup; 
        delete this.prev;

        if( !scroll_elem.contains( target.correspondingElement || target ) && scrolldata.showOn != 'always' ){
            mouseleave.call( scrolldata.appendTo == "parent" ? scroll_elem.parentNode : scroll_elem , { type : 'mouseleave' } );
        }
    }

    function mousedown( evt ) {

        var scrolldata = this._scrollData,
        __document = document;

        if( __document._scrollmouseup ) {
            return
        }
        __document.addEventListener( 'mouseup', __document._scrollmouseup = mouseup.bind( scrolldata.appendTo == "parent" ? this.parentElement : this ), true )
    }

    function fitForScroll( mode, obj, frm_reset ) {
        var sL = 'scrollTop', sW = 'scrollHeight', wd = 'height', elem = mode ? this._vertDiv : this._horiDiv,
        scrolldata = this._scrollData,
        margin = scrolldata.scrollYMarginOffset;

        if( !mode ) {
            sL = 'scrollLeft', sW = 'scrollWidth', wd = 'width';
            margin = scrolldata.scrollXMarginOffset;
        }
        if( obj[ sL ] + obj.bcr[ wd ] >= obj[ sW ] && obj[ sL ] == 0 ){
            if( elem && elem.classList.contains( 'visible' ) ) {
                check.call( this, { scroll : true, scrollbar : true }, elem )
            }
            return {
                scroll : true,
                scrollbar : true,
                frm_reset : frm_reset
            }
        }

        return{
            scroll : false,
            scrollbar : ( obj[ sW ] - obj.bcr[ wd ] ) <= margin,
            frm_reset : frm_reset
        }
    }

    function wheelEvent( evt ){
         if( checkscrollable.call( this, evt ) ) {
                return
            }
        if( evt.type == 'touchmove' ) { 
            if( this._allowTouch && evt.touches.length == 1 ) {
                var curr = evt.touches[ 0 ];
                wheelEvent1.call( this, evt, [ (this._prevPosX || curr.clientX ) - curr.clientX,  ( this._prevPosY || curr.clientY ) - curr.clientY ] )
                this._prevPosY = curr.clientY;
                this._prevPosX = curr.clientX;
            }
        } else {   
            wheelEvent1.call( this, evt )
        }
    }

    function shouldPrevent( obj, mode, val ){
        var sL = 'scrollTop', sW = 'scrollHeight', wd = 'height', elem = mode ? this._vertDiv : this._horiDiv;
        if( !mode ) {
            sL = 'scrollLeft';
            sW = 'scrollWidth';
            wd = 'width';
        }

        if( mode ){
            if( ( val > 0 && Math.round( obj[ sL ] + obj.bcr[ wd ] ) >= obj[ sW ] ) || ( val < 0 && obj[ sL ] == 0 ) ){
                return false
            }
        } else {
            if( ( val > 0 && Math.round( obj[ sL ] + obj.bcr[ wd ] ) >= obj[ sW ] ) || ( val < 0 && Math.round( -obj[ sL ] + obj.bcr[ wd ] ) >= obj[ sW ] ) ){
                return false
            } else if( !mode && isSaf.firefox && this._direction == 'rtl' && ( val < 0 && obj[ sL ] == 0 ) ){
                return true
            } else if( ( val < 0 && obj[ sL ] == 0 ) && !( val < 0 && isSaf.safari && this._direction == 'rtl' && obj[ sL ] == 0 ) ){
                return false;
            }
        }
        return true
    }

    function getWheel( evt ) {
        var data = this._scrollData, min = data.min, max = data.max,
        fact1 = data.wheelSpeed, fact = fact1, uA = isSaf.uA.toLowerCase(), inf = this._infiniteScroll, ie = isSaf.isIE11Lyte;
        if( ( uA.indexOf('edge') != -1 || (( uA.indexOf('trident') != -1 || uA.indexOf('msie') != -1)) ) && this._direction == 'rtl' ){
            fact1 *= -1
        }
        // if( evt.shiftKey ) {
        //     fact1 *= -1; fact *= -1; 
        // }
        var x, 
        y, 
        delta = evt.deltaMode && evt.deltaMode == 1,
        __deltaX = evt.deltaX,
        __deltaY = evt.deltaY;

        if( evt.shiftKey ){
            var __temp = __deltaX;
            __deltaX = __deltaY;
            __deltaY = __temp;
        }

        if( __deltaX > 0 ) {
            x = Math.max( delta ? ( __deltaX * 6 ) :  __deltaX, (inf ? 0 : 4 ) )
        } else if( __deltaX < 0 ) {
            x = Math.min( inf ? 0 : -4, delta ? ( __deltaX * 6 ) : __deltaX )
        }
        if( __deltaY > 0 ) {
            y = Math.min( max, Math.max( delta ? ( __deltaY * 6 ) : __deltaY, inf ? 0 : 4 ), ie ? 20 : Infinity );
        } else if( __deltaY < 0 ) {
            y = Math.max( min, Math.min( inf ? 0 : -4, delta ? ( __deltaY * 6 ) : __deltaY ), ie ? -20 : -Infinity );
        }
        return [ x * fact1, y * fact ]
    }

    function nestedScroll( evt, ret ){  
        var target = evt.target;
        while( target != this ) {
            var sT = Math.round( target.scrollTop ),
            sH = target.scrollHeight,
            oH = target.offsetHeight,
            compsty = window.getComputedStyle( target ),
            isMatch = ( /scroll|auto/i.test( compsty.overflowY ) || ( target.classList.contains( 'lyteScrollBar' ) && /hidden/i.test( compsty.overflowY  ) ) );


            if( oH < sH  ){
                if( ret ){
                    if( oH + sT < sH && isMatch ){
                        return true;
                    }
                } else {
                    if( sT && isMatch ){
                        return true;
                    }
                }
            }
            target = target.parentNode;
        }
    }

    function wheelEvent1( evt, tch ) {            
        var ret = tch || getWheel.call( this, evt );
        var a = ret[ 0 ] || 0, 
        b = ret[ 1 ] || 0, 
        mode = false, 
        obj = this._wheelObj || {} , 
        fit, 
        stpre, 
        isTable = this.classList.contains( 'lyteTableScroll' ),
        __deltaX = evt.deltaX,
        __deltaY = evt.deltaY,
        scrolldata = this._scrollData;

        if( evt.shiftKey ){
            var __temp = __deltaX;
            __deltaX = __deltaY;
            __deltaY = __temp;
        }

        if( Math.abs( tch ? a : ( __deltaX || 0 ) ) <= Math.abs( tch ? b : ( __deltaY || 0 ) ) ) {
            mode = true
        }
        if( scrolldata.nested && mode && nestedScroll.call( this, evt, b > 0 ) ){
            return;
        }

        if( scrolldata.showOn == 'scroll' ){
            if( !this._enableScroll ){
                mouseenter.call( this, true )
                evt.preventDefault();
                return
            }
            clearTimeout( this._scrollplugin )  
            this._scrollplugin = setTimeout(mouseleave.bind( scrolldata.appendTo == "parent" ? this.parentElement : this, {} ), scrolldata.tOut )
        }

        if( this._scrollEnd ) {
            obj= { scrollLeft : Math.round( this.scrollLeft ), scrollTop : Math.round( this.scrollTop ), scrollWidth : this.scrollWidth, scrollHeight : this.scrollHeight, bcr : format_bcr( this.getBoundingClientRect() ) };
            this._wheelObj = obj
            if( this.classList.contains( 'lyteTableScroll' ) ){
                forTable.call( this, obj )
            }
        }
        if( this._wheelObj ){
            fit = fitForScroll.call( this, mode, obj );
            if(( fit.scroll && mode /*&& b > 0*/ && (  !this._vertDiv || ( this._vertDiv && !this._vertDiv.classList.contains( 'visible' ) ) ) ) || ( fit.scroll && !mode /*&& a < 0*/ && ( !this._horiDiv || ( this._horiDiv && !this._horiDiv.classList.contains( 'visible' ) ) ) ) ){
                return
            }
            stpre = shouldPrevent.call( this, obj, mode, mode ? b : a ); 


            var is_inf = this._infiniteScroll,
            is_stopped = is_inf ? this.comp._stopScroll : false;

            if( ( is_inf && b > 0 ) || stpre ){
                 evt.preventDefault();
                if( !stpre && isTable && mode ) {
                    this.comp.scrollTable.call( this.comp, { yScroll : b }, this._wheelObj )
                }
            } else{
                if( scrolldata.preventOnEnd ){
                    evt.preventDefault();
                }
                return
            }
        }
        if( mode ) {
            if( isSaf.isIE11Lyte ) {
                if( this._wheelObj ){
                    this._wheelObj.scrollTop = Math.max( Math.min( this._wheelObj.scrollTop + b, this._wheelObj.scrollHeight - this._wheelObj.bcr.height ), 0 )
                    if(  isTable ) {
                        evt.yScroll = b;
                        this.comp.scroll.call( this, evt )
                    }
                    this.scrollTop += b;
                } 
            } else if( !isSaf.isIE11Lyte ) {
                this.scrollTop += b;
            }
        } else {
             if( isSaf.isIE11Lyte ) {
                if( this._wheelObj ) {
                    this._wheelObj.scrollLeft = Math.max( Math.min( this._wheelObj.scrollLeft + a, this._wheelObj.scrollWidth - this._wheelObj.bcr.width ), 0 )
                    if(  isTable ) {
                        evt.xScroll = a;
                        this.comp.scroll.call( this, evt )
                    }
                    this.scrollLeft += a;
                }
            } else {
               this.scrollLeft += a; 
            }
         }   
        if( isSaf.safari || isSaf.isIE11Lyte || isSaf.isIpad ) {
                this._alive = true;
                clearTimeout( this._alivetime )
                this._alivetime = setTimeout( function(){
                   delete this._alive; delete this._alivetime; 
                }.bind( this ), 16 )
            this._scrollFun.call( this, evt )
        }


        // if( this.comp ){
        //     clearTimeout( this._overlay.time );
        //     !this._overlay.classList.contains( 'lytescrolling' ) && this._overlay.classList.add( 'lytescrolling' );
        //     this._overlay.time = setTimeout( function(){
        //         this._overlay.classList.remove( 'lytescrolling' );
        //         delete this._overlay.time;
        //     }.bind( this ), 250 ) 
        // }
    }

    function scroll( evt ) {
        var a, b, issafIE = isSaf.isIE11Lyte || isSaf.safari || isSaf.isIpad, isIe = isSaf.isIE11Lyte ;
        if( issafIE && evt && evt.type == 'scroll' && ( this._alive && !evt._byFunc ) ) {
            trigEvt.call( this, isSaf.mode.a, isSaf.mode.b, this._wheelObj || { bcr : {} }, evt )
        } else{
            var obj= { scrollLeft : Math.round( this.scrollLeft ), scrollTop : Math.round( this.scrollTop ), scrollWidth : this.scrollWidth, scrollHeight : this.scrollHeight, bcr : this.getBoundingClientRect() };
            this._wheelObj = obj
            if( this.classList.contains( 'lyteTableScroll' ) ){
                forTable.call( this, obj )
            }
            if( this.prevScrlLeft != obj.scrollLeft ) {
                a = obj.scrollLeft - ( this.prevScrlLeft || 0 );
                b = 0;
                updatePos.call( this, false, a , evt, obj )
            } 
            if( this.prevScrlTop!= obj.scrollTop ) {
                b = obj.scrollTop - ( this.prevScrlTop || 0 );
                a = 0;
                updatePos.call( this, true, b , evt, obj )
            }
            isSaf.mode.b = b; isSaf.mode.a = a;
            if( !isIe || ( issafIE && ( !this._alive || evt._byFunc ) ) ) {
               if(  this.classList.contains( 'lyteTableScroll' ) ) {
                    this.comp.scroll.call( this, evt )
                }
            }
        }
    }

     function hideScrollbar( evt ) {
        clearTimeout( this._scrollplugin );  
        this._scrollplugin = setTimeout( mouseleave.bind( this._scrollData.appendTo == "parent" ? this.parentElement : this ), 500 );
    }

    function forTable( obj ) {
        var component =  this.comp, headerList = component.$node.getElementsByTagName( 'lyte-th' )
        if( this._infiniteScroll ){
            obj.$nodeClient = this.parentElement.getBoundingClientRect();
            var dummy =  this.getElementsByClassName( 'lytePreventInfiniteScroll' );
            obj.neglected = [];
            for( var m = 0; m < dummy.length; m++ ) {
                if( /*isVisible( dummy[ m ] )*/ !dummy[ m ].classList.contains( 'lyteHidden' ) ) {
                    obj.neglected.push( dummy[ m ] );
                }
            }

            obj.compNeg = dummy;
            if( this.comp._top != undefined ) {
                obj.topElem = [];
                var body = this.getElementsByTagName( 'lyte-tbody' )[ 0 ],
                another = body.getElementsByTagName( 'lyte-tr' );
                for( var n = 0; n < another.length; n++ ) {
                    if( !another[ n ].classList.contains( 'dummy' ) ) {
                        obj.topElem.push( another[ n ] );
                    }
                }
                obj.topElem = obj.topElem[ this.comp._top + obj.compNeg.length ]
                obj.topElemClient = obj.topElem ? this.comp.topElem( obj.topElem ) : {};
                obj.bottmElem = body.querySelector( 'lyte-tr:nth-of-type(' + ( ( this.comp._bottom + 1 + obj.compNeg.length ) ) + ')' );
                obj.bottmElemClient = obj.bottmElem ? this.comp.topElem( obj.bottmElem ) : {}
                obj.tbody = body
                obj.tbodyClient = obj.tbody ? obj.tbody.getBoundingClientRect() : {};
            }
        }
        obj.scrollDivClient = obj.bcr;
        for(var k = 0; k < headerList.length; k++)
            {
                headerList[k].property = headerList[k].getBoundingClientRect();
                headerList[k].order = k
            }
        obj.calculated = true;  
    }

    function trigEvt( a, b, obj, evt ) {
        delete this._scrollEnd; 

        var offset = this._scrollData.offset,
        __direction = this._direction == "rtl";

        if( ( ( Math.ceil( obj.scrollLeft + obj.bcr.width + offset.x ) >= obj.scrollWidth ) && !( __direction && isSaf.chrome ) ) || ( ( isSaf.firefox || isSaf.safari ) && __direction && ( Math.ceil( -obj.scrollLeft + obj.bcr.width + offset.x ) >= obj.scrollWidth ) ) || ( __direction && isSaf.chrome &&  obj.scrollLeft == offset.x ) ) {
            evt.horiScrollEnd = true;
        }
        if( Math.ceil( obj.scrollTop + obj.bcr.height + offset.y ) >= obj.scrollHeight ) {
            this._scrollEnd = evt.vertScrollEnd = true;
        }
        evt.yScroll = b; evt.xScroll = a;
        evt._byPlugin = true;
        this._wheelObj = obj;
    }

    function updatePos( mode, a, evt, obj ){
        var __this = this,
        __vert = __this._vertDiv,
        __hori = __this._horiDiv;

        if( parseInt( Math.abs( a ) ) == 0 || ( mode && !__vert ) ||( !mode && !__hori ) ){
            return;
        }

        var __out = mode ? __vert : __hori,
        rail_bcr = obj[ ( mode ? 'vert' : 'hori' ) + 'bcr' ] || __out.getBoundingClientRect(),
        __inn = __out.children[ 0 ],
        sL = "scrollTop",
        sW = "scrollHeight",
        wd = "height",
        lt = "top",
        direction = __this._direction == "rtl",
        btm = "bottom",
        __scrolldata = __this._scrollData,
        __bcr = obj.bcr,
        is_container = __scrolldata.appendTo != "parent",
        top_offset = mode ? ( __scrolldata.topOffset || 0 ) : 0;

        if( is_container ){
            rail_bcr = __bcr;
        }

        if( !mode ){
            sL = "scrollLeft";
            sW = "scrollWidth";
            wd = "width";
            lt = "left";
        }

        var __width = __bcr[ wd ],
        rail_bcr_lt = rail_bcr[ lt ],
        __rt = ( __width - ( rail_bcr_lt + top_offset - __bcr[ lt ] ) ) / obj[ sW ],
        trt = obj[ sL ] / obj[ sW ],
        mL = __scrolldata.minLength,
        minLength = mL ? ( mL != "auto" ? mL : 0 ) : 0.1 * __width,
        __final;

        set( __inn, wd, Math.max( __rt * __width, minLength ).toFixed( 3 ) + 'px' );

        if( direction && __inn._direction ){
            if( ( isSaf.safari && (  window._lyteUiUtils.isNegativeScroll() || !window.chrome ) ) || isSaf.firefox ) {
                __final =  ( ( obj[ sL ] / obj[ sW ] * 100 )  * obj.bcr[ wd ] / parseFloat( Math.max( __rt * __width, minLength ).toFixed( 3 ) ) );;
            } else {
                __final =  ( ( -( obj[ sW ] - __width - obj[ sL ] ) / obj[ sW ] * 100 ) * __width / parseFloat( Math.max( __rt * __width, minLength ).toFixed( 3 ) ) );
            }
            __final = 'translateX(' + __final + '%)';
        } else {
            __final = ( mode ? 'translateY' : 'translateX' ) + '(' + trt * ( __width - ( rail_bcr_lt - __bcr[ lt ] ) - ( Math.max( 0, minLength - __rt * __width ) ) ) + 'px)';
        }

        set( __inn, 'transform', __final );

        if( is_container ){
            set( __out, wd, __width + 'px' );

            var __other_elem = mode ? __hori : __vert,
            __to_set = 'translate' + '(' + obj.scrollLeft + 'px,' + obj.scrollTop + 'px)';

            set( __other_elem, 'transform', __to_set );
            set( __out, 'transform', __to_set );
        }

        __this.prevScrlLeft = obj.scrollLeft; 
        __this.prevScrlTop = obj.scrollTop;

        if( evt.type ){
            trigEvt.call( __this, mode ? 0 : a, mode ? a : 0, obj, evt );
        }
    }

    function removeScroll(){
        var elements = this;
        for( var i = 0; i < elements.length; i++ ) {
            var elem = elements[ i ], wrap = elem.parentElement;
            if( !wrap ){
                continue;
            }

            var scrolldata = elem._scrollData;

            if( scrolldata ) {

                if( scrolldata.appendTo != "parent" ){
                    wrap = elem;
                }

                delete elem._scrollData;
            }
            var scrollDivs = wrap.querySelectorAll( 'div.lyteScrollContainer' );
            for(var k = 0; k < scrollDivs.length; k++){
                if( scrollDivs[k].parentElement == wrap ) {
                    delete scrollDivs[ k ]._entertimeout;
                    delete scrollDivs[ k ]._leavetimeout;
                    wrap.removeChild(scrollDivs[k]);
                }
            }
            elem.classList.remove( 'lyteScrollBar', 'eventBinded' );
            elem.removeEventListener( 'mouseenter', mouseenter, true );
            elem.removeEventListener( 'wheel', initialWheel, true );
            elem.removeEventListener( 'touchstart', mouseenter, true )
            wrap.removeEventListener( 'mouseleave', mouseleave, true );
            elem.removeEventListener( 'mousedown', mousedown );
            elem.removeEventListener( 'touchmove', wheelEvent, { passive : false } )
            elem.removeEventListener( 'scroll', scroll, true );
            clearTimeout( elem._tchtime );
            if( elem._mouseleave ){
                document.removeEventListener( 'touchcancel', elem._mouseleave, true );
                document.removeEventListener( 'touchend', elem._mouseleave, true );
            }
            delete elem._wheelObj; delete elem._vertDiv; delete elem._horiDiv;
            delete elem._scrollFun; delete elem._alivetime; delete elem._alive; delete elem._wheelObj;
            delete elem.resetScrollbar; delete wrap._scrolldiv; delete elem._tchtime;
            delete elem._allowTouch;
            elem.classList.remove( 'eventBinded' );
            elem.tabIndex = elem._tabindex;
            delete elem._tabindex; delete elem._wheelObj;
            delete elem._prevPosY; delete elem._mouseleave;
            delete elem._prevPosX; delete elem._wheelEvt;
        }
        return this;
    }

    function destroy(){
        $L( '.lyteScrollBar' ).scroll( 'destroy' );
        window.removeEventListener('scroll', globalscroll, true ); 
        return this; 
    }

    function reset(){
        var elements = this;
        for( var i = 0; i < elements.length; i++ ){
            var __elems = elements[ i ],
            data = __elems._scrollData;

            if( data ){
                if( data.appendTo != "parent" ){
                    var obj = {
                        transform : "",
                        width : "",
                        height : ""
                    };
                    
                    $L( __elems._horiDiv ).css( obj );
                    $L( __elems._vertDiv ).css( obj );
                }
               __elems.resetScrollbar( true, true );
            }
        }
        return this;
    }

    $L.prototype.removeScroll = function(){
        // console.warn( 'removeScroll deprecated. Use scroll("destroy") instead' );
        return removeScroll.call( this );
    }

    $L.prototype.scroll = function( obj ) {
        if( obj && obj.constructor == String ){
            if( obj == "destroy" ){
                return removeScroll.call( this );
            } else if( obj == "destroyScroll" ){
                destroy.call( this );
            } else if( obj == "reset" ){
                reset.call( this );
            }
            return;
        }

        var fn = function( obj, name, _default ){
            var value = obj[ name ];
            if( value == void 0 ){
                value = _default;
            }
            obj[ name ] = value;
        };

        obj = obj || {};
        obj.showOn = obj.showOn || 'hover';
        obj.keyStep = obj.keyStep || 30;
        obj.wheelSpeed = obj.wheelSpeed || 1;
        // its a major change. to ensure same behaviour of normal scroll and to overcome issue in browser zoomed state changed this to false
        fn( obj, 'preventOnEnd', false );
        obj.offset = obj.offset || { x : 0, y : 0 };
        obj.tOut = obj.scrollTimeout || 500;
        obj.nested = obj.nested || false;
        obj.min = obj.min || -Infinity;
        obj.max = obj.max || Infinity;

        obj.appendTo = obj.appendTo || "parent";

        fn( obj, 'scrollYMarginOffset', 5 );
        fn( obj, 'scrollXMarginOffset', 5 );
        if( obj.preventXScroll ){
            obj.preventHorizontal = true; 
        }
        if( obj.preventYScroll ){
            obj.preventVertical = true;
        }
        var elements = this,
        is_parent = obj.appendTo == "parent";

        for( var i = 0; i < elements.length; i++ ) {
            var elem =  elements[ i ], vertDiv, horiDiv, wrp = elem.parentElement;
            is_parent && set( wrp, 'position', 'relative' );
            if( elem._scrollData ) {
                $L( elem ).removeScroll()
            }
            elem.resetScrollbar = mouseenter.bind( elements[ i ] );
            is_parent && ( wrp._scrolldiv = elem );
            elem._scrollData = obj;
            if( !obj.preventVertical ) {
                vertDiv = appendDiv.call( elem, 'lyteScrollContainer lyteScrollContainerY', obj, void 0, is_parent );
                if(obj.verticalPosition == 'left'){
                    vertDiv.classList.add('left');
                }
            }
            if( !obj.preventHorizontal ) {
                vertDiv = appendDiv.call( elem, 'lyteScrollContainer lyteScrollContainerX', obj, true, is_parent );
                if(obj.horizontalPosition == 'top'){
                    vertDiv.classList.add('top');
                }
            }
            if(isSaf.firefox ){
                elem.scrollLeft = 0;
                elem.scrollTop = 0;
            } 
            elem.addEventListener( 'mouseenter', mouseenter, true )
            elem.addEventListener( 'touchstart', mouseenter, true )
            elem.addEventListener( 'touchmove', wheelEvent, { passive : false } )
            elem.addEventListener( 'mousedown', mousedown );
            elem.addEventListener( 'wheel', initialWheel, true );
            
            if( obj.showOn != 'always' ){
                ( is_parent ? wrp : elem ).addEventListener( 'mouseleave', mouseleave, true )
            } else {
                setTimeout( mouseenter.bind( elem ), 100, {} )
            }

            elem.classList.add( 'lyteScrollBar' )
            elem._scrollFun = scroll;
        }
      return this;
    }

    $L.prototype.destroyLyteScroll = function(){
        // console.warn( 'destroyLyteScroll deprecated. Use scroll("destroyScroll") instead' );
        return destroy.call( this );  
    }

    $L.prototype.resetScrollbar = function(){
        // console.warn( 'resetScrollbar deprecated. Use scroll("reset") instead' );
        return reset.call( this );
    }

    function globalscroll( evt ){
        var el = evt.target.correspondingElement || evt.target;
        if( el != document && el != document.body && el._scrollFun ) {
            el._scrollFun.call( el, evt );
        }
        if( evt._byFunc ) {
            evt.preventDefault();
            evt.stopPropagation();
            evt.stopImmediatePropagation();
        }
    }
    window.addEventListener('scroll', globalscroll, true ); 
   }
} );

/***/ }),

/***/ 55123936:
/*!*********************************************************************!*\
  !*** ./node_modules/@zoho/lyte-ui-component/plugins/lyte-search.js ***!
  \*********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;( function( cb ){
  if( true ){
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(/*! @zoho/lyte-dom */ 10891274) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (cb),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
})( function( $L ){
    if( $L ){
      function getScope( elem, scope ){
          var data = elem._searchPluginData;
          scope = data.dynamicScope ? data.dynamicScope( elem ) : scope;
          if( data.checkFromParent ){
            scope = elem.parentNode;
          }
          return scope;
      }

     function keyUpBind( event ){
         if([37,13,38,39,40,91,27,16,18].indexOf(event.keyCode) > -1){ 
           return
         }
         var element = this,
         data = element._searchPluginData,
         searchDelay = data.searchDelay;

         clearTimeout(this.timeout); 
         clearTimeout( this._iptime );
         if( searchDelay == void 0 ){
            pressFunc.call( this, event );
         } else {
            this.timeout = setTimeout( pressFunc.bind( this ), searchDelay, event );
         }
      }

      function inputBind( event ){
         clearTimeout( this._iptime );
         this._iptime = setTimeout( pressFunc.bind( this ), 250, event );
      }

      function pressFunc( event ){
          var element = this;
          event = event || {};
          var data = this._searchPluginData,
          ret = findingList.call(this,event),
          searchList = ret[0],
          targetList = ret[1],
          searchComp = ret[2],
          related = ret[ 3 ],
          casesen  = data.caseSensitive,
          minLength = data.minLength ? data.minLength : 0,
          method = data.method ? data.method : 'contains',
          keyCode = event.keyCode || event.which,
          val = fNcase( casesen, element.tagName == 'LYTE-INPUT' ? element.querySelector( 'input,textarea' ).value : element.value, data.trim ),
          visibleList = [], flag, comp = data.component, hiddenList = [],
          hiddenSelector = data.hiddenSelector;

          if( data.diacritic ){
             val = window._lyteUiUtils.convert_diacritics( val );
          }

          if(val.length >= minLength || keyCode == 8 || keyCode == 46 )
            { 
              if(val.length)
                  {
                    for( var i = 0; i < searchList.length; i++ ) { 
                        var str = fNcase( casesen, searchList[i].trim() );
                        if( switchfun( method, val, str ) ) {
                            visibleList.push( searchComp[i] );
                        } else {
                           hiddenList.push( searchComp[ i ] );
                        }   
                    }
                  }
               else
                  {
                    visibleList = Array.apply( Array, searchComp );
                  }   
              if( data.onSearch && data.onSearch( visibleList, event , val ) == false ){
                return;
              }
               for(var i = 0; i < searchList.length; i++)
                   {  
                       var str = fNcase( casesen, searchList[i].trim() ), val = val;
                       additionalHand.call( this, targetList[i], switchfun( method, val, str ) , val )   
                   } 
              if( !/tree|accordion/.test( comp ) ) {
                  for( var i = 0; i < related.length; i++ ) {
                      if( related[ i ].querySelectorAll( data.target || data.search ).length == related[ i ].querySelectorAll( '.lyteSearchHidden' + ( hiddenSelector ? ( ',' + hiddenSelector ) : '' ) ).length ) {
                          related[ i ].classList.add( 'lyteSearchHidden' );
                      } else {
                          related[ i ].classList.remove( 'lyteSearchHidden' );
                      }
                   }
              } else if( comp == 'accordion' ){
                  $L.fastdom.measure( accfilter.bind( this, visibleList, hiddenList, val ) )
              } else if( comp == "tree" ){
                 $L.fastdom.measure( treefilter.bind( this, visibleList, hiddenList, val ) )
              }
          }                 
      }

      function arrayFrom( nodeList ){
          var arrayList = [];
          for(var i = 0; i < nodeList.length; i++)
            {
              arrayList.push(nodeList[i]);
            }
          return arrayList.slice(); 
      }

        function fNcase( bool, value, trim ){
          if( !bool ){
              value = value.toLowerCase();
          }
          if( trim ){
              value = value.trim();
          }
          return value;
        }

        function switchfun( method, val, str ){
          var check;
          switch( method )
            {
              case 'contains' : {
                  check = str.indexOf( val ) >= 0
                  break;    
              }
              case 'startsWith' : {
                    check = str.indexOf( val ) == 0; 
                    break;
              }
              case 'endsWith' : {
                    var ind = str.lastIndexOf( val );
                    if( ind != -1 ){
                      check = ( ind  + val.length ) == str.length;
                    }
                    break;
              }
            }
            return check;
        }

        function hiderecurse( elem ){
          for( var i = elem.length - 1; i >= 0; i-- ) {
              var icon = elem.eq( i );
              if( icon.hasClass( 'lyteIconOpened' ) ){
                  setTimeout( icon.click.bind( icon ) , 20 );
              }
          }
        }

        function searchListFind( nodeName ){
              var searchList = [];
              var target = [];
              for(var i = 0; i < nodeName.childElementCount; i++)
                {
                  while(nodeName.children[i].childElementCount)
                    {
                        window.returnedVal = searchListFind(nodeName.children[i]);
                        searchList = searchList.concat(window.returnedVal[0]);
                        target = target.concat(window.returnedVal[1]);
                        break;
                    }
                  if(!nodeName.children[i].childElementCount) 
                      {
                        searchList.push(nodeName.children[i].textContent);
                        target.push(nodeName.children[i]);
                      }
                }
              return [searchList,target];
        };

        function findingList(){
              var data = this._searchPluginData;
              var scope = getScope( this, typeof data.scope == 'string' ? document.querySelector(data.scope) : data.scope );
              var searchList = [], targetList = [], searchComp = [], related = [];

              if( !scope ){
                  return [ searchList, targetList, searchComp, related ];
              }

              if(data.search)   
                  {
                      searchComp = scope.querySelectorAll( data.search.trim() )
                      var target = data.target ? data.target : data.search;
                      for(var j = 0; j < searchComp.length; j++){
                          var valueToPush = searchComp[ j ].textContent;
                          if( data.diacritic ){
                            valueToPush = window._lyteUiUtils.convert_diacritics( valueToPush );
                          }
                          searchList.push( valueToPush );
                      }
                      targetList = scope.querySelectorAll( target )
                  }
              else
                  {
                      var callSearchList = searchListFind(scope)
                      searchList = callSearchList[0];
                      targetList = callSearchList[1];
                      searchComp = targetList.slice();
                  } 
                if( data.related && ( data.target || data.scope  ) ) {
                    related = scope.querySelectorAll( data.related );
                }
                return [searchList, targetList, searchComp, related];  
        };

        function accfilter ( vis, hid, value ){
              var scope = $L( getScope( this, this._searchPluginData.scope ) )[ 0 ];
              for( var i = 0; i < vis.length; i++ ){
                var close1 = $L( vis[ i ] ).closest( 'lyte-accordion-item', scope )
                for( var j = 0; j < hid.length; j++ ){
                  var close2 = $L( hid[ j ] ).closest( 'lyte-accordion-item', scope )
                  if( close1[ 0 ] == close2[ 0 ] ){
                      hid.splice( j, 1 );
                      j--; continue;
                  }
                }
                if( vis[ i + 1 ] ) {
                  var close2 = $L( vis[ i + 1 ] ).closest( 'lyte-accordion-item', scope );
                  if( close1[ 0 ] == close2[ 0 ] ){
                      vis.splice( i + 1, 1 );
                      i--;
                  }
                }
              }
              // scope[ 0 ].component.getAllHeights();
              $L.fastdom.mutate( function(){
                  for( var i = scope.ltProp( 'exclusive' ) ? ( vis.length - 1 ) : 0; i < vis.length; i++ ){
                    var isclose = false, close = $L( vis[ i ] ).closest( 'lyte-accordion-item' );
                    isclose = !close.hasClass( 'lyteAccordionActive' );
                    if( !value ){
                        isclose = !isclose
                    }
                    if( isclose ){
                        close.click();
                    }
                  }

                  for( var j = 0; j < hid.length; j++ ){
                      var close = $L( hid[ j ] ).closest( 'lyte-accordion-item' )
                      close.hasClass( 'lyteAccordionActive' ) && close.click();
                  }
              })
        }

        function treeinremove ( arr ){
            for( var i = 0; i < arr.length; i++ ){
                if( arr[ i + 1 ] ){
                  var cur = $L( arr[ i ] ).closest( '.lyteTreeBodyDiv' )[ 0 ], next = $L( arr[ i + 1 ] ).closest( '.lyteTreeBodyDiv' )[ 0 ];
                  if( cur.contains( next ) ){
                      arr.splice( i + 1, 1 );
                  } else if(next.contains( cur ) ){
                      arr.splice( i, 1 );
                      i--;
                  }
                }
            }
        }

        function treefilter( vis, hid, value, clear ){
          var scope = $L( getScope( this, this._searchPluginData.scope ) )[ 0 ];
          for( var i = 0; i < vis.length; i++ ){
            var cur = $L( vis[ i ] ).closest( '.lyteTreeBodyDiv' );
            for( var j = 0; j < hid.length; j++ ){
              var hide = $L( hid[ j ] ).closest( '.lyteTreeBodyDiv' ),
              flg = cur[ 0 ].contains( hide[ 0 ] ) || hide[ 0 ].contains( cur[ 0 ] );
              if( flg ){
                  hide.addClass( 'lyteSearchHidden' );
                  hid.splice( j, 1 );
                  j--;
              }
            }
          }
          for( var i = 0; i < vis.length; i++ ){
            removeClse( vis[ i ], scope )
            value.length && scope.ltProp( 'stateAttr', $L( vis[ i ] ).closest( 'lyte-tree-body' ).attr( 'data-value' ) )
          }
          if( value.length ) {
            for( var i = 0; i < hid.length; i++ ){
              $L( hid[ i ] ).closest( '.lyteTreeBodyDiv' ).addClass( 'lyteSearchHidden' )
            }
          } else {
            hiderecurse( $L( 'lyte-yield:not(.noChildClass) lyte-tree-icon', scope ), clear );
          }
        }

        function removeClse( target, scope ){
            var el = $L( target ).closest( '.lyteSearchHidden', scope );
            if( el.length ){
              el.removeClass( 'lyteSearchHidden' );
              removeClse( target, scope );
            }
        }

        function additionalHand( target, check, val ){
            var query = this._searchPluginData, comp = query.component;
            if( check ){
                if( comp == 'dropdown' ){
                  var clo = $L( target ).closest( 'lyte-drop-box' )[ 0 ] 
                  if( clo ) {
                    clo.classList.contains( 'lyteDropdownHidden' ) && ( clo.origindd ? clo.origindd.toggle() : $L( clo ).closest( 'lyte-dropdown' ).get( 0 ).toggle() )
                  }
                } 
              target.classList.remove( 'lyteSearchHidden' );
            } else if( comp != "tree" ) {
              if( target.classList.contains( 'lyteSearchHidden' ) ){
                  return;
              }
              target.classList.add( 'lyteSearchHidden' );
            }
        }

        $L.prototype.search = function( data ){
            data = data ? data : {};
            if(!data.scope)
                {
                    console.error('scope is not given');
                    return;
                }
            // var scope = typeof data.scope == 'string' ? document.body.querySelector( data.scope.trim() ) : data.scope;    
            var element = this[ 0 ]
            var searchList = [], targetList = [], searchComp = [];
            element._searchPluginData = data;

            if( !data.hasOwnProperty( 'searchDelay' ) ){
              data.searchDelay = 100;
            }

            if( data.component == "accordion" ){
              data.related = "lyte-accordion-item";
            } else if( data.component == "tree" ){
              data.related = ".lyteTreeBodyDiv lyte-yield:not(.noChildClass) lyte-tree-icon";
            }

            element.setValueForSearch = element.setValue = function(value){
                var element = this
                value = value != undefined ? value : '';
                element.tagName == 'LYTE-INPUT' ? element.ltProp({'value' : value}) : element.value = value;
                var evt = new Event('keyup');
                evt.which = evt.keyCode = 8;
                element.dispatchEvent(evt);
            }

        element.addEventListener('keyup', keyUpBind ); 

        element.addEventListener( 'input', inputBind);
        element.reset = pressFunc.bind( element );                  
        return this;
      }

      $L.prototype.removeSearch = function(){
          var removeElements = this;

          for( var i = 0; i < removeElements.length; i++ ){
              var current = removeElements[ i ],
              scope, search, related;
              if( !current._searchPluginData ){
                continue;
              }

              delete current.reset; 
              scope = current._searchPluginData.scope;
              search = current._searchPluginData.target || current._searchPluginData.search;
              related = current._searchPluginData.related;
              if( !scope ){
                continue;
              }
              scope = $L( getScope( current, scope ) );
              scope.find( search ).removeClass( 'lyteSearchHidden' );
              related && scope.find( related ).removeClass( 'lyteSearchHidden' );
              delete current._searchPluginData;
              delete current.setValueForSearch; delete current.setValue;

              current.removeEventListener( 'input', inputBind );
              current.removeEventListener( 'keyup', keyUpBind );
          }
          return this;
      }
    }
});


/***/ })

}]);
//# sourceMappingURL=birthday-reminder.js.map