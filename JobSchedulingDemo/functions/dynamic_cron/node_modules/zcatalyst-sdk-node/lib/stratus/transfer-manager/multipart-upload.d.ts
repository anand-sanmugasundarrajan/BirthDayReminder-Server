/// <reference types="node" />
/// <reference types="node" />
import { Stream } from 'stream';
import { AuthorizedHttpClient } from '../../utils/api-request';
import { Bucket } from '../bucket';
import { ICatalystMultipartSummaryRes } from '../../utils/pojo/stratus';
export declare class MultipartUpload {
    objectName: string;
    uploadId: string;
    bucket: Bucket;
    _requester: AuthorizedHttpClient;
    constructor(bucketInstance: Bucket, objectName: string, uploadId: string);
    /**
     * Upload the individual parts of the file, with a distinct part number.
     * @param objectData to be uploaded.
     * @param partNumber can be between 1 and 1000. It represent the ordering of the parts.
     * The parts can be uploaded in any order.
     * @returns boolean.
     */
    uploadPart(objectData: Stream | Buffer, partNumber: number): Promise<boolean>;
    /**
     * Complete the multipart upload, after all parts are uploaded.
     * @returns boolean.
     */
    completeUpload(): Promise<boolean>;
    /**
     * Get a summary of the uploaded parts.
     * @returns ICatalystMultipartSummaryRes.
     */
    getUploadSummary(): Promise<ICatalystMultipartSummaryRes>;
}
