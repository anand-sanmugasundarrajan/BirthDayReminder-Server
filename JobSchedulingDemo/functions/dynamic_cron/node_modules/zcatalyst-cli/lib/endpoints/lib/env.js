'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ansi_colors_1 = require("ansi-colors");
const error_1 = __importDefault(require("../../error"));
const api_1 = __importDefault(require("../../internal/api"));
const constants_1 = require("../../util_modules/constants");
const logger_1 = require("../../util_modules/logger");
class Env {
    constructor(opts, org) {
        this.opts = opts;
        this.opts.envId = org;
    }
    getEnvs(projectId, throwErr = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(this.opts).get('/baas/v1/project/' + projectId + '/environment');
            if (res.body && res.body.data) {
                const data = res.body.data;
                if (throwErr) {
                    const devEnv = data.find((env) => env.env_name === constants_1.DEFAULT.env_name);
                    if ((devEnv === null || devEnv === void 0 ? void 0 : devEnv.env_status) === 'Blocked') {
                        throw new error_1.default('Environment blocked', {
                            exit: 1,
                            errorId: 'ENV-1',
                            arg: [
                                (0, ansi_colors_1.bold)(constants_1.DEFAULT.env_name),
                                (0, ansi_colors_1.bold)(projectId),
                                ansi_colors_1.bold.red('blocked'),
                                ansi_colors_1.italic.underline('support@zohocatalyst.com')
                            ]
                        });
                    }
                }
                return data;
            }
            (0, logger_1.debug)('get environment response from server : ' + JSON.stringify(res.body));
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
}
exports.default = Env;
