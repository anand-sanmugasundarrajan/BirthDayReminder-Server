"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = __importDefault(require("../../internal/api"));
const logger_1 = require("../../util_modules/logger");
const error_1 = __importDefault(require("../../error"));
const project_1 = require("../../util_modules/project");
const constants_1 = require("../../util_modules/constants");
const js_1 = require("../../util_modules/js");
class Credentials {
    constructor(projectId, opts) {
        this.opts = opts;
        this.projectId = projectId;
        this.projectDomain = `https://${(0, project_1.getDomainPrefix)()}.${constants_1.ORIGIN.app.replace('https://', '')}`;
    }
    generateJWTToken(cookie) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(Object.assign(Object.assign({}, this.opts), { headers: { Cookie: cookie }, origin: this.projectDomain })).get(`/baas/v1/project/${this.projectId}/authentication/custom-token`);
            if (res.body && res.body.data) {
                return res.body.data;
            }
            (0, logger_1.debug)('Download response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
    convertJwtToAuthToken(reqOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield new api_1.default(Object.assign(Object.assign({}, this.opts), { origin: constants_1.ORIGIN.iamPortal, headers: { Origin: this.projectDomain } })).post(`/clientoauth/v2/${(0, project_1.getDomainKey)()}/remote/auth`, {
                qs: {
                    response_type: 'remote_token',
                    jwt_token: reqOpts.jwt_token,
                    client_id: reqOpts.client_id,
                    scope: js_1.JS.values(reqOpts.scopes).join(' ')
                }
            });
            if (res.body) {
                return res.body;
            }
            (0, logger_1.debug)('Download response from server : ' + res.body);
            throw new error_1.default('Server Error: Unexpected Response from server.', {
                exit: 2
            });
        });
    }
}
exports.default = Credentials;
