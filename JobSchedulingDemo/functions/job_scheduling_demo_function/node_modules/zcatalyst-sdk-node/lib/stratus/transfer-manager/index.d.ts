/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { AuthorizedHttpClient } from '../../utils/api-request';
import fs from 'fs';
import { Bucket } from '../bucket';
import { Readable } from 'stream';
import { MultipartUpload } from './multipart-upload';
export declare class TransferManager {
    #private;
    _requester: AuthorizedHttpClient;
    bucket: Bucket;
    constructor(bucketInstance: Bucket);
    /**
     * Create a multipart instance.
     * @param objectName name of the object.
     * @returns MultipartUpload.
     */
    createMultipartInstance(objectName: string, uploadId?: string): Promise<MultipartUpload>;
    /**
     * Upload an object as multiple parts.
     * @param data object body to be uploaded.
     * @param partSize size of the each object part.
     * @returns string.
     */
    putObjectAsParts(objectName: string, data: fs.ReadStream, partSize: number, concurrency?: number): Promise<string>;
    /**
     * Get the object as multiple parts
     * @param partSize in MB. Size of each parts.
     * @returns AsyncGenerator<Buffer, void>.
     */
    getIterableObject(objectName: string, partSize: number): AsyncGenerator<Buffer, void>;
    /**
     * Get the object as multiple parts.
     * @param partSize in MB. Size of each parts.
     * @returns downloadable object parts.
     */
    generatePartDownloaders(objectName: string, partSize: number): Promise<Array<() => Promise<Readable>>>;
}
