"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipartUpload = void 0;
class MultipartUpload {
    constructor(bucketInstance, objectName, uploadId) {
        this._requester = bucketInstance.getAuthorizationClient();
        this.bucket = bucketInstance;
        this.objectName = objectName;
        this.uploadId = uploadId;
    }
    /**
     * Upload the individual parts of the file, with a distinct part number.
     * @param objectData to be uploaded.
     * @param partNumber can be between 1 and 1000. It represent the ordering of the parts.
     * The parts can be uploaded in any order.
     * @returns boolean.
     */
    uploadPart(objectData, partNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.bucket.uploadPart(this.objectName, this.uploadId, objectData, partNumber);
            return resp;
        });
    }
    /**
     * Complete the multipart upload, after all parts are uploaded.
     * @returns boolean.
     */
    completeUpload() {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = this.bucket.completeMultipartUpload(this.objectName, this.uploadId);
            return resp;
        });
    }
    /**
     * Get a summary of the uploaded parts.
     * @returns ICatalystMultipartSummaryRes.
     */
    getUploadSummary() {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.bucket.getMultipartUploadSummary(this.objectName, this.uploadId);
            return resp;
        });
    }
}
exports.MultipartUpload = MultipartUpload;
