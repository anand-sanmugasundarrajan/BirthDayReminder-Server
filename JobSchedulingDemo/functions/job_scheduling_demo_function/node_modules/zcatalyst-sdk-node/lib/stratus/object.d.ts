import { ICatalystObjectVersions, ICatalystObjectDetails, ICatalystSignedURLRes, ICatalystObjectVersionDetails } from '../utils/pojo/stratus';
import { Bucket } from './bucket';
export declare class StratusObject {
    #private;
    objectDetails: ICatalystObjectDetails | {
        key: string;
    };
    constructor(bucketInstance: Bucket, keyDetails: ICatalystObjectDetails | string);
    /**
     * Get the details of the object
     * @param versionId Used to retrieve the details of a specific version of the object.
     * @returns ICatalystObjectDetails.
     */
    getDetails(versionId?: string): Promise<ICatalystObjectDetails>;
    /**
     * Set the metadata for the object. This will replace the existing details.
     * @param metaDetails Meta details of the object.
     * @returns ICatalystObjectDetails.
     */
    putMeta(metaDetails: Record<string, string>): Promise<ICatalystObjectDetails>;
    /**
     * Get signed url of the object in the caching enabled bucket.
     * @param url Cached url of the object.
     * @param expiry Time in seconds.
     * @returns ICatalystSignedURLRes.
     */
    generateCacheSignedUrl(url: string, expiry?: string): Promise<ICatalystSignedURLRes>;
    /**
     * List the object versions by pagination.
     * @param maxVersion maximum number of version to be returned.
     * @param nextToken used to retrieve the next set of versions.
     * @returns ICatalystObjectVersions.
     */
    listPagedVersions(maxVersion?: string, nextToken?: string): Promise<ICatalystObjectVersions>;
    /**
     * Get the object versions as iterable.
     * @param maxVersion maximum number of versions returned.
     * @returns AsyncGenerator<ICatalystObjectVersionDetails, void>.
     */
    listIterableVersions(maxVersion?: string): AsyncGenerator<ICatalystObjectVersionDetails, void>;
    toString(): string;
    toJSON(): ICatalystObjectDetails;
}
